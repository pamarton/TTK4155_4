
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d2  00800100  00002206  0000229a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  008003d2  008003d2  0000256c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002324  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ace  00000000  00000000  00004afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6e  00000000  00000000  000055ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000714  00000000  00000000  00006138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b5  00000000  00000000  0000684c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bae  00000000  00000000  00007101  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00008caf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__ctors_end>
       4:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_1>
       8:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_2>
       c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      10:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      14:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      18:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      1c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      20:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      24:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      28:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      2c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      30:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      34:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      38:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      3c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      40:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      44:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      48:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      4c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      50:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      54:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      58:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      5c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      60:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      64:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      68:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      6c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	43 61       	ori	r20, 0x13	; 19
      72:	6c 69       	ori	r22, 0x9C	; 156
      74:	62 72       	andi	r22, 0x22	; 34
      76:	61 74       	andi	r22, 0x41	; 65
      78:	65 00       	.word	0x0065	; ????
	...

0000007c <debug_entry_0>:
      7c:	66 69 74 20 73 63 72 65 65 6e 00 00                 fit screen..

00000088 <option_entry_1>:
      88:	43 6f 6e 74 72 61 73 74 00 00 00 00                 Contrast....

00000094 <option_entry_0>:
      94:	4d 75 73 69 63 00 00 00 00 00 00 00                 Music.......

000000a0 <mainmenu_entry_3>:
      a0:	4f 70 74 69 6f 6e 73 00 00 00 00 00                 Options.....

000000ac <mainmenu_entry_2>:
      ac:	44 65 62 75 67 00 00 00 00 00 00 00                 Debug.......

000000b8 <mainmenu_entry_1>:
      b8:	48 69 67 68 73 63 6f 72 65 00 00 00                 Highscore...

000000c4 <font>:
	...
      cc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      dc:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
      ec:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
      fc:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     10c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     11c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     12c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     13c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     14c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     15c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     16c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     17c:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     18c:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     19c:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1ac:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1bc:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1cc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1dc:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1ec:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     1fc:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     20c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     21c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     22c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     23c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     24c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     25c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     26c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     27c:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     28c:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     29c:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2ac:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2bc:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2cc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2dc:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2ec:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     2fc:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     30c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     31c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     32c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     33c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     34c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     35c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     36c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     37c:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     38c:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     39c:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3ac:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3bc:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3cc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     3dc:	01 01 01 01 01 01 01 ff                             ........

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d4 e0       	ldi	r29, 0x04	; 4
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61

000003f0 <__do_copy_data>:
     3f0:	13 e0       	ldi	r17, 0x03	; 3
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	b1 e0       	ldi	r27, 0x01	; 1
     3f6:	e6 e0       	ldi	r30, 0x06	; 6
     3f8:	f2 e2       	ldi	r31, 0x22	; 34
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__do_copy_data+0x10>
     3fc:	05 90       	lpm	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	a2 3d       	cpi	r26, 0xD2	; 210
     402:	b1 07       	cpc	r27, r17
     404:	d9 f7       	brne	.-10     	; 0x3fc <__do_copy_data+0xc>

00000406 <__do_clear_bss>:
     406:	24 e0       	ldi	r18, 0x04	; 4
     408:	a2 ed       	ldi	r26, 0xD2	; 210
     40a:	b3 e0       	ldi	r27, 0x03	; 3
     40c:	01 c0       	rjmp	.+2      	; 0x410 <.do_clear_bss_start>

0000040e <.do_clear_bss_loop>:
     40e:	1d 92       	st	X+, r1

00000410 <.do_clear_bss_start>:
     410:	a3 34       	cpi	r26, 0x43	; 67
     412:	b2 07       	cpc	r27, r18
     414:	e1 f7       	brne	.-8      	; 0x40e <.do_clear_bss_loop>
     416:	0e 94 a4 05 	call	0xb48	; 0xb48 <main>
     41a:	0c 94 01 11 	jmp	0x2202	; 0x2202 <_exit>

0000041e <__bad_interrupt>:
     41e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000422 <readADC>:
     422:	82 30       	cpi	r24, 0x02	; 2
     424:	91 05       	cpc	r25, r1
     426:	71 f0       	breq	.+28     	; 0x444 <readADC+0x22>
     428:	1c f4       	brge	.+6      	; 0x430 <readADC+0xe>
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	39 f0       	breq	.+14     	; 0x43c <readADC+0x1a>
     42e:	1c c0       	rjmp	.+56     	; 0x468 <readADC+0x46>
     430:	83 30       	cpi	r24, 0x03	; 3
     432:	91 05       	cpc	r25, r1
     434:	59 f0       	breq	.+22     	; 0x44c <readADC+0x2a>
     436:	04 97       	sbiw	r24, 0x04	; 4
     438:	69 f0       	breq	.+26     	; 0x454 <readADC+0x32>
     43a:	16 c0       	rjmp	.+44     	; 0x468 <readADC+0x46>
     43c:	84 e1       	ldi	r24, 0x14	; 20
     43e:	80 93 00 14 	sts	0x1400, r24
     442:	0b c0       	rjmp	.+22     	; 0x45a <readADC+0x38>
     444:	85 e1       	ldi	r24, 0x15	; 21
     446:	80 93 00 14 	sts	0x1400, r24
     44a:	07 c0       	rjmp	.+14     	; 0x45a <readADC+0x38>
     44c:	86 e1       	ldi	r24, 0x16	; 22
     44e:	80 93 00 14 	sts	0x1400, r24
     452:	03 c0       	rjmp	.+6      	; 0x45a <readADC+0x38>
     454:	87 e1       	ldi	r24, 0x17	; 23
     456:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45a:	82 e5       	ldi	r24, 0x52	; 82
     45c:	8a 95       	dec	r24
     45e:	f1 f7       	brne	.-4      	; 0x45c <readADC+0x3a>
     460:	80 91 00 14 	lds	r24, 0x1400
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	08 95       	ret
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	08 95       	ret

0000046e <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     46e:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     470:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     472:	85 b7       	in	r24, 0x35	; 53
     474:	81 60       	ori	r24, 0x01	; 1
     476:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     478:	85 b7       	in	r24, 0x35	; 53
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	84 60       	ori	r24, 0x04	; 4
     482:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     484:	85 b7       	in	r24, 0x35	; 53
     486:	88 60       	ori	r24, 0x08	; 8
     488:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     48a:	8b b7       	in	r24, 0x3b	; 59
     48c:	80 64       	ori	r24, 0x40	; 64
     48e:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     490:	8b b7       	in	r24, 0x3b	; 59
     492:	80 68       	ori	r24, 0x80	; 128
     494:	8b bf       	out	0x3b, r24	; 59
     496:	08 95       	ret

00000498 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	2f 93       	push	r18
     4ac:	3f 93       	push	r19
     4ae:	4f 93       	push	r20
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	7f 93       	push	r23
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4c6:	80 e1       	ldi	r24, 0x10	; 16
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     4d2:	82 e5       	ldi	r24, 0x52	; 82
     4d4:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     4d8:	f8 2e       	mov	r15, r24
     4da:	e9 2e       	mov	r14, r25
     4dc:	8c e4       	ldi	r24, 0x4C	; 76
     4de:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     4e2:	18 2f       	mov	r17, r24
     4e4:	09 2f       	mov	r16, r25
     4e6:	89 e5       	ldi	r24, 0x59	; 89
     4e8:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     4ec:	c8 2f       	mov	r28, r24
     4ee:	d9 2f       	mov	r29, r25
     4f0:	88 e5       	ldi	r24, 0x58	; 88
     4f2:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	89 e3       	ldi	r24, 0x39	; 57
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
     512:	8d b7       	in	r24, 0x3d	; 61
     514:	9e b7       	in	r25, 0x3e	; 62
     516:	0c 96       	adiw	r24, 0x0c	; 12
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	9e bf       	out	0x3e, r25	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	8d bf       	out	0x3d, r24	; 61
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	bf 91       	pop	r27
     52c:	af 91       	pop	r26
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24
     532:	7f 91       	pop	r23
     534:	6f 91       	pop	r22
     536:	5f 91       	pop	r21
     538:	4f 91       	pop	r20
     53a:	3f 91       	pop	r19
     53c:	2f 91       	pop	r18
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
	printf("Left Button Pressed\n");
     572:	82 e5       	ldi	r24, 0x52	; 82
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	
     57a:	ff 91       	pop	r31
     57c:	ef 91       	pop	r30
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <calibrate_joystick>:
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	c4 e6       	ldi	r28, 0x64	; 100
     5a6:	d0 e0       	ldi	r29, 0x00	; 0
     5a8:	00 91 dc 03 	lds	r16, 0x03DC
     5ac:	10 91 dd 03 	lds	r17, 0x03DD
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     5b8:	01 58       	subi	r16, 0x81	; 129
     5ba:	1f 4f       	sbci	r17, 0xFF	; 255
     5bc:	08 1b       	sub	r16, r24
     5be:	19 0b       	sbc	r17, r25
     5c0:	10 93 dd 03 	sts	0x03DD, r17
     5c4:	00 93 dc 03 	sts	0x03DC, r16
     5c8:	00 91 da 03 	lds	r16, 0x03DA
     5cc:	10 91 db 03 	lds	r17, 0x03DB
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     5d8:	01 58       	subi	r16, 0x81	; 129
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	08 1b       	sub	r16, r24
     5de:	19 0b       	sbc	r17, r25
     5e0:	10 93 db 03 	sts	0x03DB, r17
     5e4:	00 93 da 03 	sts	0x03DA, r16
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	20 97       	sbiw	r28, 0x00	; 0
     5ec:	e9 f6       	brne	.-70     	; 0x5a8 <calibrate_joystick+0xc>
     5ee:	80 91 dc 03 	lds	r24, 0x03DC
     5f2:	90 91 dd 03 	lds	r25, 0x03DD
     5f6:	24 e6       	ldi	r18, 0x64	; 100
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	b9 01       	movw	r22, r18
     5fc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__divmodhi4>
     600:	70 93 dd 03 	sts	0x03DD, r23
     604:	60 93 dc 03 	sts	0x03DC, r22
     608:	80 91 da 03 	lds	r24, 0x03DA
     60c:	90 91 db 03 	lds	r25, 0x03DB
     610:	b9 01       	movw	r22, r18
     612:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__divmodhi4>
     616:	70 93 db 03 	sts	0x03DB, r23
     61a:	60 93 da 03 	sts	0x03DA, r22
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <signal_to_range>:
     628:	2f 92       	push	r2
     62a:	3f 92       	push	r3
     62c:	4f 92       	push	r4
     62e:	5f 92       	push	r5
     630:	6f 92       	push	r6
     632:	7f 92       	push	r7
     634:	8f 92       	push	r8
     636:	9f 92       	push	r9
     638:	af 92       	push	r10
     63a:	bf 92       	push	r11
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	00 d0       	rcall	.+0      	; 0x64e <signal_to_range+0x26>
     64e:	00 d0       	rcall	.+0      	; 0x650 <signal_to_range+0x28>
     650:	00 d0       	rcall	.+0      	; 0x652 <signal_to_range+0x2a>
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	3c 01       	movw	r6, r24
     658:	7a 83       	std	Y+2, r23	; 0x02
     65a:	69 83       	std	Y+1, r22	; 0x01
     65c:	5c 83       	std	Y+4, r21	; 0x04
     65e:	4b 83       	std	Y+3, r20	; 0x03
     660:	3e 83       	std	Y+6, r19	; 0x06
     662:	2d 83       	std	Y+5, r18	; 0x05
     664:	18 01       	movw	r2, r16
     666:	85 01       	movw	r16, r10
     668:	b9 01       	movw	r22, r18
     66a:	88 27       	eor	r24, r24
     66c:	77 fd       	sbrc	r23, 7
     66e:	80 95       	com	r24
     670:	98 2f       	mov	r25, r24
     672:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     676:	4b 01       	movw	r8, r22
     678:	5c 01       	movw	r10, r24
     67a:	b3 01       	movw	r22, r6
     67c:	6e 0d       	add	r22, r14
     67e:	7f 1d       	adc	r23, r15
     680:	29 81       	ldd	r18, Y+1	; 0x01
     682:	3a 81       	ldd	r19, Y+2	; 0x02
     684:	62 1b       	sub	r22, r18
     686:	73 0b       	sbc	r23, r19
     688:	88 27       	eor	r24, r24
     68a:	77 fd       	sbrc	r23, 7
     68c:	80 95       	com	r24
     68e:	98 2f       	mov	r25, r24
     690:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     694:	2b 01       	movw	r4, r22
     696:	3c 01       	movw	r6, r24
     698:	b1 01       	movw	r22, r2
     69a:	8d 81       	ldd	r24, Y+5	; 0x05
     69c:	9e 81       	ldd	r25, Y+6	; 0x06
     69e:	68 1b       	sub	r22, r24
     6a0:	79 0b       	sbc	r23, r25
     6a2:	88 27       	eor	r24, r24
     6a4:	77 fd       	sbrc	r23, 7
     6a6:	80 95       	com	r24
     6a8:	98 2f       	mov	r25, r24
     6aa:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	c3 01       	movw	r24, r6
     6b4:	b2 01       	movw	r22, r4
     6b6:	0e 94 29 0b 	call	0x1652	; 0x1652 <__mulsf3>
     6ba:	2b 01       	movw	r4, r22
     6bc:	3c 01       	movw	r6, r24
     6be:	6b 81       	ldd	r22, Y+3	; 0x03
     6c0:	7c 81       	ldd	r23, Y+4	; 0x04
     6c2:	e9 81       	ldd	r30, Y+1	; 0x01
     6c4:	fa 81       	ldd	r31, Y+2	; 0x02
     6c6:	6e 1b       	sub	r22, r30
     6c8:	7f 0b       	sbc	r23, r31
     6ca:	88 27       	eor	r24, r24
     6cc:	77 fd       	sbrc	r23, 7
     6ce:	80 95       	com	r24
     6d0:	98 2f       	mov	r25, r24
     6d2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	c3 01       	movw	r24, r6
     6dc:	b2 01       	movw	r22, r4
     6de:	0e 94 02 0a 	call	0x1404	; 0x1404 <__divsf3>
     6e2:	9b 01       	movw	r18, r22
     6e4:	ac 01       	movw	r20, r24
     6e6:	c5 01       	movw	r24, r10
     6e8:	b4 01       	movw	r22, r8
     6ea:	0e 94 9e 09 	call	0x133c	; 0x133c <__addsf3>
     6ee:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__fixsfsi>
     6f2:	c1 01       	movw	r24, r2
     6f4:	80 1b       	sub	r24, r16
     6f6:	91 0b       	sbc	r25, r17
     6f8:	68 17       	cp	r22, r24
     6fa:	79 07       	cpc	r23, r25
     6fc:	74 f5       	brge	.+92     	; 0x75a <signal_to_range+0x132>
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	80 0f       	add	r24, r16
     704:	91 1f       	adc	r25, r17
     706:	86 17       	cp	r24, r22
     708:	97 07       	cpc	r25, r23
     70a:	4c f5       	brge	.+82     	; 0x75e <signal_to_range+0x136>
     70c:	f8 01       	movw	r30, r16
     70e:	11 23       	and	r17, r17
     710:	0c f4       	brge	.+2      	; 0x714 <signal_to_range+0xec>
     712:	31 96       	adiw	r30, 0x01	; 1
     714:	f5 95       	asr	r31
     716:	e7 95       	ror	r30
     718:	d8 01       	movw	r26, r16
     71a:	12 c0       	rjmp	.+36     	; 0x740 <signal_to_range+0x118>
     71c:	8a 0f       	add	r24, r26
     71e:	9b 1f       	adc	r25, r27
     720:	ac 01       	movw	r20, r24
     722:	4e 0f       	add	r20, r30
     724:	5f 1f       	adc	r21, r31
     726:	64 17       	cp	r22, r20
     728:	75 07       	cpc	r23, r21
     72a:	14 f0       	brlt	.+4      	; 0x730 <signal_to_range+0x108>
     72c:	69 01       	movw	r12, r18
     72e:	0b c0       	rjmp	.+22     	; 0x746 <signal_to_range+0x11e>
     730:	c6 01       	movw	r24, r12
     732:	8e 1b       	sub	r24, r30
     734:	9f 0b       	sbc	r25, r31
     736:	86 17       	cp	r24, r22
     738:	97 07       	cpc	r25, r23
     73a:	14 f0       	brlt	.+4      	; 0x740 <signal_to_range+0x118>
     73c:	c0 1a       	sub	r12, r16
     73e:	d1 0a       	sbc	r13, r17
     740:	c6 01       	movw	r24, r12
     742:	80 1b       	sub	r24, r16
     744:	91 0b       	sbc	r25, r17
     746:	96 01       	movw	r18, r12
     748:	20 0f       	add	r18, r16
     74a:	31 1f       	adc	r19, r17
     74c:	62 17       	cp	r22, r18
     74e:	73 07       	cpc	r23, r19
     750:	2c f7       	brge	.-54     	; 0x71c <signal_to_range+0xf4>
     752:	86 17       	cp	r24, r22
     754:	97 07       	cpc	r25, r23
     756:	14 f7       	brge	.-60     	; 0x71c <signal_to_range+0xf4>
     758:	04 c0       	rjmp	.+8      	; 0x762 <signal_to_range+0x13a>
     75a:	61 01       	movw	r12, r2
     75c:	02 c0       	rjmp	.+4      	; 0x762 <signal_to_range+0x13a>
     75e:	cd 80       	ldd	r12, Y+5	; 0x05
     760:	de 80       	ldd	r13, Y+6	; 0x06
     762:	c6 01       	movw	r24, r12
     764:	26 96       	adiw	r28, 0x06	; 6
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	bf 90       	pop	r11
     782:	af 90       	pop	r10
     784:	9f 90       	pop	r9
     786:	8f 90       	pop	r8
     788:	7f 90       	pop	r7
     78a:	6f 90       	pop	r6
     78c:	5f 90       	pop	r5
     78e:	4f 90       	pop	r4
     790:	3f 90       	pop	r3
     792:	2f 90       	pop	r2
     794:	08 95       	ret

00000796 <read_control_input>:
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	82 35       	cpi	r24, 0x52	; 82
     7a8:	09 f4       	brne	.+2      	; 0x7ac <read_control_input+0x16>
     7aa:	74 c0       	rjmp	.+232    	; 0x894 <read_control_input+0xfe>
     7ac:	20 f4       	brcc	.+8      	; 0x7b6 <read_control_input+0x20>
     7ae:	8c 34       	cpi	r24, 0x4C	; 76
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <read_control_input+0x1e>
     7b2:	4e c0       	rjmp	.+156    	; 0x850 <read_control_input+0xba>
     7b4:	91 c0       	rjmp	.+290    	; 0x8d8 <read_control_input+0x142>
     7b6:	88 35       	cpi	r24, 0x58	; 88
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <read_control_input+0x2a>
     7ba:	89 35       	cpi	r24, 0x59	; 89
     7bc:	29 f1       	breq	.+74     	; 0x808 <read_control_input+0x72>
     7be:	8c c0       	rjmp	.+280    	; 0x8d8 <read_control_input+0x142>
     7c0:	c0 90 d8 03 	lds	r12, 0x03D8
     7c4:	d0 90 d9 03 	lds	r13, 0x03D9
     7c8:	e0 90 dc 03 	lds	r14, 0x03DC
     7cc:	f0 90 dd 03 	lds	r15, 0x03DD
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     7d8:	0f 2e       	mov	r0, r31
     7da:	fa e0       	ldi	r31, 0x0A	; 10
     7dc:	af 2e       	mov	r10, r31
     7de:	b1 2c       	mov	r11, r1
     7e0:	f0 2d       	mov	r31, r0
     7e2:	04 e6       	ldi	r16, 0x64	; 100
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	2c e9       	ldi	r18, 0x9C	; 156
     7e8:	3f ef       	ldi	r19, 0xFF	; 255
     7ea:	4f ef       	ldi	r20, 0xFF	; 255
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 14 03 	call	0x628	; 0x628 <signal_to_range>
     7f6:	90 93 d9 03 	sts	0x03D9, r25
     7fa:	80 93 d8 03 	sts	0x03D8, r24
     7fe:	80 91 d8 03 	lds	r24, 0x03D8
     802:	90 91 d9 03 	lds	r25, 0x03D9
     806:	6a c0       	rjmp	.+212    	; 0x8dc <read_control_input+0x146>
     808:	c0 90 d6 03 	lds	r12, 0x03D6
     80c:	d0 90 d7 03 	lds	r13, 0x03D7
     810:	e0 90 da 03 	lds	r14, 0x03DA
     814:	f0 90 db 03 	lds	r15, 0x03DB
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     820:	0f 2e       	mov	r0, r31
     822:	fa e0       	ldi	r31, 0x0A	; 10
     824:	af 2e       	mov	r10, r31
     826:	b1 2c       	mov	r11, r1
     828:	f0 2d       	mov	r31, r0
     82a:	04 e6       	ldi	r16, 0x64	; 100
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	2c e9       	ldi	r18, 0x9C	; 156
     830:	3f ef       	ldi	r19, 0xFF	; 255
     832:	4f ef       	ldi	r20, 0xFF	; 255
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	0e 94 14 03 	call	0x628	; 0x628 <signal_to_range>
     83e:	90 93 d7 03 	sts	0x03D7, r25
     842:	80 93 d6 03 	sts	0x03D6, r24
     846:	80 91 d6 03 	lds	r24, 0x03D6
     84a:	90 91 d7 03 	lds	r25, 0x03D7
     84e:	46 c0       	rjmp	.+140    	; 0x8dc <read_control_input+0x146>
     850:	c0 90 d4 03 	lds	r12, 0x03D4
     854:	d0 90 d5 03 	lds	r13, 0x03D5
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     860:	0f 2e       	mov	r0, r31
     862:	fa e0       	ldi	r31, 0x0A	; 10
     864:	af 2e       	mov	r10, r31
     866:	b1 2c       	mov	r11, r1
     868:	f0 2d       	mov	r31, r0
     86a:	e1 2c       	mov	r14, r1
     86c:	f1 2c       	mov	r15, r1
     86e:	04 e6       	ldi	r16, 0x64	; 100
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	4f ef       	ldi	r20, 0xFF	; 255
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	0e 94 14 03 	call	0x628	; 0x628 <signal_to_range>
     882:	90 93 d5 03 	sts	0x03D5, r25
     886:	80 93 d4 03 	sts	0x03D4, r24
     88a:	80 91 d4 03 	lds	r24, 0x03D4
     88e:	90 91 d5 03 	lds	r25, 0x03D5
     892:	24 c0       	rjmp	.+72     	; 0x8dc <read_control_input+0x146>
     894:	c0 90 d2 03 	lds	r12, 0x03D2
     898:	d0 90 d3 03 	lds	r13, 0x03D3
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     8a4:	0f 2e       	mov	r0, r31
     8a6:	fa e0       	ldi	r31, 0x0A	; 10
     8a8:	af 2e       	mov	r10, r31
     8aa:	b1 2c       	mov	r11, r1
     8ac:	f0 2d       	mov	r31, r0
     8ae:	e1 2c       	mov	r14, r1
     8b0:	f1 2c       	mov	r15, r1
     8b2:	04 e6       	ldi	r16, 0x64	; 100
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	4f ef       	ldi	r20, 0xFF	; 255
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	0e 94 14 03 	call	0x628	; 0x628 <signal_to_range>
     8c6:	90 93 d3 03 	sts	0x03D3, r25
     8ca:	80 93 d2 03 	sts	0x03D2, r24
     8ce:	80 91 d2 03 	lds	r24, 0x03D2
     8d2:	90 91 d3 03 	lds	r25, 0x03D3
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <read_control_input+0x146>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	08 95       	ret

000008ee <initialize_control_input>:
     8ee:	0e 94 ce 02 	call	0x59c	; 0x59c <calibrate_joystick>
     8f2:	88 e5       	ldi	r24, 0x58	; 88
     8f4:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     8f8:	90 93 d9 03 	sts	0x03D9, r25
     8fc:	80 93 d8 03 	sts	0x03D8, r24
     900:	89 e5       	ldi	r24, 0x59	; 89
     902:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     906:	90 93 d7 03 	sts	0x03D7, r25
     90a:	80 93 d6 03 	sts	0x03D6, r24
     90e:	8c e4       	ldi	r24, 0x4C	; 76
     910:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     914:	90 93 d5 03 	sts	0x03D5, r25
     918:	80 93 d4 03 	sts	0x03D4, r24
     91c:	82 e5       	ldi	r24, 0x52	; 82
     91e:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     922:	90 93 d3 03 	sts	0x03D3, r25
     926:	80 93 d2 03 	sts	0x03D2, r24
     92a:	20 91 da 03 	lds	r18, 0x03DA
     92e:	30 91 db 03 	lds	r19, 0x03DB
     932:	80 91 dc 03 	lds	r24, 0x03DC
     936:	90 91 dd 03 	lds	r25, 0x03DD
     93a:	3f 93       	push	r19
     93c:	2f 93       	push	r18
     93e:	9f 93       	push	r25
     940:	8f 93       	push	r24
     942:	86 e6       	ldi	r24, 0x66	; 102
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
     94e:	60 91 d2 03 	lds	r22, 0x03D2
     952:	70 91 d3 03 	lds	r23, 0x03D3
     956:	40 91 d4 03 	lds	r20, 0x03D4
     95a:	50 91 d5 03 	lds	r21, 0x03D5
     95e:	20 91 d6 03 	lds	r18, 0x03D6
     962:	30 91 d7 03 	lds	r19, 0x03D7
     966:	80 91 d8 03 	lds	r24, 0x03D8
     96a:	90 91 d9 03 	lds	r25, 0x03D9
     96e:	7f 93       	push	r23
     970:	6f 93       	push	r22
     972:	5f 93       	push	r21
     974:	4f 93       	push	r20
     976:	3f 93       	push	r19
     978:	2f 93       	push	r18
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	8f e8       	ldi	r24, 0x8F	; 143
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
     98a:	8d b7       	in	r24, 0x3d	; 61
     98c:	9e b7       	in	r25, 0x3e	; 62
     98e:	40 96       	adiw	r24, 0x10	; 16
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	9e bf       	out	0x3e, r25	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	8d bf       	out	0x3d, r24	; 61
     99a:	08 95       	ret

0000099c <SRAM_test>:
	sei();//enable interrupts
}

#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     9ac:	88 eb       	ldi	r24, 0xB8	; 184
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9b4:	0e 94 02 0c 	call	0x1804	; 0x1804 <rand>
     9b8:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9ba:	0e 94 07 0c 	call	0x180e	; 0x180e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9be:	c0 e0       	ldi	r28, 0x00	; 0
     9c0:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9c2:	00 e0       	ldi	r16, 0x00	; 0
     9c4:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fe ec       	ldi	r31, 0xCE	; 206
     9ca:	ef 2e       	mov	r14, r31
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	ff 2e       	mov	r15, r31
     9d0:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9d2:	0e 94 02 0c 	call	0x1804	; 0x1804 <rand>
     9d6:	fe 01       	movw	r30, r28
     9d8:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9da:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9dc:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9de:	28 17       	cp	r18, r24
     9e0:	a9 f0       	breq	.+42     	; 0xa0c <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9e2:	99 27       	eor	r25, r25
     9e4:	9f 93       	push	r25
     9e6:	8f 93       	push	r24
     9e8:	1f 92       	push	r1
     9ea:	2f 93       	push	r18
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	ff 92       	push	r15
     9f2:	ef 92       	push	r14
     9f4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
			write_errors++;
     9f8:	0f 5f       	subi	r16, 0xFF	; 255
     9fa:	1f 4f       	sbci	r17, 0xFF	; 255
     9fc:	8d b7       	in	r24, 0x3d	; 61
     9fe:	9e b7       	in	r25, 0x3e	; 62
     a00:	08 96       	adiw	r24, 0x08	; 8
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	9e bf       	out	0x3e, r25	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a0c:	21 96       	adiw	r28, 0x01	; 1
     a0e:	c1 15       	cp	r28, r1
     a10:	98 e0       	ldi	r25, 0x08	; 8
     a12:	d9 07       	cpc	r29, r25
     a14:	f1 f6       	brne	.-68     	; 0x9d2 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     a16:	c6 01       	movw	r24, r12
     a18:	0e 94 07 0c 	call	0x180e	; 0x180e <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a1c:	c0 e0       	ldi	r28, 0x00	; 0
     a1e:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a20:	e1 2c       	mov	r14, r1
     a22:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a24:	0f 2e       	mov	r0, r31
     a26:	f7 e0       	ldi	r31, 0x07	; 7
     a28:	cf 2e       	mov	r12, r31
     a2a:	f2 e0       	ldi	r31, 0x02	; 2
     a2c:	df 2e       	mov	r13, r31
     a2e:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a30:	0e 94 02 0c 	call	0x1804	; 0x1804 <rand>
     a34:	fe 01       	movw	r30, r28
     a36:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a38:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a3a:	28 17       	cp	r18, r24
     a3c:	b1 f0       	breq	.+44     	; 0xa6a <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a3e:	99 27       	eor	r25, r25
     a40:	9f 93       	push	r25
     a42:	8f 93       	push	r24
     a44:	1f 92       	push	r1
     a46:	2f 93       	push	r18
     a48:	df 93       	push	r29
     a4a:	cf 93       	push	r28
     a4c:	df 92       	push	r13
     a4e:	cf 92       	push	r12
     a50:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
			retrieval_errors++;
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	e8 1a       	sub	r14, r24
     a58:	f8 0a       	sbc	r15, r24
     a5a:	8d b7       	in	r24, 0x3d	; 61
     a5c:	9e b7       	in	r25, 0x3e	; 62
     a5e:	08 96       	adiw	r24, 0x08	; 8
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	9e bf       	out	0x3e, r25	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a6a:	21 96       	adiw	r28, 0x01	; 1
     a6c:	c1 15       	cp	r28, r1
     a6e:	98 e0       	ldi	r25, 0x08	; 8
     a70:	d9 07       	cpc	r29, r25
     a72:	f1 f6       	brne	.-68     	; 0xa30 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     a74:	ff 92       	push	r15
     a76:	ef 92       	push	r14
     a78:	1f 93       	push	r17
     a7a:	0f 93       	push	r16
     a7c:	84 e4       	ldi	r24, 0x44	; 68
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	08 95       	ret

00000aa6 <initalize>:




void initalize(void){
	cli();//disable interrupts
     aa6:	f8 94       	cli
	init_UART(UBBR);
     aa8:	8f e1       	ldi	r24, 0x1F	; 31
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 92 09 	call	0x1324	; 0x1324 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     ab0:	8b e9       	ldi	r24, 0x9B	; 155
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	84 ea       	ldi	r24, 0xA4	; 164
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	80 eb       	ldi	r24, 0xB0	; 176
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	85 eb       	ldi	r24, 0xB5	; 181
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     ad4:	85 b7       	in	r24, 0x35	; 53
     ad6:	80 68       	ori	r24, 0x80	; 128
     ad8:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     ada:	80 b7       	in	r24, 0x30	; 48
     adc:	80 62       	ori	r24, 0x20	; 32
     ade:	80 bf       	out	0x30, r24	; 48
	
	oled_ini();
     ae0:	0e 94 b9 07 	call	0xf72	; 0xf72 <oled_ini>
	sram_init();
     ae4:	0e 94 ae 08 	call	0x115c	; 0x115c <sram_init>
	sram_write_string("BOOTING\nSCREEN");
     ae8:	8b ef       	ldi	r24, 0xFB	; 251
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	0e 94 a3 08 	call	0x1146	; 0x1146 <sram_write_string>
	write_screen();
     af0:	0e 94 ce 08 	call	0x119c	; 0x119c <write_screen>
	
	
	printf("OLED successfully initialized\n");
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	initialize_menu();
     afc:	0e 94 bc 05 	call	0xb78	; 0xb78 <initialize_menu>
	
	initialize_control_input();
     b00:	0e 94 77 04 	call	0x8ee	; 0x8ee <initialize_control_input>
	printf("control input successfully initialized\n\n");
     b04:	88 e2       	ldi	r24, 0x28	; 40
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	SRAM_test();
     b0c:	0e 94 ce 04 	call	0x99c	; 0x99c <SRAM_test>
	printf("SRAM successfully initialized\n");
     b10:	80 e5       	ldi	r24, 0x50	; 80
     b12:	93 e0       	ldi	r25, 0x03	; 3
     b14:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	initalize_interrupts();
     b18:	0e 94 37 02 	call	0x46e	; 0x46e <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     b1c:	8e e6       	ldi	r24, 0x6E	; 110
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	printf("Interrupts activated\n");
     b24:	82 e9       	ldi	r24, 0x92	; 146
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     b2c:	87 ea       	ldi	r24, 0xA7	; 167
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <puts>
	sei();//enable interrupts
     b34:	78 94       	sei
     b36:	8d b7       	in	r24, 0x3d	; 61
     b38:	9e b7       	in	r25, 0x3e	; 62
     b3a:	08 96       	adiw	r24, 0x08	; 8
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	9e bf       	out	0x3e, r25	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	8d bf       	out	0x3d, r24	; 61
     b46:	08 95       	ret

00000b48 <main>:
#include "menu.h"

int main(void)
{
	
	initalize();
     b48:	0e 94 53 05 	call	0xaa6	; 0xaa6 <initalize>
	
	sram_init();
     b4c:	0e 94 ae 08 	call	0x115c	; 0x115c <sram_init>
	oled_goto_line(7);
     b50:	87 e0       	ldi	r24, 0x07	; 7
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 6e 07 	call	0xedc	; 0xedc <oled_goto_line>
	sram_write_string("          <---<<");//loading animation
     b58:	80 ec       	ldi	r24, 0xC0	; 192
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	0e 94 a3 08 	call	0x1146	; 0x1146 <sram_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	8f e7       	ldi	r24, 0x7F	; 127
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	80 40       	sbci	r24, 0x00	; 0
     b6a:	90 40       	sbci	r25, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <main+0x1e>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <main+0x28>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <main+0x2a>
	
	while(1){
		_delay_ms(100);
		menu_update();
     b72:	0e 94 d3 06 	call	0xda6	; 0xda6 <menu_update>
     b76:	f4 cf       	rjmp	.-24     	; 0xb60 <main+0x18>

00000b78 <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b7c:	cf e2       	ldi	r28, 0x2F	; 47
     b7e:	d4 e0       	ldi	r29, 0x04	; 4
     b80:	d0 93 16 04 	sts	0x0416, r29
     b84:	c0 93 15 04 	sts	0x0415, r28
	new_menu->ptr_child = ptr_child;
     b88:	10 92 18 04 	sts	0x0418, r1
     b8c:	10 92 17 04 	sts	0x0417, r1
	new_menu->ptr_parent = ptr_parent;
     b90:	10 92 1a 04 	sts	0x041A, r1
     b94:	10 92 19 04 	sts	0x0419, r1
	
	new_menu->title = title;
     b98:	e1 e1       	ldi	r30, 0x11	; 17
     b9a:	f4 e0       	ldi	r31, 0x04	; 4
     b9c:	88 eb       	ldi	r24, 0xB8	; 184
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	90 93 14 04 	sts	0x0414, r25
     bac:	80 93 13 04 	sts	0x0413, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     bb0:	27 ee       	ldi	r18, 0xE7	; 231
     bb2:	33 e0       	ldi	r19, 0x03	; 3
     bb4:	30 93 34 04 	sts	0x0434, r19
     bb8:	20 93 33 04 	sts	0x0433, r18
	new_menu->ptr_child = ptr_child;
     bbc:	6b e1       	ldi	r22, 0x1B	; 27
     bbe:	74 e0       	ldi	r23, 0x04	; 4
     bc0:	70 93 36 04 	sts	0x0436, r23
     bc4:	60 93 35 04 	sts	0x0435, r22
	new_menu->ptr_parent = ptr_parent;
     bc8:	10 92 38 04 	sts	0x0438, r1
     bcc:	10 92 37 04 	sts	0x0437, r1
	
	new_menu->title = title;
     bd0:	4c ea       	ldi	r20, 0xAC	; 172
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	59 83       	std	Y+1, r21	; 0x01
     bd6:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     bd8:	90 93 32 04 	sts	0x0432, r25
     bdc:	80 93 31 04 	sts	0x0431, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     be0:	f0 93 ec 03 	sts	0x03EC, r31
     be4:	e0 93 eb 03 	sts	0x03EB, r30
	new_menu->ptr_child = ptr_child;
     be8:	cd ef       	ldi	r28, 0xFD	; 253
     bea:	d3 e0       	ldi	r29, 0x03	; 3
     bec:	d0 93 ee 03 	sts	0x03EE, r29
     bf0:	c0 93 ed 03 	sts	0x03ED, r28
	new_menu->ptr_parent = ptr_parent;
     bf4:	10 92 f0 03 	sts	0x03F0, r1
     bf8:	10 92 ef 03 	sts	0x03EF, r1
	
	new_menu->title = title;
     bfc:	40 ea       	ldi	r20, 0xA0	; 160
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	d9 01       	movw	r26, r18
     c02:	4d 93       	st	X+, r20
     c04:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     c06:	90 93 ea 03 	sts	0x03EA, r25
     c0a:	80 93 e9 03 	sts	0x03E9, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c0e:	27 e0       	ldi	r18, 0x07	; 7
     c10:	34 e0       	ldi	r19, 0x04	; 4
     c12:	30 93 02 04 	sts	0x0402, r19
     c16:	20 93 01 04 	sts	0x0401, r18
	new_menu->ptr_child = ptr_child;
     c1a:	10 92 04 04 	sts	0x0404, r1
     c1e:	10 92 03 04 	sts	0x0403, r1
	new_menu->ptr_parent = ptr_parent;
     c22:	f0 93 06 04 	sts	0x0406, r31
     c26:	e0 93 05 04 	sts	0x0405, r30
	
	new_menu->title = title;
     c2a:	84 e9       	ldi	r24, 0x94	; 148
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	99 83       	std	Y+1, r25	; 0x01
     c30:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	90 93 00 04 	sts	0x0400, r25
     c3a:	80 93 ff 03 	sts	0x03FF, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c3e:	d0 93 0c 04 	sts	0x040C, r29
     c42:	c0 93 0b 04 	sts	0x040B, r28
	new_menu->ptr_child = ptr_child;
     c46:	10 92 0e 04 	sts	0x040E, r1
     c4a:	10 92 0d 04 	sts	0x040D, r1
	new_menu->ptr_parent = ptr_parent;
     c4e:	f0 93 10 04 	sts	0x0410, r31
     c52:	e0 93 0f 04 	sts	0x040F, r30
	
	new_menu->title = title;
     c56:	48 e8       	ldi	r20, 0x88	; 136
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	d9 01       	movw	r26, r18
     c5c:	4d 93       	st	X+, r20
     c5e:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     c60:	90 93 0a 04 	sts	0x040A, r25
     c64:	80 93 09 04 	sts	0x0409, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c68:	c5 e2       	ldi	r28, 0x25	; 37
     c6a:	d4 e0       	ldi	r29, 0x04	; 4
     c6c:	d0 93 20 04 	sts	0x0420, r29
     c70:	c0 93 1f 04 	sts	0x041F, r28
	new_menu->ptr_child = ptr_child;
     c74:	10 92 22 04 	sts	0x0422, r1
     c78:	10 92 21 04 	sts	0x0421, r1
	new_menu->ptr_parent = ptr_parent;
     c7c:	f0 93 24 04 	sts	0x0424, r31
     c80:	e0 93 23 04 	sts	0x0423, r30
	
	new_menu->title = title;
     c84:	2c e7       	ldi	r18, 0x7C	; 124
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	db 01       	movw	r26, r22
     c8a:	2d 93       	st	X+, r18
     c8c:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     c8e:	90 93 1e 04 	sts	0x041E, r25
     c92:	80 93 1d 04 	sts	0x041D, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c96:	70 93 2a 04 	sts	0x042A, r23
     c9a:	60 93 29 04 	sts	0x0429, r22
	new_menu->ptr_child = ptr_child;
     c9e:	10 92 2c 04 	sts	0x042C, r1
     ca2:	10 92 2b 04 	sts	0x042B, r1
	new_menu->ptr_parent = ptr_parent;
     ca6:	f0 93 2e 04 	sts	0x042E, r31
     caa:	e0 93 2d 04 	sts	0x042D, r30
	
	new_menu->title = title;
     cae:	20 e7       	ldi	r18, 0x70	; 112
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	39 83       	std	Y+1, r19	; 0x01
     cb4:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     cb6:	90 93 28 04 	sts	0x0428, r25
     cba:	80 93 27 04 	sts	0x0427, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     cbe:	f0 93 e4 03 	sts	0x03E4, r31
     cc2:	e0 93 e3 03 	sts	0x03E3, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     cc6:	f0 93 e6 03 	sts	0x03E6, r31
     cca:	e0 93 e5 03 	sts	0x03E5, r30
	
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <navigate_menu>:
	write_screen();
}



int navigate_menu(void){
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
	int joystick_reading_x = read_control_input('X');
     cd8:	88 e5       	ldi	r24, 0x58	; 88
     cda:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
     cde:	ec 01       	movw	r28, r24
	int joystick_reading_y = read_control_input('Y');
     ce0:	89 e5       	ldi	r24, 0x59	; 89
     ce2:	0e 94 cb 03 	call	0x796	; 0x796 <read_control_input>
	
	if(joystick_reading_y > NAVIGATION_TRHESHOLD){
     ce6:	87 34       	cpi	r24, 0x47	; 71
     ce8:	91 05       	cpc	r25, r1
     cea:	ec f0       	brlt	.+58     	; 0xd26 <navigate_menu+0x52>
		for(int i = 0; i < current_selected->n_sib-1; i++){
     cec:	e0 91 e5 03 	lds	r30, 0x03E5
     cf0:	f0 91 e6 03 	lds	r31, 0x03E6
     cf4:	82 81       	ldd	r24, Z+2	; 0x02
     cf6:	93 81       	ldd	r25, Z+3	; 0x03
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	18 16       	cp	r1, r24
     cfc:	19 06       	cpc	r1, r25
     cfe:	0c f0       	brlt	.+2      	; 0xd02 <navigate_menu+0x2e>
     d00:	4d c0       	rjmp	.+154    	; 0xd9c <navigate_menu+0xc8>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
     d06:	04 80       	ldd	r0, Z+4	; 0x04
     d08:	f5 81       	ldd	r31, Z+5	; 0x05
     d0a:	e0 2d       	mov	r30, r0
int navigate_menu(void){
	int joystick_reading_x = read_control_input('X');
	int joystick_reading_y = read_control_input('Y');
	
	if(joystick_reading_y > NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	22 81       	ldd	r18, Z+2	; 0x02
     d10:	33 81       	ldd	r19, Z+3	; 0x03
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	31 09       	sbc	r19, r1
     d16:	82 17       	cp	r24, r18
     d18:	93 07       	cpc	r25, r19
     d1a:	ac f3       	brlt	.-22     	; 0xd06 <navigate_menu+0x32>
     d1c:	f0 93 e6 03 	sts	0x03E6, r31
     d20:	e0 93 e5 03 	sts	0x03E5, r30
     d24:	3b c0       	rjmp	.+118    	; 0xd9c <navigate_menu+0xc8>
			current_selected = current_selected->ptr_sib_down;
		}
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
     d26:	8a 3b       	cpi	r24, 0xBA	; 186
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	5c f4       	brge	.+22     	; 0xd42 <navigate_menu+0x6e>
		current_selected = current_selected->ptr_sib_down;
     d2c:	e0 91 e5 03 	lds	r30, 0x03E5
     d30:	f0 91 e6 03 	lds	r31, 0x03E6
     d34:	84 81       	ldd	r24, Z+4	; 0x04
     d36:	95 81       	ldd	r25, Z+5	; 0x05
     d38:	90 93 e6 03 	sts	0x03E6, r25
     d3c:	80 93 e5 03 	sts	0x03E5, r24
     d40:	2d c0       	rjmp	.+90     	; 0xd9c <navigate_menu+0xc8>
	}
	else if(joystick_reading_x > NAVIGATION_TRHESHOLD && current_selected->ptr_child != NULL){;
     d42:	c7 34       	cpi	r28, 0x47	; 71
     d44:	d1 05       	cpc	r29, r1
     d46:	8c f0       	brlt	.+34     	; 0xd6a <navigate_menu+0x96>
     d48:	e0 91 e5 03 	lds	r30, 0x03E5
     d4c:	f0 91 e6 03 	lds	r31, 0x03E6
     d50:	86 81       	ldd	r24, Z+6	; 0x06
     d52:	97 81       	ldd	r25, Z+7	; 0x07
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	49 f0       	breq	.+18     	; 0xd6a <navigate_menu+0x96>
		current_head = current_selected->ptr_child;
     d58:	90 93 e4 03 	sts	0x03E4, r25
     d5c:	80 93 e3 03 	sts	0x03E3, r24
		current_selected = current_selected->ptr_child;
     d60:	90 93 e6 03 	sts	0x03E6, r25
     d64:	80 93 e5 03 	sts	0x03E5, r24
     d68:	19 c0       	rjmp	.+50     	; 0xd9c <navigate_menu+0xc8>
		//USE FUNCTIONS HERE
	}
	else if (joystick_reading_x < -NAVIGATION_TRHESHOLD && current_selected->ptr_parent != NULL){
     d6a:	ca 3b       	cpi	r28, 0xBA	; 186
     d6c:	df 4f       	sbci	r29, 0xFF	; 255
     d6e:	b4 f4       	brge	.+44     	; 0xd9c <navigate_menu+0xc8>
     d70:	e0 91 e5 03 	lds	r30, 0x03E5
     d74:	f0 91 e6 03 	lds	r31, 0x03E6
     d78:	80 85       	ldd	r24, Z+8	; 0x08
     d7a:	91 85       	ldd	r25, Z+9	; 0x09
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	71 f0       	breq	.+28     	; 0xd9c <navigate_menu+0xc8>
		current_head = current_head->ptr_parent;
     d80:	e0 91 e3 03 	lds	r30, 0x03E3
     d84:	f0 91 e4 03 	lds	r31, 0x03E4
     d88:	20 85       	ldd	r18, Z+8	; 0x08
     d8a:	31 85       	ldd	r19, Z+9	; 0x09
     d8c:	30 93 e4 03 	sts	0x03E4, r19
     d90:	20 93 e3 03 	sts	0x03E3, r18
		current_selected = current_selected->ptr_parent;
     d94:	90 93 e6 03 	sts	0x03E6, r25
     d98:	80 93 e5 03 	sts	0x03E5, r24
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
		x_lock = 0;
	}
	*/
	return 0;
}
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <menu_update>:
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
	
}

void menu_update(void){
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
	if(navigate_menu()){
     dae:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <navigate_menu>
     db2:	89 2b       	or	r24, r25
     db4:	09 f4       	brne	.+2      	; 0xdb8 <menu_update+0x12>
     db6:	5c c0       	rjmp	.+184    	; 0xe70 <menu_update+0xca>
     db8:	c0 e0       	ldi	r28, 0x00	; 0
     dba:	d0 e0       	ldi	r29, 0x00	; 0
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 94 19 09 	call	0x1232	; 0x1232 <sram_clear_line>
	
}

void menu_update(void){
	if(navigate_menu()){
		for (int j = 0; j < 7; j++)
     dc2:	21 96       	adiw	r28, 0x01	; 1
     dc4:	c7 30       	cpi	r28, 0x07	; 7
     dc6:	d1 05       	cpc	r29, r1
     dc8:	c9 f7       	brne	.-14     	; 0xdbc <menu_update+0x16>
		{
			sram_clear_line(j);
		}
		sram_clear_line(0);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 19 09 	call	0x1232	; 0x1232 <sram_clear_line>
		sram_clear_line(1);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 19 09 	call	0x1232	; 0x1232 <sram_clear_line>
		sram_clear_line(2);
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 19 09 	call	0x1232	; 0x1232 <sram_clear_line>
		sram_clear_line(3);
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 19 09 	call	0x1232	; 0x1232 <sram_clear_line>
		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
     dea:	e0 91 e3 03 	lds	r30, 0x03E3
     dee:	f0 91 e4 03 	lds	r31, 0x03E4
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	18 16       	cp	r1, r24
     df8:	19 06       	cpc	r1, r25
     dfa:	d4 f5       	brge	.+116    	; 0xe70 <menu_update+0xca>
     dfc:	c0 e0       	ldi	r28, 0x00	; 0
     dfe:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
     e00:	10 e8       	ldi	r17, 0x80	; 128
     e02:	01 e8       	ldi	r16, 0x81	; 129
		sram_clear_line(3);
		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
     e04:	ce 01       	movw	r24, r28
     e06:	0e 94 6e 07 	call	0xedc	; 0xedc <oled_goto_line>
			oled_goto_column(0);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 90 07 	call	0xf20	; 0xf20 <oled_goto_column>
			strcpy_P(temp,current_head->title);
     e12:	e0 91 e3 03 	lds	r30, 0x03E3
     e16:	f0 91 e4 03 	lds	r31, 0x03E4
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	81 ef       	ldi	r24, 0xF1	; 241
     e20:	93 e0       	ldi	r25, 0x03	; 3
     e22:	0e 94 12 0c 	call	0x1824	; 0x1824 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
     e26:	20 91 e3 03 	lds	r18, 0x03E3
     e2a:	30 91 e4 03 	lds	r19, 0x03E4
     e2e:	80 91 e5 03 	lds	r24, 0x03E5
     e32:	90 91 e6 03 	lds	r25, 0x03E6
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	11 f4       	brne	.+4      	; 0xe40 <menu_update+0x9a>
     e3c:	80 2f       	mov	r24, r16
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <menu_update+0x9c>
     e40:	81 2f       	mov	r24, r17
     e42:	0e 94 46 08 	call	0x108c	; 0x108c <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
     e46:	81 ef       	ldi	r24, 0xF1	; 241
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	0e 94 a3 08 	call	0x1146	; 0x1146 <sram_write_string>
			current_head = current_head->ptr_sib_down;
     e4e:	e0 91 e3 03 	lds	r30, 0x03E3
     e52:	f0 91 e4 03 	lds	r31, 0x03E4
     e56:	04 80       	ldd	r0, Z+4	; 0x04
     e58:	f5 81       	ldd	r31, Z+5	; 0x05
     e5a:	e0 2d       	mov	r30, r0
     e5c:	f0 93 e4 03 	sts	0x03E4, r31
     e60:	e0 93 e3 03 	sts	0x03E3, r30
		sram_clear_line(1);
		sram_clear_line(2);
		sram_clear_line(3);
		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
     e64:	21 96       	adiw	r28, 0x01	; 1
     e66:	82 81       	ldd	r24, Z+2	; 0x02
     e68:	93 81       	ldd	r25, Z+3	; 0x03
     e6a:	c8 17       	cp	r28, r24
     e6c:	d9 07       	cpc	r29, r25
     e6e:	54 f2       	brlt	.-108    	; 0xe04 <menu_update+0x5e>
			sram_write_string(temp);
			current_head = current_head->ptr_sib_down;
		}
		
	}
	sram_scroll_data(7);
     e70:	87 e0       	ldi	r24, 0x07	; 7
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 49 09 	call	0x1292	; 0x1292 <sram_scroll_data>
	write_screen();
     e78:	0e 94 ce 08 	call	0x119c	; 0x119c <write_screen>
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <oled_home>:
	}
}

void oled_home(void)
{
	page_sram = 0;
     e86:	10 92 e2 03 	sts	0x03E2, r1
     e8a:	10 92 e1 03 	sts	0x03E1, r1
	col_sram = 0;
     e8e:	10 92 e0 03 	sts	0x03E0, r1
     e92:	10 92 df 03 	sts	0x03DF, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     e96:	e0 91 0e 01 	lds	r30, 0x010E
     e9a:	f0 91 0f 01 	lds	r31, 0x010F
     e9e:	81 e2       	ldi	r24, 0x21	; 33
     ea0:	80 83       	st	Z, r24
     ea2:	e0 91 0e 01 	lds	r30, 0x010E
     ea6:	f0 91 0f 01 	lds	r31, 0x010F
     eaa:	10 82       	st	Z, r1
     eac:	e0 91 0e 01 	lds	r30, 0x010E
     eb0:	f0 91 0f 01 	lds	r31, 0x010F
     eb4:	8f e7       	ldi	r24, 0x7F	; 127
     eb6:	80 83       	st	Z, r24
     eb8:	e0 91 0e 01 	lds	r30, 0x010E
     ebc:	f0 91 0f 01 	lds	r31, 0x010F
     ec0:	82 e2       	ldi	r24, 0x22	; 34
     ec2:	80 83       	st	Z, r24
     ec4:	e0 91 0e 01 	lds	r30, 0x010E
     ec8:	f0 91 0f 01 	lds	r31, 0x010F
     ecc:	10 82       	st	Z, r1
     ece:	e0 91 0e 01 	lds	r30, 0x010E
     ed2:	f0 91 0f 01 	lds	r31, 0x010F
     ed6:	87 e0       	ldi	r24, 0x07	; 7
     ed8:	80 83       	st	Z, r24
     eda:	08 95       	ret

00000edc <oled_goto_line>:
	//write_c(0x10);
}



void oled_goto_line(unsigned int line){
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
	oled_home();
     ee2:	0e 94 43 07 	call	0xe86	; 0xe86 <oled_home>
	page_sram = line;
     ee6:	d0 93 e2 03 	sts	0x03E2, r29
     eea:	c0 93 e1 03 	sts	0x03E1, r28
	if(line%8){
     eee:	ce 01       	movw	r24, r28
     ef0:	87 70       	andi	r24, 0x07	; 7
     ef2:	99 27       	eor	r25, r25
     ef4:	89 2b       	or	r24, r25
     ef6:	89 f0       	breq	.+34     	; 0xf1a <oled_goto_line+0x3e>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     ef8:	e0 91 0e 01 	lds	r30, 0x010E
     efc:	f0 91 0f 01 	lds	r31, 0x010F
     f00:	10 82       	st	Z, r1
     f02:	e0 91 0e 01 	lds	r30, 0x010E
     f06:	f0 91 0f 01 	lds	r31, 0x010F
     f0a:	80 e1       	ldi	r24, 0x10	; 16
     f0c:	80 83       	st	Z, r24
	oled_home();
	page_sram = line;
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
     f0e:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     f10:	e0 91 0e 01 	lds	r30, 0x010E
     f14:	f0 91 0f 01 	lds	r31, 0x010F
     f18:	c0 83       	st	Z, r28
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <oled_goto_column>:


void oled_goto_column(unsigned int column){
	col_sram = column%128;
     f20:	8f 77       	andi	r24, 0x7F	; 127
     f22:	99 27       	eor	r25, r25
     f24:	90 93 e0 03 	sts	0x03E0, r25
     f28:	80 93 df 03 	sts	0x03DF, r24
     f2c:	08 95       	ret

00000f2e <oled_clear_line>:
}

void oled_clear_line(unsigned int line){
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
	oled_goto_line(line);
     f34:	0e 94 6e 07 	call	0xedc	; 0xedc <oled_goto_line>
	if(line < 8){
     f38:	28 97       	sbiw	r28, 0x08	; 8
     f3a:	50 f4       	brcc	.+20     	; 0xf50 <oled_clear_line+0x22>
     f3c:	80 e8       	ldi	r24, 0x80	; 128
     f3e:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
     f40:	e0 91 0c 01 	lds	r30, 0x010C
     f44:	f0 91 0d 01 	lds	r31, 0x010D
     f48:	10 82       	st	Z, r1
     f4a:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	c1 f7       	brne	.-16     	; 0xf40 <oled_clear_line+0x12>
			write_d(0b00000000);
		}
	}
} 
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <oled_reset>:

}


void oled_reset(void)
{		
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
     f5a:	c0 e0       	ldi	r28, 0x00	; 0
     f5c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
     f5e:	ce 01       	movw	r24, r28
     f60:	0e 94 97 07 	call	0xf2e	; 0xf2e <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
     f64:	21 96       	adiw	r28, 0x01	; 1
     f66:	c8 30       	cpi	r28, 0x08	; 8
     f68:	d1 05       	cpc	r29, r1
     f6a:	c9 f7       	brne	.-14     	; 0xf5e <oled_reset+0x8>
		oled_clear_line(i);
	}
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
     f72:	85 b7       	in	r24, 0x35	; 53
     f74:	80 68       	ori	r24, 0x80	; 128
     f76:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     f78:	80 b7       	in	r24, 0x30	; 48
     f7a:	80 62       	ori	r24, 0x20	; 32
     f7c:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     f7e:	e0 91 0e 01 	lds	r30, 0x010E
     f82:	f0 91 0f 01 	lds	r31, 0x010F
     f86:	8e ea       	ldi	r24, 0xAE	; 174
     f88:	80 83       	st	Z, r24
     f8a:	e0 91 0e 01 	lds	r30, 0x010E
     f8e:	f0 91 0f 01 	lds	r31, 0x010F
     f92:	81 ea       	ldi	r24, 0xA1	; 161
     f94:	80 83       	st	Z, r24
     f96:	e0 91 0e 01 	lds	r30, 0x010E
     f9a:	f0 91 0f 01 	lds	r31, 0x010F
     f9e:	8a ed       	ldi	r24, 0xDA	; 218
     fa0:	80 83       	st	Z, r24
     fa2:	e0 91 0e 01 	lds	r30, 0x010E
     fa6:	f0 91 0f 01 	lds	r31, 0x010F
     faa:	82 e1       	ldi	r24, 0x12	; 18
     fac:	80 83       	st	Z, r24
     fae:	e0 91 0e 01 	lds	r30, 0x010E
     fb2:	f0 91 0f 01 	lds	r31, 0x010F
     fb6:	88 ec       	ldi	r24, 0xC8	; 200
     fb8:	80 83       	st	Z, r24
     fba:	e0 91 0e 01 	lds	r30, 0x010E
     fbe:	f0 91 0f 01 	lds	r31, 0x010F
     fc2:	88 ea       	ldi	r24, 0xA8	; 168
     fc4:	80 83       	st	Z, r24
     fc6:	e0 91 0e 01 	lds	r30, 0x010E
     fca:	f0 91 0f 01 	lds	r31, 0x010F
     fce:	8f e3       	ldi	r24, 0x3F	; 63
     fd0:	80 83       	st	Z, r24
     fd2:	e0 91 0e 01 	lds	r30, 0x010E
     fd6:	f0 91 0f 01 	lds	r31, 0x010F
     fda:	85 ed       	ldi	r24, 0xD5	; 213
     fdc:	80 83       	st	Z, r24
     fde:	e0 91 0e 01 	lds	r30, 0x010E
     fe2:	f0 91 0f 01 	lds	r31, 0x010F
     fe6:	80 e8       	ldi	r24, 0x80	; 128
     fe8:	80 83       	st	Z, r24
     fea:	e0 91 0e 01 	lds	r30, 0x010E
     fee:	f0 91 0f 01 	lds	r31, 0x010F
     ff2:	81 e8       	ldi	r24, 0x81	; 129
     ff4:	80 83       	st	Z, r24
     ff6:	e0 91 0e 01 	lds	r30, 0x010E
     ffa:	f0 91 0f 01 	lds	r31, 0x010F
     ffe:	80 e5       	ldi	r24, 0x50	; 80
    1000:	80 83       	st	Z, r24
    1002:	e0 91 0e 01 	lds	r30, 0x010E
    1006:	f0 91 0f 01 	lds	r31, 0x010F
    100a:	89 ed       	ldi	r24, 0xD9	; 217
    100c:	80 83       	st	Z, r24
    100e:	e0 91 0e 01 	lds	r30, 0x010E
    1012:	f0 91 0f 01 	lds	r31, 0x010F
    1016:	81 e2       	ldi	r24, 0x21	; 33
    1018:	80 83       	st	Z, r24
    101a:	e0 91 0e 01 	lds	r30, 0x010E
    101e:	f0 91 0f 01 	lds	r31, 0x010F
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	80 83       	st	Z, r24
    1026:	e0 91 0e 01 	lds	r30, 0x010E
    102a:	f0 91 0f 01 	lds	r31, 0x010F
    102e:	10 82       	st	Z, r1
    1030:	e0 91 0e 01 	lds	r30, 0x010E
    1034:	f0 91 0f 01 	lds	r31, 0x010F
    1038:	8b ed       	ldi	r24, 0xDB	; 219
    103a:	80 83       	st	Z, r24
    103c:	e0 91 0e 01 	lds	r30, 0x010E
    1040:	f0 91 0f 01 	lds	r31, 0x010F
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	80 83       	st	Z, r24
    1048:	e0 91 0e 01 	lds	r30, 0x010E
    104c:	f0 91 0f 01 	lds	r31, 0x010F
    1050:	8d ea       	ldi	r24, 0xAD	; 173
    1052:	80 83       	st	Z, r24
    1054:	e0 91 0e 01 	lds	r30, 0x010E
    1058:	f0 91 0f 01 	lds	r31, 0x010F
    105c:	10 82       	st	Z, r1
    105e:	e0 91 0e 01 	lds	r30, 0x010E
    1062:	f0 91 0f 01 	lds	r31, 0x010F
    1066:	84 ea       	ldi	r24, 0xA4	; 164
    1068:	80 83       	st	Z, r24
    106a:	e0 91 0e 01 	lds	r30, 0x010E
    106e:	f0 91 0f 01 	lds	r31, 0x010F
    1072:	86 ea       	ldi	r24, 0xA6	; 166
    1074:	80 83       	st	Z, r24
    1076:	e0 91 0e 01 	lds	r30, 0x010E
    107a:	f0 91 0f 01 	lds	r31, 0x010F
    107e:	8f ea       	ldi	r24, 0xAF	; 175
    1080:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
    1082:	0e 94 ab 07 	call	0xf56	; 0xf56 <oled_reset>
	oled_home();
    1086:	0e 94 43 07 	call	0xe86	; 0xe86 <oled_home>
    108a:	08 95       	ret

0000108c <sram_write_char>:
	}
}


int sram_write_char(char letter){
	if (letter == '\n'){
    108c:	8a 30       	cpi	r24, 0x0A	; 10
    108e:	91 f4       	brne	.+36     	; 0x10b4 <sram_write_char+0x28>
		page_sram = (page_sram+1)%8;
    1090:	80 91 e1 03 	lds	r24, 0x03E1
    1094:	90 91 e2 03 	lds	r25, 0x03E2
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	87 70       	andi	r24, 0x07	; 7
    109c:	99 27       	eor	r25, r25
    109e:	90 93 e2 03 	sts	0x03E2, r25
    10a2:	80 93 e1 03 	sts	0x03E1, r24
		col_sram = 0;
    10a6:	10 92 e0 03 	sts	0x03E0, r1
    10aa:	10 92 df 03 	sts	0x03DF, r1
		return 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	08 95       	ret
	}else if(letter != '\0'){
    10b4:	88 23       	and	r24, r24
    10b6:	09 f4       	brne	.+2      	; 0x10ba <sram_write_char+0x2e>
    10b8:	43 c0       	rjmp	.+134    	; 0x1140 <sram_write_char+0xb4>
    10ba:	e8 2f       	mov	r30, r24
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	ec 53       	subi	r30, 0x3C	; 60
    10cc:	f0 40       	sbci	r31, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
    10d2:	a0 91 e1 03 	lds	r26, 0x03E1
    10d6:	b0 91 e2 03 	lds	r27, 0x03E2
    10da:	b6 95       	lsr	r27
    10dc:	ba 2f       	mov	r27, r26
    10de:	aa 27       	eor	r26, r26
    10e0:	b7 95       	ror	r27
    10e2:	a7 95       	ror	r26
    10e4:	20 91 df 03 	lds	r18, 0x03DF
    10e8:	30 91 e0 03 	lds	r19, 0x03E0
    10ec:	a2 0f       	add	r26, r18
    10ee:	b3 1f       	adc	r27, r19
    10f0:	20 91 0a 01 	lds	r18, 0x010A
    10f4:	30 91 0b 01 	lds	r19, 0x010B
    10f8:	a2 0f       	add	r26, r18
    10fa:	b3 1f       	adc	r27, r19
    10fc:	24 91       	lpm	r18, Z
    10fe:	2c 93       	st	X, r18
			col_sram++;
    1100:	20 91 df 03 	lds	r18, 0x03DF
    1104:	30 91 e0 03 	lds	r19, 0x03E0
    1108:	2f 5f       	subi	r18, 0xFF	; 255
    110a:	3f 4f       	sbci	r19, 0xFF	; 255
    110c:	30 93 e0 03 	sts	0x03E0, r19
    1110:	20 93 df 03 	sts	0x03DF, r18
	if (letter == '\n'){
		page_sram = (page_sram+1)%8;
		col_sram = 0;
		return 1;
	}else if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	31 96       	adiw	r30, 0x01	; 1
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	91 05       	cpc	r25, r1
    111c:	d1 f6       	brne	.-76     	; 0x10d2 <sram_write_char+0x46>
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
			col_sram++;
		}
		edited |= (0b00000001 << page_sram);
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	00 90 e1 03 	lds	r0, 0x03E1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <sram_write_char+0xa0>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <sram_write_char+0x9c>
    1130:	90 91 de 03 	lds	r25, 0x03DE
    1134:	89 2b       	or	r24, r25
    1136:	80 93 de 03 	sts	0x03DE, r24
		return 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	08 95       	ret
	}else{
		return 0;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    1144:	08 95       	ret

00001146 <sram_write_string>:


//char screendata[8][128][8]; //line, col, data(8)
volatile char *ext_ram = (char *) 0x1800;

void sram_write_string(char letters[]){
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (sram_write_char(letters[i++])){
    114c:	89 91       	ld	r24, Y+
    114e:	0e 94 46 08 	call	0x108c	; 0x108c <sram_write_char>
    1152:	89 2b       	or	r24, r25
    1154:	d9 f7       	brne	.-10     	; 0x114c <sram_write_string+0x6>
	}
}
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <sram_init>:
	}else{
		return 0;
	}
}

void sram_init(void){
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	14 c0       	rjmp	.+40     	; 0x118e <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
    1166:	9c 01       	movw	r18, r24
    1168:	24 0f       	add	r18, r20
    116a:	35 1f       	adc	r19, r21
    116c:	e0 91 0a 01 	lds	r30, 0x010A
    1170:	f0 91 0b 01 	lds	r31, 0x010B
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	80 38       	cpi	r24, 0x80	; 128
    117e:	91 05       	cpc	r25, r1
    1180:	91 f7       	brne	.-28     	; 0x1166 <sram_init+0xa>
    1182:	40 58       	subi	r20, 0x80	; 128
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
    1186:	41 15       	cp	r20, r1
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	58 07       	cpc	r21, r24
    118c:	19 f0       	breq	.+6      	; 0x1194 <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
    118e:	87 2f       	mov	r24, r23
    1190:	96 2f       	mov	r25, r22
    1192:	e9 cf       	rjmp	.-46     	; 0x1166 <sram_init+0xa>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
		}
	}
	edited = 0b11111111;
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	80 93 de 03 	sts	0x03DE, r24
    119a:	08 95       	ret

0000119c <write_screen>:
		sram_pixel(-x+x0,y0+sqrt((pow(radius,2)-pow(x,2))));
	}
}


void write_screen(void){//update all the pages that are edited
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
	int line = 0;
	while (edited != 0b00000000){ //if there is an edited page it will update
    11ac:	80 91 de 03 	lds	r24, 0x03DE
    11b0:	88 23       	and	r24, r24
    11b2:	b1 f1       	breq	.+108    	; 0x1220 <write_screen+0x84>
    11b4:	e1 2c       	mov	r14, r1
    11b6:	f1 2c       	mov	r15, r1
	}
}


void write_screen(void){//update all the pages that are edited
	int line = 0;
    11b8:	c0 e0       	ldi	r28, 0x00	; 0
    11ba:	d0 e0       	ldi	r29, 0x00	; 0
	while (edited != 0b00000000){ //if there is an edited page it will update
		char current_page = 1 << line; //going 1 at a time
    11bc:	cc 24       	eor	r12, r12
    11be:	c3 94       	inc	r12
    11c0:	d1 2c       	mov	r13, r1
    11c2:	86 01       	movw	r16, r12
    11c4:	0c 2e       	mov	r0, r28
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <write_screen+0x30>
    11c8:	00 0f       	add	r16, r16
    11ca:	11 1f       	adc	r17, r17
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <write_screen+0x2c>
		if(current_page & edited){ //checks if the page is edited
    11d0:	80 23       	and	r24, r16
    11d2:	c1 f0       	breq	.+48     	; 0x1204 <write_screen+0x68>
			oled_goto_line(line);//changing the line to the edited one
    11d4:	ce 01       	movw	r24, r28
    11d6:	0e 94 6e 07 	call	0xedc	; 0xedc <oled_goto_line>
    11da:	c7 01       	movw	r24, r14
    11dc:	80 58       	subi	r24, 0x80	; 128
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	97 01       	movw	r18, r14
			for(unsigned int k = 0; k < 128; k++){//cycling through the columns in the edited page
				write_d(ext_ram[line*128 + k]);//printing the column from memory
    11e2:	e0 91 0a 01 	lds	r30, 0x010A
    11e6:	f0 91 0b 01 	lds	r31, 0x010B
    11ea:	e2 0f       	add	r30, r18
    11ec:	f3 1f       	adc	r31, r19
    11ee:	40 81       	ld	r20, Z
}


void write_d(uint8_t data)
{
	*oled_data = data;
    11f0:	e0 91 0c 01 	lds	r30, 0x010C
    11f4:	f0 91 0d 01 	lds	r31, 0x010D
    11f8:	40 83       	st	Z, r20
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
	int line = 0;
	while (edited != 0b00000000){ //if there is an edited page it will update
		char current_page = 1 << line; //going 1 at a time
		if(current_page & edited){ //checks if the page is edited
			oled_goto_line(line);//changing the line to the edited one
			for(unsigned int k = 0; k < 128; k++){//cycling through the columns in the edited page
    11fe:	28 17       	cp	r18, r24
    1200:	39 07       	cpc	r19, r25
    1202:	79 f7       	brne	.-34     	; 0x11e2 <write_screen+0x46>
				write_d(ext_ram[line*128 + k]);//printing the column from memory
			}			
		} 
		edited &= ~(current_page);//removes the edited-flag for this line
    1204:	00 95       	com	r16
    1206:	80 91 de 03 	lds	r24, 0x03DE
    120a:	08 23       	and	r16, r24
    120c:	00 93 de 03 	sts	0x03DE, r16
		line++;//check next line!
    1210:	21 96       	adiw	r28, 0x01	; 1
    1212:	80 e8       	ldi	r24, 0x80	; 128
    1214:	e8 0e       	add	r14, r24
    1216:	f1 1c       	adc	r15, r1
}


void write_screen(void){//update all the pages that are edited
	int line = 0;
	while (edited != 0b00000000){ //if there is an edited page it will update
    1218:	00 23       	and	r16, r16
    121a:	11 f0       	breq	.+4      	; 0x1220 <write_screen+0x84>
    121c:	80 2f       	mov	r24, r16
    121e:	d1 cf       	rjmp	.-94     	; 0x11c2 <write_screen+0x26>
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
			write_d(ext_ram[r*128 + k]);
		}
	}*/
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	08 95       	ret

00001232 <sram_clear_line>:

void sram_clear_line(unsigned int line){
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    1238:	0e 94 6e 07 	call	0xedc	; 0xedc <oled_goto_line>
	if(line < 8){
    123c:	c8 30       	cpi	r28, 0x08	; 8
    123e:	d1 05       	cpc	r29, r1
    1240:	28 f5       	brcc	.+74     	; 0x128c <sram_clear_line+0x5a>
		for(unsigned int i = 0; i < 128; i++){
			ext_ram[line*128 + i] = 0b00000000;
    1242:	be 01       	movw	r22, r28
    1244:	76 95       	lsr	r23
    1246:	76 2f       	mov	r23, r22
    1248:	66 27       	eor	r22, r22
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	a9 01       	movw	r20, r18
    1254:	46 0f       	add	r20, r22
    1256:	57 1f       	adc	r21, r23
    1258:	e0 91 0a 01 	lds	r30, 0x010A
    125c:	f0 91 0b 01 	lds	r31, 0x010B
    1260:	e4 0f       	add	r30, r20
    1262:	f5 1f       	adc	r31, r21
    1264:	10 82       	st	Z, r1
}

void sram_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    1266:	2f 5f       	subi	r18, 0xFF	; 255
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	20 38       	cpi	r18, 0x80	; 128
    126c:	31 05       	cpc	r19, r1
    126e:	89 f7       	brne	.-30     	; 0x1252 <sram_clear_line+0x20>
			ext_ram[line*128 + i] = 0b00000000;
		}
		edited |= 1 << line;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9c 01       	movw	r18, r24
    1276:	02 c0       	rjmp	.+4      	; 0x127c <sram_clear_line+0x4a>
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	ca 95       	dec	r28
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <sram_clear_line+0x46>
    1280:	e9 01       	movw	r28, r18
    1282:	80 91 de 03 	lds	r24, 0x03DE
    1286:	c8 2b       	or	r28, r24
    1288:	c0 93 de 03 	sts	0x03DE, r28
	}
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <sram_scroll_data>:


void sram_scroll_data(int line){
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
	char tempdata = ext_ram[line*128];
    1298:	dc 01       	movw	r26, r24
    129a:	b6 95       	lsr	r27
    129c:	ba 2f       	mov	r27, r26
    129e:	aa 27       	eor	r26, r26
    12a0:	b7 95       	ror	r27
    12a2:	a7 95       	ror	r26
    12a4:	e0 91 0a 01 	lds	r30, 0x010A
    12a8:	f0 91 0b 01 	lds	r31, 0x010B
    12ac:	ea 0f       	add	r30, r26
    12ae:	fb 1f       	adc	r31, r27
    12b0:	10 81       	ld	r17, Z
    12b2:	bd 01       	movw	r22, r26
    12b4:	60 58       	subi	r22, 0x80	; 128
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	9d 01       	movw	r18, r26
	for(unsigned int i = 0; i < 128; i++){
		ext_ram[line*128 + i] = ext_ram[line*128 + i + 1];
    12ba:	40 91 0a 01 	lds	r20, 0x010A
    12be:	50 91 0b 01 	lds	r21, 0x010B
    12c2:	fa 01       	movw	r30, r20
    12c4:	e2 0f       	add	r30, r18
    12c6:	f3 1f       	adc	r31, r19
    12c8:	2f 5f       	subi	r18, 0xFF	; 255
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	ea 01       	movw	r28, r20
    12ce:	c2 0f       	add	r28, r18
    12d0:	d3 1f       	adc	r29, r19
    12d2:	48 81       	ld	r20, Y
    12d4:	40 83       	st	Z, r20
}


void sram_scroll_data(int line){
	char tempdata = ext_ram[line*128];
	for(unsigned int i = 0; i < 128; i++){
    12d6:	26 17       	cp	r18, r22
    12d8:	37 07       	cpc	r19, r23
    12da:	79 f7       	brne	.-34     	; 0x12ba <sram_scroll_data+0x28>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + 1];
	}
	ext_ram[line*128 + 127] = tempdata;
    12dc:	a1 58       	subi	r26, 0x81	; 129
    12de:	bf 4f       	sbci	r27, 0xFF	; 255
    12e0:	20 91 0a 01 	lds	r18, 0x010A
    12e4:	30 91 0b 01 	lds	r19, 0x010B
    12e8:	a2 0f       	add	r26, r18
    12ea:	b3 1f       	adc	r27, r19
    12ec:	1c 93       	st	X, r17
	edited |= 1 << line;
    12ee:	21 e0       	ldi	r18, 0x01	; 1
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <sram_scroll_data+0x68>
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	8a 95       	dec	r24
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <sram_scroll_data+0x64>
    12fe:	ca 01       	movw	r24, r20
    1300:	90 91 de 03 	lds	r25, 0x03DE
    1304:	89 2b       	or	r24, r25
    1306:	80 93 de 03 	sts	0x03DE, r24
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	08 95       	ret

00001312 <send_UART>:
    1312:	5d 9b       	sbis	0x0b, 5	; 11
    1314:	fe cf       	rjmp	.-4      	; 0x1312 <send_UART>
    1316:	8c b9       	out	0x0c, r24	; 12
    1318:	08 95       	ret

0000131a <recieve_UART>:
    131a:	5f 9b       	sbis	0x0b, 7	; 11
    131c:	fe cf       	rjmp	.-4      	; 0x131a <recieve_UART>
    131e:	8c b1       	in	r24, 0x0c	; 12
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	08 95       	ret

00001324 <init_UART>:
    1324:	90 bd       	out	0x20, r25	; 32
    1326:	89 b9       	out	0x09, r24	; 9
    1328:	88 e1       	ldi	r24, 0x18	; 24
    132a:	8a b9       	out	0x0a, r24	; 10
    132c:	6d e8       	ldi	r22, 0x8D	; 141
    132e:	79 e0       	ldi	r23, 0x09	; 9
    1330:	89 e8       	ldi	r24, 0x89	; 137
    1332:	99 e0       	ldi	r25, 0x09	; 9
    1334:	0e 94 19 0c 	call	0x1832	; 0x1832 <fdevopen>
    1338:	08 95       	ret

0000133a <__subsf3>:
    133a:	50 58       	subi	r21, 0x80	; 128

0000133c <__addsf3>:
    133c:	bb 27       	eor	r27, r27
    133e:	aa 27       	eor	r26, r26
    1340:	0e d0       	rcall	.+28     	; 0x135e <__addsf3x>
    1342:	4d c1       	rjmp	.+666    	; 0x15de <__fp_round>
    1344:	3e d1       	rcall	.+636    	; 0x15c2 <__fp_pscA>
    1346:	30 f0       	brcs	.+12     	; 0x1354 <__addsf3+0x18>
    1348:	43 d1       	rcall	.+646    	; 0x15d0 <__fp_pscB>
    134a:	20 f0       	brcs	.+8      	; 0x1354 <__addsf3+0x18>
    134c:	31 f4       	brne	.+12     	; 0x135a <__addsf3+0x1e>
    134e:	9f 3f       	cpi	r25, 0xFF	; 255
    1350:	11 f4       	brne	.+4      	; 0x1356 <__addsf3+0x1a>
    1352:	1e f4       	brtc	.+6      	; 0x135a <__addsf3+0x1e>
    1354:	33 c1       	rjmp	.+614    	; 0x15bc <__fp_nan>
    1356:	0e f4       	brtc	.+2      	; 0x135a <__addsf3+0x1e>
    1358:	e0 95       	com	r30
    135a:	e7 fb       	bst	r30, 7
    135c:	29 c1       	rjmp	.+594    	; 0x15b0 <__fp_inf>

0000135e <__addsf3x>:
    135e:	e9 2f       	mov	r30, r25
    1360:	4f d1       	rcall	.+670    	; 0x1600 <__fp_split3>
    1362:	80 f3       	brcs	.-32     	; 0x1344 <__addsf3+0x8>
    1364:	ba 17       	cp	r27, r26
    1366:	62 07       	cpc	r22, r18
    1368:	73 07       	cpc	r23, r19
    136a:	84 07       	cpc	r24, r20
    136c:	95 07       	cpc	r25, r21
    136e:	18 f0       	brcs	.+6      	; 0x1376 <__addsf3x+0x18>
    1370:	71 f4       	brne	.+28     	; 0x138e <__addsf3x+0x30>
    1372:	9e f5       	brtc	.+102    	; 0x13da <__addsf3x+0x7c>
    1374:	67 c1       	rjmp	.+718    	; 0x1644 <__fp_zero>
    1376:	0e f4       	brtc	.+2      	; 0x137a <__addsf3x+0x1c>
    1378:	e0 95       	com	r30
    137a:	0b 2e       	mov	r0, r27
    137c:	ba 2f       	mov	r27, r26
    137e:	a0 2d       	mov	r26, r0
    1380:	0b 01       	movw	r0, r22
    1382:	b9 01       	movw	r22, r18
    1384:	90 01       	movw	r18, r0
    1386:	0c 01       	movw	r0, r24
    1388:	ca 01       	movw	r24, r20
    138a:	a0 01       	movw	r20, r0
    138c:	11 24       	eor	r1, r1
    138e:	ff 27       	eor	r31, r31
    1390:	59 1b       	sub	r21, r25
    1392:	99 f0       	breq	.+38     	; 0x13ba <__addsf3x+0x5c>
    1394:	59 3f       	cpi	r21, 0xF9	; 249
    1396:	50 f4       	brcc	.+20     	; 0x13ac <__addsf3x+0x4e>
    1398:	50 3e       	cpi	r21, 0xE0	; 224
    139a:	68 f1       	brcs	.+90     	; 0x13f6 <__addsf3x+0x98>
    139c:	1a 16       	cp	r1, r26
    139e:	f0 40       	sbci	r31, 0x00	; 0
    13a0:	a2 2f       	mov	r26, r18
    13a2:	23 2f       	mov	r18, r19
    13a4:	34 2f       	mov	r19, r20
    13a6:	44 27       	eor	r20, r20
    13a8:	58 5f       	subi	r21, 0xF8	; 248
    13aa:	f3 cf       	rjmp	.-26     	; 0x1392 <__addsf3x+0x34>
    13ac:	46 95       	lsr	r20
    13ae:	37 95       	ror	r19
    13b0:	27 95       	ror	r18
    13b2:	a7 95       	ror	r26
    13b4:	f0 40       	sbci	r31, 0x00	; 0
    13b6:	53 95       	inc	r21
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__addsf3x+0x4e>
    13ba:	7e f4       	brtc	.+30     	; 0x13da <__addsf3x+0x7c>
    13bc:	1f 16       	cp	r1, r31
    13be:	ba 0b       	sbc	r27, r26
    13c0:	62 0b       	sbc	r22, r18
    13c2:	73 0b       	sbc	r23, r19
    13c4:	84 0b       	sbc	r24, r20
    13c6:	ba f0       	brmi	.+46     	; 0x13f6 <__addsf3x+0x98>
    13c8:	91 50       	subi	r25, 0x01	; 1
    13ca:	a1 f0       	breq	.+40     	; 0x13f4 <__addsf3x+0x96>
    13cc:	ff 0f       	add	r31, r31
    13ce:	bb 1f       	adc	r27, r27
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	c2 f7       	brpl	.-16     	; 0x13c8 <__addsf3x+0x6a>
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <__addsf3x+0x98>
    13da:	ba 0f       	add	r27, r26
    13dc:	62 1f       	adc	r22, r18
    13de:	73 1f       	adc	r23, r19
    13e0:	84 1f       	adc	r24, r20
    13e2:	48 f4       	brcc	.+18     	; 0x13f6 <__addsf3x+0x98>
    13e4:	87 95       	ror	r24
    13e6:	77 95       	ror	r23
    13e8:	67 95       	ror	r22
    13ea:	b7 95       	ror	r27
    13ec:	f7 95       	ror	r31
    13ee:	9e 3f       	cpi	r25, 0xFE	; 254
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <__addsf3x+0x96>
    13f2:	b3 cf       	rjmp	.-154    	; 0x135a <__addsf3+0x1e>
    13f4:	93 95       	inc	r25
    13f6:	88 0f       	add	r24, r24
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <__addsf3x+0x9e>
    13fa:	99 27       	eor	r25, r25
    13fc:	ee 0f       	add	r30, r30
    13fe:	97 95       	ror	r25
    1400:	87 95       	ror	r24
    1402:	08 95       	ret

00001404 <__divsf3>:
    1404:	0c d0       	rcall	.+24     	; 0x141e <__divsf3x>
    1406:	eb c0       	rjmp	.+470    	; 0x15de <__fp_round>
    1408:	e3 d0       	rcall	.+454    	; 0x15d0 <__fp_pscB>
    140a:	40 f0       	brcs	.+16     	; 0x141c <__divsf3+0x18>
    140c:	da d0       	rcall	.+436    	; 0x15c2 <__fp_pscA>
    140e:	30 f0       	brcs	.+12     	; 0x141c <__divsf3+0x18>
    1410:	21 f4       	brne	.+8      	; 0x141a <__divsf3+0x16>
    1412:	5f 3f       	cpi	r21, 0xFF	; 255
    1414:	19 f0       	breq	.+6      	; 0x141c <__divsf3+0x18>
    1416:	cc c0       	rjmp	.+408    	; 0x15b0 <__fp_inf>
    1418:	51 11       	cpse	r21, r1
    141a:	15 c1       	rjmp	.+554    	; 0x1646 <__fp_szero>
    141c:	cf c0       	rjmp	.+414    	; 0x15bc <__fp_nan>

0000141e <__divsf3x>:
    141e:	f0 d0       	rcall	.+480    	; 0x1600 <__fp_split3>
    1420:	98 f3       	brcs	.-26     	; 0x1408 <__divsf3+0x4>

00001422 <__divsf3_pse>:
    1422:	99 23       	and	r25, r25
    1424:	c9 f3       	breq	.-14     	; 0x1418 <__divsf3+0x14>
    1426:	55 23       	and	r21, r21
    1428:	b1 f3       	breq	.-20     	; 0x1416 <__divsf3+0x12>
    142a:	95 1b       	sub	r25, r21
    142c:	55 0b       	sbc	r21, r21
    142e:	bb 27       	eor	r27, r27
    1430:	aa 27       	eor	r26, r26
    1432:	62 17       	cp	r22, r18
    1434:	73 07       	cpc	r23, r19
    1436:	84 07       	cpc	r24, r20
    1438:	38 f0       	brcs	.+14     	; 0x1448 <__divsf3_pse+0x26>
    143a:	9f 5f       	subi	r25, 0xFF	; 255
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	44 1f       	adc	r20, r20
    1444:	aa 1f       	adc	r26, r26
    1446:	a9 f3       	breq	.-22     	; 0x1432 <__divsf3_pse+0x10>
    1448:	33 d0       	rcall	.+102    	; 0x14b0 <__divsf3_pse+0x8e>
    144a:	0e 2e       	mov	r0, r30
    144c:	3a f0       	brmi	.+14     	; 0x145c <__divsf3_pse+0x3a>
    144e:	e0 e8       	ldi	r30, 0x80	; 128
    1450:	30 d0       	rcall	.+96     	; 0x14b2 <__divsf3_pse+0x90>
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	50 40       	sbci	r21, 0x00	; 0
    1456:	e6 95       	lsr	r30
    1458:	00 1c       	adc	r0, r0
    145a:	ca f7       	brpl	.-14     	; 0x144e <__divsf3_pse+0x2c>
    145c:	29 d0       	rcall	.+82     	; 0x14b0 <__divsf3_pse+0x8e>
    145e:	fe 2f       	mov	r31, r30
    1460:	27 d0       	rcall	.+78     	; 0x14b0 <__divsf3_pse+0x8e>
    1462:	66 0f       	add	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	88 1f       	adc	r24, r24
    1468:	bb 1f       	adc	r27, r27
    146a:	26 17       	cp	r18, r22
    146c:	37 07       	cpc	r19, r23
    146e:	48 07       	cpc	r20, r24
    1470:	ab 07       	cpc	r26, r27
    1472:	b0 e8       	ldi	r27, 0x80	; 128
    1474:	09 f0       	breq	.+2      	; 0x1478 <__divsf3_pse+0x56>
    1476:	bb 0b       	sbc	r27, r27
    1478:	80 2d       	mov	r24, r0
    147a:	bf 01       	movw	r22, r30
    147c:	ff 27       	eor	r31, r31
    147e:	93 58       	subi	r25, 0x83	; 131
    1480:	5f 4f       	sbci	r21, 0xFF	; 255
    1482:	2a f0       	brmi	.+10     	; 0x148e <__divsf3_pse+0x6c>
    1484:	9e 3f       	cpi	r25, 0xFE	; 254
    1486:	51 05       	cpc	r21, r1
    1488:	68 f0       	brcs	.+26     	; 0x14a4 <__divsf3_pse+0x82>
    148a:	92 c0       	rjmp	.+292    	; 0x15b0 <__fp_inf>
    148c:	dc c0       	rjmp	.+440    	; 0x1646 <__fp_szero>
    148e:	5f 3f       	cpi	r21, 0xFF	; 255
    1490:	ec f3       	brlt	.-6      	; 0x148c <__divsf3_pse+0x6a>
    1492:	98 3e       	cpi	r25, 0xE8	; 232
    1494:	dc f3       	brlt	.-10     	; 0x148c <__divsf3_pse+0x6a>
    1496:	86 95       	lsr	r24
    1498:	77 95       	ror	r23
    149a:	67 95       	ror	r22
    149c:	b7 95       	ror	r27
    149e:	f7 95       	ror	r31
    14a0:	9f 5f       	subi	r25, 0xFF	; 255
    14a2:	c9 f7       	brne	.-14     	; 0x1496 <__divsf3_pse+0x74>
    14a4:	88 0f       	add	r24, r24
    14a6:	91 1d       	adc	r25, r1
    14a8:	96 95       	lsr	r25
    14aa:	87 95       	ror	r24
    14ac:	97 f9       	bld	r25, 7
    14ae:	08 95       	ret
    14b0:	e1 e0       	ldi	r30, 0x01	; 1
    14b2:	66 0f       	add	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	88 1f       	adc	r24, r24
    14b8:	bb 1f       	adc	r27, r27
    14ba:	62 17       	cp	r22, r18
    14bc:	73 07       	cpc	r23, r19
    14be:	84 07       	cpc	r24, r20
    14c0:	ba 07       	cpc	r27, r26
    14c2:	20 f0       	brcs	.+8      	; 0x14cc <__divsf3_pse+0xaa>
    14c4:	62 1b       	sub	r22, r18
    14c6:	73 0b       	sbc	r23, r19
    14c8:	84 0b       	sbc	r24, r20
    14ca:	ba 0b       	sbc	r27, r26
    14cc:	ee 1f       	adc	r30, r30
    14ce:	88 f7       	brcc	.-30     	; 0x14b2 <__divsf3_pse+0x90>
    14d0:	e0 95       	com	r30
    14d2:	08 95       	ret

000014d4 <__fixsfsi>:
    14d4:	04 d0       	rcall	.+8      	; 0x14de <__fixunssfsi>
    14d6:	68 94       	set
    14d8:	b1 11       	cpse	r27, r1
    14da:	b5 c0       	rjmp	.+362    	; 0x1646 <__fp_szero>
    14dc:	08 95       	ret

000014de <__fixunssfsi>:
    14de:	98 d0       	rcall	.+304    	; 0x1610 <__fp_splitA>
    14e0:	88 f0       	brcs	.+34     	; 0x1504 <__fixunssfsi+0x26>
    14e2:	9f 57       	subi	r25, 0x7F	; 127
    14e4:	90 f0       	brcs	.+36     	; 0x150a <__fixunssfsi+0x2c>
    14e6:	b9 2f       	mov	r27, r25
    14e8:	99 27       	eor	r25, r25
    14ea:	b7 51       	subi	r27, 0x17	; 23
    14ec:	a0 f0       	brcs	.+40     	; 0x1516 <__fixunssfsi+0x38>
    14ee:	d1 f0       	breq	.+52     	; 0x1524 <__fixunssfsi+0x46>
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	1a f0       	brmi	.+6      	; 0x1500 <__fixunssfsi+0x22>
    14fa:	ba 95       	dec	r27
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__fixunssfsi+0x12>
    14fe:	12 c0       	rjmp	.+36     	; 0x1524 <__fixunssfsi+0x46>
    1500:	b1 30       	cpi	r27, 0x01	; 1
    1502:	81 f0       	breq	.+32     	; 0x1524 <__fixunssfsi+0x46>
    1504:	9f d0       	rcall	.+318    	; 0x1644 <__fp_zero>
    1506:	b1 e0       	ldi	r27, 0x01	; 1
    1508:	08 95       	ret
    150a:	9c c0       	rjmp	.+312    	; 0x1644 <__fp_zero>
    150c:	67 2f       	mov	r22, r23
    150e:	78 2f       	mov	r23, r24
    1510:	88 27       	eor	r24, r24
    1512:	b8 5f       	subi	r27, 0xF8	; 248
    1514:	39 f0       	breq	.+14     	; 0x1524 <__fixunssfsi+0x46>
    1516:	b9 3f       	cpi	r27, 0xF9	; 249
    1518:	cc f3       	brlt	.-14     	; 0x150c <__fixunssfsi+0x2e>
    151a:	86 95       	lsr	r24
    151c:	77 95       	ror	r23
    151e:	67 95       	ror	r22
    1520:	b3 95       	inc	r27
    1522:	d9 f7       	brne	.-10     	; 0x151a <__fixunssfsi+0x3c>
    1524:	3e f4       	brtc	.+14     	; 0x1534 <__fixunssfsi+0x56>
    1526:	90 95       	com	r25
    1528:	80 95       	com	r24
    152a:	70 95       	com	r23
    152c:	61 95       	neg	r22
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	08 95       	ret

00001536 <__floatunsisf>:
    1536:	e8 94       	clt
    1538:	09 c0       	rjmp	.+18     	; 0x154c <__floatsisf+0x12>

0000153a <__floatsisf>:
    153a:	97 fb       	bst	r25, 7
    153c:	3e f4       	brtc	.+14     	; 0x154c <__floatsisf+0x12>
    153e:	90 95       	com	r25
    1540:	80 95       	com	r24
    1542:	70 95       	com	r23
    1544:	61 95       	neg	r22
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	99 23       	and	r25, r25
    154e:	a9 f0       	breq	.+42     	; 0x157a <__floatsisf+0x40>
    1550:	f9 2f       	mov	r31, r25
    1552:	96 e9       	ldi	r25, 0x96	; 150
    1554:	bb 27       	eor	r27, r27
    1556:	93 95       	inc	r25
    1558:	f6 95       	lsr	r31
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f1 11       	cpse	r31, r1
    1564:	f8 cf       	rjmp	.-16     	; 0x1556 <__floatsisf+0x1c>
    1566:	fa f4       	brpl	.+62     	; 0x15a6 <__floatsisf+0x6c>
    1568:	bb 0f       	add	r27, r27
    156a:	11 f4       	brne	.+4      	; 0x1570 <__floatsisf+0x36>
    156c:	60 ff       	sbrs	r22, 0
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <__floatsisf+0x6c>
    1570:	6f 5f       	subi	r22, 0xFF	; 255
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <__floatsisf+0x6c>
    157a:	88 23       	and	r24, r24
    157c:	11 f0       	breq	.+4      	; 0x1582 <__floatsisf+0x48>
    157e:	96 e9       	ldi	r25, 0x96	; 150
    1580:	11 c0       	rjmp	.+34     	; 0x15a4 <__floatsisf+0x6a>
    1582:	77 23       	and	r23, r23
    1584:	21 f0       	breq	.+8      	; 0x158e <__floatsisf+0x54>
    1586:	9e e8       	ldi	r25, 0x8E	; 142
    1588:	87 2f       	mov	r24, r23
    158a:	76 2f       	mov	r23, r22
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <__floatsisf+0x5e>
    158e:	66 23       	and	r22, r22
    1590:	71 f0       	breq	.+28     	; 0x15ae <__floatsisf+0x74>
    1592:	96 e8       	ldi	r25, 0x86	; 134
    1594:	86 2f       	mov	r24, r22
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	2a f0       	brmi	.+10     	; 0x15a6 <__floatsisf+0x6c>
    159c:	9a 95       	dec	r25
    159e:	66 0f       	add	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	da f7       	brpl	.-10     	; 0x159c <__floatsisf+0x62>
    15a6:	88 0f       	add	r24, r24
    15a8:	96 95       	lsr	r25
    15aa:	87 95       	ror	r24
    15ac:	97 f9       	bld	r25, 7
    15ae:	08 95       	ret

000015b0 <__fp_inf>:
    15b0:	97 f9       	bld	r25, 7
    15b2:	9f 67       	ori	r25, 0x7F	; 127
    15b4:	80 e8       	ldi	r24, 0x80	; 128
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	08 95       	ret

000015bc <__fp_nan>:
    15bc:	9f ef       	ldi	r25, 0xFF	; 255
    15be:	80 ec       	ldi	r24, 0xC0	; 192
    15c0:	08 95       	ret

000015c2 <__fp_pscA>:
    15c2:	00 24       	eor	r0, r0
    15c4:	0a 94       	dec	r0
    15c6:	16 16       	cp	r1, r22
    15c8:	17 06       	cpc	r1, r23
    15ca:	18 06       	cpc	r1, r24
    15cc:	09 06       	cpc	r0, r25
    15ce:	08 95       	ret

000015d0 <__fp_pscB>:
    15d0:	00 24       	eor	r0, r0
    15d2:	0a 94       	dec	r0
    15d4:	12 16       	cp	r1, r18
    15d6:	13 06       	cpc	r1, r19
    15d8:	14 06       	cpc	r1, r20
    15da:	05 06       	cpc	r0, r21
    15dc:	08 95       	ret

000015de <__fp_round>:
    15de:	09 2e       	mov	r0, r25
    15e0:	03 94       	inc	r0
    15e2:	00 0c       	add	r0, r0
    15e4:	11 f4       	brne	.+4      	; 0x15ea <__fp_round+0xc>
    15e6:	88 23       	and	r24, r24
    15e8:	52 f0       	brmi	.+20     	; 0x15fe <__fp_round+0x20>
    15ea:	bb 0f       	add	r27, r27
    15ec:	40 f4       	brcc	.+16     	; 0x15fe <__fp_round+0x20>
    15ee:	bf 2b       	or	r27, r31
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <__fp_round+0x18>
    15f2:	60 ff       	sbrs	r22, 0
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <__fp_round+0x20>
    15f6:	6f 5f       	subi	r22, 0xFF	; 255
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	8f 4f       	sbci	r24, 0xFF	; 255
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	08 95       	ret

00001600 <__fp_split3>:
    1600:	57 fd       	sbrc	r21, 7
    1602:	90 58       	subi	r25, 0x80	; 128
    1604:	44 0f       	add	r20, r20
    1606:	55 1f       	adc	r21, r21
    1608:	59 f0       	breq	.+22     	; 0x1620 <__fp_splitA+0x10>
    160a:	5f 3f       	cpi	r21, 0xFF	; 255
    160c:	71 f0       	breq	.+28     	; 0x162a <__fp_splitA+0x1a>
    160e:	47 95       	ror	r20

00001610 <__fp_splitA>:
    1610:	88 0f       	add	r24, r24
    1612:	97 fb       	bst	r25, 7
    1614:	99 1f       	adc	r25, r25
    1616:	61 f0       	breq	.+24     	; 0x1630 <__fp_splitA+0x20>
    1618:	9f 3f       	cpi	r25, 0xFF	; 255
    161a:	79 f0       	breq	.+30     	; 0x163a <__fp_splitA+0x2a>
    161c:	87 95       	ror	r24
    161e:	08 95       	ret
    1620:	12 16       	cp	r1, r18
    1622:	13 06       	cpc	r1, r19
    1624:	14 06       	cpc	r1, r20
    1626:	55 1f       	adc	r21, r21
    1628:	f2 cf       	rjmp	.-28     	; 0x160e <__fp_split3+0xe>
    162a:	46 95       	lsr	r20
    162c:	f1 df       	rcall	.-30     	; 0x1610 <__fp_splitA>
    162e:	08 c0       	rjmp	.+16     	; 0x1640 <__fp_splitA+0x30>
    1630:	16 16       	cp	r1, r22
    1632:	17 06       	cpc	r1, r23
    1634:	18 06       	cpc	r1, r24
    1636:	99 1f       	adc	r25, r25
    1638:	f1 cf       	rjmp	.-30     	; 0x161c <__fp_splitA+0xc>
    163a:	86 95       	lsr	r24
    163c:	71 05       	cpc	r23, r1
    163e:	61 05       	cpc	r22, r1
    1640:	08 94       	sec
    1642:	08 95       	ret

00001644 <__fp_zero>:
    1644:	e8 94       	clt

00001646 <__fp_szero>:
    1646:	bb 27       	eor	r27, r27
    1648:	66 27       	eor	r22, r22
    164a:	77 27       	eor	r23, r23
    164c:	cb 01       	movw	r24, r22
    164e:	97 f9       	bld	r25, 7
    1650:	08 95       	ret

00001652 <__mulsf3>:
    1652:	0b d0       	rcall	.+22     	; 0x166a <__mulsf3x>
    1654:	c4 cf       	rjmp	.-120    	; 0x15de <__fp_round>
    1656:	b5 df       	rcall	.-150    	; 0x15c2 <__fp_pscA>
    1658:	28 f0       	brcs	.+10     	; 0x1664 <__mulsf3+0x12>
    165a:	ba df       	rcall	.-140    	; 0x15d0 <__fp_pscB>
    165c:	18 f0       	brcs	.+6      	; 0x1664 <__mulsf3+0x12>
    165e:	95 23       	and	r25, r21
    1660:	09 f0       	breq	.+2      	; 0x1664 <__mulsf3+0x12>
    1662:	a6 cf       	rjmp	.-180    	; 0x15b0 <__fp_inf>
    1664:	ab cf       	rjmp	.-170    	; 0x15bc <__fp_nan>
    1666:	11 24       	eor	r1, r1
    1668:	ee cf       	rjmp	.-36     	; 0x1646 <__fp_szero>

0000166a <__mulsf3x>:
    166a:	ca df       	rcall	.-108    	; 0x1600 <__fp_split3>
    166c:	a0 f3       	brcs	.-24     	; 0x1656 <__mulsf3+0x4>

0000166e <__mulsf3_pse>:
    166e:	95 9f       	mul	r25, r21
    1670:	d1 f3       	breq	.-12     	; 0x1666 <__mulsf3+0x14>
    1672:	95 0f       	add	r25, r21
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	55 1f       	adc	r21, r21
    1678:	62 9f       	mul	r22, r18
    167a:	f0 01       	movw	r30, r0
    167c:	72 9f       	mul	r23, r18
    167e:	bb 27       	eor	r27, r27
    1680:	f0 0d       	add	r31, r0
    1682:	b1 1d       	adc	r27, r1
    1684:	63 9f       	mul	r22, r19
    1686:	aa 27       	eor	r26, r26
    1688:	f0 0d       	add	r31, r0
    168a:	b1 1d       	adc	r27, r1
    168c:	aa 1f       	adc	r26, r26
    168e:	64 9f       	mul	r22, r20
    1690:	66 27       	eor	r22, r22
    1692:	b0 0d       	add	r27, r0
    1694:	a1 1d       	adc	r26, r1
    1696:	66 1f       	adc	r22, r22
    1698:	82 9f       	mul	r24, r18
    169a:	22 27       	eor	r18, r18
    169c:	b0 0d       	add	r27, r0
    169e:	a1 1d       	adc	r26, r1
    16a0:	62 1f       	adc	r22, r18
    16a2:	73 9f       	mul	r23, r19
    16a4:	b0 0d       	add	r27, r0
    16a6:	a1 1d       	adc	r26, r1
    16a8:	62 1f       	adc	r22, r18
    16aa:	83 9f       	mul	r24, r19
    16ac:	a0 0d       	add	r26, r0
    16ae:	61 1d       	adc	r22, r1
    16b0:	22 1f       	adc	r18, r18
    16b2:	74 9f       	mul	r23, r20
    16b4:	33 27       	eor	r19, r19
    16b6:	a0 0d       	add	r26, r0
    16b8:	61 1d       	adc	r22, r1
    16ba:	23 1f       	adc	r18, r19
    16bc:	84 9f       	mul	r24, r20
    16be:	60 0d       	add	r22, r0
    16c0:	21 1d       	adc	r18, r1
    16c2:	82 2f       	mov	r24, r18
    16c4:	76 2f       	mov	r23, r22
    16c6:	6a 2f       	mov	r22, r26
    16c8:	11 24       	eor	r1, r1
    16ca:	9f 57       	subi	r25, 0x7F	; 127
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	8a f0       	brmi	.+34     	; 0x16f2 <__mulsf3_pse+0x84>
    16d0:	e1 f0       	breq	.+56     	; 0x170a <__mulsf3_pse+0x9c>
    16d2:	88 23       	and	r24, r24
    16d4:	4a f0       	brmi	.+18     	; 0x16e8 <__mulsf3_pse+0x7a>
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	bb 1f       	adc	r27, r27
    16dc:	66 1f       	adc	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	91 50       	subi	r25, 0x01	; 1
    16e4:	50 40       	sbci	r21, 0x00	; 0
    16e6:	a9 f7       	brne	.-22     	; 0x16d2 <__mulsf3_pse+0x64>
    16e8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ea:	51 05       	cpc	r21, r1
    16ec:	70 f0       	brcs	.+28     	; 0x170a <__mulsf3_pse+0x9c>
    16ee:	60 cf       	rjmp	.-320    	; 0x15b0 <__fp_inf>
    16f0:	aa cf       	rjmp	.-172    	; 0x1646 <__fp_szero>
    16f2:	5f 3f       	cpi	r21, 0xFF	; 255
    16f4:	ec f3       	brlt	.-6      	; 0x16f0 <__mulsf3_pse+0x82>
    16f6:	98 3e       	cpi	r25, 0xE8	; 232
    16f8:	dc f3       	brlt	.-10     	; 0x16f0 <__mulsf3_pse+0x82>
    16fa:	86 95       	lsr	r24
    16fc:	77 95       	ror	r23
    16fe:	67 95       	ror	r22
    1700:	b7 95       	ror	r27
    1702:	f7 95       	ror	r31
    1704:	e7 95       	ror	r30
    1706:	9f 5f       	subi	r25, 0xFF	; 255
    1708:	c1 f7       	brne	.-16     	; 0x16fa <__mulsf3_pse+0x8c>
    170a:	fe 2b       	or	r31, r30
    170c:	88 0f       	add	r24, r24
    170e:	91 1d       	adc	r25, r1
    1710:	96 95       	lsr	r25
    1712:	87 95       	ror	r24
    1714:	97 f9       	bld	r25, 7
    1716:	08 95       	ret

00001718 <__divmodhi4>:
    1718:	97 fb       	bst	r25, 7
    171a:	07 2e       	mov	r0, r23
    171c:	16 f4       	brtc	.+4      	; 0x1722 <__divmodhi4+0xa>
    171e:	00 94       	com	r0
    1720:	07 d0       	rcall	.+14     	; 0x1730 <__divmodhi4_neg1>
    1722:	77 fd       	sbrc	r23, 7
    1724:	09 d0       	rcall	.+18     	; 0x1738 <__divmodhi4_neg2>
    1726:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__udivmodhi4>
    172a:	07 fc       	sbrc	r0, 7
    172c:	05 d0       	rcall	.+10     	; 0x1738 <__divmodhi4_neg2>
    172e:	3e f4       	brtc	.+14     	; 0x173e <__divmodhi4_exit>

00001730 <__divmodhi4_neg1>:
    1730:	90 95       	com	r25
    1732:	81 95       	neg	r24
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	08 95       	ret

00001738 <__divmodhi4_neg2>:
    1738:	70 95       	com	r23
    173a:	61 95       	neg	r22
    173c:	7f 4f       	sbci	r23, 0xFF	; 255

0000173e <__divmodhi4_exit>:
    173e:	08 95       	ret

00001740 <__udivmodhi4>:
    1740:	aa 1b       	sub	r26, r26
    1742:	bb 1b       	sub	r27, r27
    1744:	51 e1       	ldi	r21, 0x11	; 17
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <__udivmodhi4_ep>

00001748 <__udivmodhi4_loop>:
    1748:	aa 1f       	adc	r26, r26
    174a:	bb 1f       	adc	r27, r27
    174c:	a6 17       	cp	r26, r22
    174e:	b7 07       	cpc	r27, r23
    1750:	10 f0       	brcs	.+4      	; 0x1756 <__udivmodhi4_ep>
    1752:	a6 1b       	sub	r26, r22
    1754:	b7 0b       	sbc	r27, r23

00001756 <__udivmodhi4_ep>:
    1756:	88 1f       	adc	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	5a 95       	dec	r21
    175c:	a9 f7       	brne	.-22     	; 0x1748 <__udivmodhi4_loop>
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	08 95       	ret

00001768 <do_rand>:
    1768:	8f 92       	push	r8
    176a:	9f 92       	push	r9
    176c:	af 92       	push	r10
    176e:	bf 92       	push	r11
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	ec 01       	movw	r28, r24
    177e:	68 81       	ld	r22, Y
    1780:	79 81       	ldd	r23, Y+1	; 0x01
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	61 15       	cp	r22, r1
    1788:	71 05       	cpc	r23, r1
    178a:	81 05       	cpc	r24, r1
    178c:	91 05       	cpc	r25, r1
    178e:	21 f4       	brne	.+8      	; 0x1798 <do_rand+0x30>
    1790:	64 e2       	ldi	r22, 0x24	; 36
    1792:	79 ed       	ldi	r23, 0xD9	; 217
    1794:	8b e5       	ldi	r24, 0x5B	; 91
    1796:	97 e0       	ldi	r25, 0x07	; 7
    1798:	2d e1       	ldi	r18, 0x1D	; 29
    179a:	33 ef       	ldi	r19, 0xF3	; 243
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	0e 94 67 10 	call	0x20ce	; 0x20ce <__divmodsi4>
    17a4:	49 01       	movw	r8, r18
    17a6:	5a 01       	movw	r10, r20
    17a8:	9b 01       	movw	r18, r22
    17aa:	ac 01       	movw	r20, r24
    17ac:	a7 ea       	ldi	r26, 0xA7	; 167
    17ae:	b1 e4       	ldi	r27, 0x41	; 65
    17b0:	0e 94 86 10 	call	0x210c	; 0x210c <__muluhisi3>
    17b4:	6b 01       	movw	r12, r22
    17b6:	7c 01       	movw	r14, r24
    17b8:	ac ee       	ldi	r26, 0xEC	; 236
    17ba:	b4 ef       	ldi	r27, 0xF4	; 244
    17bc:	a5 01       	movw	r20, r10
    17be:	94 01       	movw	r18, r8
    17c0:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulohisi3>
    17c4:	c6 0e       	add	r12, r22
    17c6:	d7 1e       	adc	r13, r23
    17c8:	e8 1e       	adc	r14, r24
    17ca:	f9 1e       	adc	r15, r25
    17cc:	f7 fe       	sbrs	r15, 7
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <do_rand+0x74>
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	c8 1a       	sub	r12, r24
    17d4:	d1 08       	sbc	r13, r1
    17d6:	e1 08       	sbc	r14, r1
    17d8:	80 e8       	ldi	r24, 0x80	; 128
    17da:	f8 0a       	sbc	r15, r24
    17dc:	c8 82       	st	Y, r12
    17de:	d9 82       	std	Y+1, r13	; 0x01
    17e0:	ea 82       	std	Y+2, r14	; 0x02
    17e2:	fb 82       	std	Y+3, r15	; 0x03
    17e4:	c6 01       	movw	r24, r12
    17e6:	9f 77       	andi	r25, 0x7F	; 127
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	08 95       	ret

000017fe <rand_r>:
    17fe:	0e 94 b4 0b 	call	0x1768	; 0x1768 <do_rand>
    1802:	08 95       	ret

00001804 <rand>:
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	0e 94 b4 0b 	call	0x1768	; 0x1768 <do_rand>
    180c:	08 95       	ret

0000180e <srand>:
    180e:	a0 e0       	ldi	r26, 0x00	; 0
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	80 93 00 01 	sts	0x0100, r24
    1816:	90 93 01 01 	sts	0x0101, r25
    181a:	a0 93 02 01 	sts	0x0102, r26
    181e:	b0 93 03 01 	sts	0x0103, r27
    1822:	08 95       	ret

00001824 <strcpy_P>:
    1824:	fb 01       	movw	r30, r22
    1826:	dc 01       	movw	r26, r24
    1828:	05 90       	lpm	r0, Z+
    182a:	0d 92       	st	X+, r0
    182c:	00 20       	and	r0, r0
    182e:	e1 f7       	brne	.-8      	; 0x1828 <strcpy_P+0x4>
    1830:	08 95       	ret

00001832 <fdevopen>:
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	ec 01       	movw	r28, r24
    183c:	8b 01       	movw	r16, r22
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	31 f4       	brne	.+12     	; 0x184e <fdevopen+0x1c>
    1842:	61 15       	cp	r22, r1
    1844:	71 05       	cpc	r23, r1
    1846:	19 f4       	brne	.+6      	; 0x184e <fdevopen+0x1c>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	38 c0       	rjmp	.+112    	; 0x18be <fdevopen+0x8c>
    184e:	6e e0       	ldi	r22, 0x0E	; 14
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 77 0e 	call	0x1cee	; 0x1cee <calloc>
    185a:	fc 01       	movw	r30, r24
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	a1 f3       	breq	.-24     	; 0x1848 <fdevopen+0x16>
    1860:	80 e8       	ldi	r24, 0x80	; 128
    1862:	83 83       	std	Z+3, r24	; 0x03
    1864:	01 15       	cp	r16, r1
    1866:	11 05       	cpc	r17, r1
    1868:	71 f0       	breq	.+28     	; 0x1886 <fdevopen+0x54>
    186a:	13 87       	std	Z+11, r17	; 0x0b
    186c:	02 87       	std	Z+10, r16	; 0x0a
    186e:	81 e8       	ldi	r24, 0x81	; 129
    1870:	83 83       	std	Z+3, r24	; 0x03
    1872:	80 91 39 04 	lds	r24, 0x0439
    1876:	90 91 3a 04 	lds	r25, 0x043A
    187a:	89 2b       	or	r24, r25
    187c:	21 f4       	brne	.+8      	; 0x1886 <fdevopen+0x54>
    187e:	f0 93 3a 04 	sts	0x043A, r31
    1882:	e0 93 39 04 	sts	0x0439, r30
    1886:	20 97       	sbiw	r28, 0x00	; 0
    1888:	c9 f0       	breq	.+50     	; 0x18bc <fdevopen+0x8a>
    188a:	d1 87       	std	Z+9, r29	; 0x09
    188c:	c0 87       	std	Z+8, r28	; 0x08
    188e:	83 81       	ldd	r24, Z+3	; 0x03
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	83 83       	std	Z+3, r24	; 0x03
    1894:	80 91 3b 04 	lds	r24, 0x043B
    1898:	90 91 3c 04 	lds	r25, 0x043C
    189c:	89 2b       	or	r24, r25
    189e:	71 f4       	brne	.+28     	; 0x18bc <fdevopen+0x8a>
    18a0:	f0 93 3c 04 	sts	0x043C, r31
    18a4:	e0 93 3b 04 	sts	0x043B, r30
    18a8:	80 91 3d 04 	lds	r24, 0x043D
    18ac:	90 91 3e 04 	lds	r25, 0x043E
    18b0:	89 2b       	or	r24, r25
    18b2:	21 f4       	brne	.+8      	; 0x18bc <fdevopen+0x8a>
    18b4:	f0 93 3e 04 	sts	0x043E, r31
    18b8:	e0 93 3d 04 	sts	0x043D, r30
    18bc:	cf 01       	movw	r24, r30
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <printf>:
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e6       	ldi	r30, 0x6A	; 106
    18ce:	fc e0       	ldi	r31, 0x0C	; 12
    18d0:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__prologue_saves__+0x20>
    18d4:	fe 01       	movw	r30, r28
    18d6:	35 96       	adiw	r30, 0x05	; 5
    18d8:	61 91       	ld	r22, Z+
    18da:	71 91       	ld	r23, Z+
    18dc:	af 01       	movw	r20, r30
    18de:	80 91 3b 04 	lds	r24, 0x043B
    18e2:	90 91 3c 04 	lds	r25, 0x043C
    18e6:	0e 94 a5 0c 	call	0x194a	; 0x194a <vfprintf>
    18ea:	e2 e0       	ldi	r30, 0x02	; 2
    18ec:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__epilogue_restores__+0x20>

000018f0 <puts>:
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	e0 91 3b 04 	lds	r30, 0x043B
    18fc:	f0 91 3c 04 	lds	r31, 0x043C
    1900:	23 81       	ldd	r18, Z+3	; 0x03
    1902:	21 ff       	sbrs	r18, 1
    1904:	1b c0       	rjmp	.+54     	; 0x193c <puts+0x4c>
    1906:	ec 01       	movw	r28, r24
    1908:	00 e0       	ldi	r16, 0x00	; 0
    190a:	10 e0       	ldi	r17, 0x00	; 0
    190c:	89 91       	ld	r24, Y+
    190e:	60 91 3b 04 	lds	r22, 0x043B
    1912:	70 91 3c 04 	lds	r23, 0x043C
    1916:	db 01       	movw	r26, r22
    1918:	18 96       	adiw	r26, 0x08	; 8
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	19 97       	sbiw	r26, 0x09	; 9
    1920:	88 23       	and	r24, r24
    1922:	31 f0       	breq	.+12     	; 0x1930 <puts+0x40>
    1924:	09 95       	icall
    1926:	89 2b       	or	r24, r25
    1928:	89 f3       	breq	.-30     	; 0x190c <puts+0x1c>
    192a:	0f ef       	ldi	r16, 0xFF	; 255
    192c:	1f ef       	ldi	r17, 0xFF	; 255
    192e:	ee cf       	rjmp	.-36     	; 0x190c <puts+0x1c>
    1930:	8a e0       	ldi	r24, 0x0A	; 10
    1932:	09 95       	icall
    1934:	89 2b       	or	r24, r25
    1936:	11 f4       	brne	.+4      	; 0x193c <puts+0x4c>
    1938:	c8 01       	movw	r24, r16
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <puts+0x50>
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	9f ef       	ldi	r25, 0xFF	; 255
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <vfprintf>:
    194a:	ac e0       	ldi	r26, 0x0C	; 12
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	eb ea       	ldi	r30, 0xAB	; 171
    1950:	fc e0       	ldi	r31, 0x0C	; 12
    1952:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__prologue_saves__>
    1956:	7c 01       	movw	r14, r24
    1958:	6b 01       	movw	r12, r22
    195a:	8a 01       	movw	r16, r20
    195c:	fc 01       	movw	r30, r24
    195e:	17 82       	std	Z+7, r1	; 0x07
    1960:	16 82       	std	Z+6, r1	; 0x06
    1962:	83 81       	ldd	r24, Z+3	; 0x03
    1964:	81 ff       	sbrs	r24, 1
    1966:	bd c1       	rjmp	.+890    	; 0x1ce2 <vfprintf+0x398>
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	4c 01       	movw	r8, r24
    196e:	f7 01       	movw	r30, r14
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	f6 01       	movw	r30, r12
    1974:	93 fd       	sbrc	r25, 3
    1976:	85 91       	lpm	r24, Z+
    1978:	93 ff       	sbrs	r25, 3
    197a:	81 91       	ld	r24, Z+
    197c:	6f 01       	movw	r12, r30
    197e:	88 23       	and	r24, r24
    1980:	09 f4       	brne	.+2      	; 0x1984 <vfprintf+0x3a>
    1982:	ab c1       	rjmp	.+854    	; 0x1cda <vfprintf+0x390>
    1984:	85 32       	cpi	r24, 0x25	; 37
    1986:	39 f4       	brne	.+14     	; 0x1996 <vfprintf+0x4c>
    1988:	93 fd       	sbrc	r25, 3
    198a:	85 91       	lpm	r24, Z+
    198c:	93 ff       	sbrs	r25, 3
    198e:	81 91       	ld	r24, Z+
    1990:	6f 01       	movw	r12, r30
    1992:	85 32       	cpi	r24, 0x25	; 37
    1994:	29 f4       	brne	.+10     	; 0x19a0 <vfprintf+0x56>
    1996:	b7 01       	movw	r22, r14
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    199e:	e7 cf       	rjmp	.-50     	; 0x196e <vfprintf+0x24>
    19a0:	51 2c       	mov	r5, r1
    19a2:	31 2c       	mov	r3, r1
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	20 32       	cpi	r18, 0x20	; 32
    19a8:	a0 f4       	brcc	.+40     	; 0x19d2 <vfprintf+0x88>
    19aa:	8b 32       	cpi	r24, 0x2B	; 43
    19ac:	69 f0       	breq	.+26     	; 0x19c8 <vfprintf+0x7e>
    19ae:	30 f4       	brcc	.+12     	; 0x19bc <vfprintf+0x72>
    19b0:	80 32       	cpi	r24, 0x20	; 32
    19b2:	59 f0       	breq	.+22     	; 0x19ca <vfprintf+0x80>
    19b4:	83 32       	cpi	r24, 0x23	; 35
    19b6:	69 f4       	brne	.+26     	; 0x19d2 <vfprintf+0x88>
    19b8:	20 61       	ori	r18, 0x10	; 16
    19ba:	2c c0       	rjmp	.+88     	; 0x1a14 <vfprintf+0xca>
    19bc:	8d 32       	cpi	r24, 0x2D	; 45
    19be:	39 f0       	breq	.+14     	; 0x19ce <vfprintf+0x84>
    19c0:	80 33       	cpi	r24, 0x30	; 48
    19c2:	39 f4       	brne	.+14     	; 0x19d2 <vfprintf+0x88>
    19c4:	21 60       	ori	r18, 0x01	; 1
    19c6:	26 c0       	rjmp	.+76     	; 0x1a14 <vfprintf+0xca>
    19c8:	22 60       	ori	r18, 0x02	; 2
    19ca:	24 60       	ori	r18, 0x04	; 4
    19cc:	23 c0       	rjmp	.+70     	; 0x1a14 <vfprintf+0xca>
    19ce:	28 60       	ori	r18, 0x08	; 8
    19d0:	21 c0       	rjmp	.+66     	; 0x1a14 <vfprintf+0xca>
    19d2:	27 fd       	sbrc	r18, 7
    19d4:	27 c0       	rjmp	.+78     	; 0x1a24 <vfprintf+0xda>
    19d6:	30 ed       	ldi	r19, 0xD0	; 208
    19d8:	38 0f       	add	r19, r24
    19da:	3a 30       	cpi	r19, 0x0A	; 10
    19dc:	78 f4       	brcc	.+30     	; 0x19fc <vfprintf+0xb2>
    19de:	26 ff       	sbrs	r18, 6
    19e0:	06 c0       	rjmp	.+12     	; 0x19ee <vfprintf+0xa4>
    19e2:	fa e0       	ldi	r31, 0x0A	; 10
    19e4:	5f 9e       	mul	r5, r31
    19e6:	30 0d       	add	r19, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	53 2e       	mov	r5, r19
    19ec:	13 c0       	rjmp	.+38     	; 0x1a14 <vfprintf+0xca>
    19ee:	8a e0       	ldi	r24, 0x0A	; 10
    19f0:	38 9e       	mul	r3, r24
    19f2:	30 0d       	add	r19, r0
    19f4:	11 24       	eor	r1, r1
    19f6:	33 2e       	mov	r3, r19
    19f8:	20 62       	ori	r18, 0x20	; 32
    19fa:	0c c0       	rjmp	.+24     	; 0x1a14 <vfprintf+0xca>
    19fc:	8e 32       	cpi	r24, 0x2E	; 46
    19fe:	21 f4       	brne	.+8      	; 0x1a08 <vfprintf+0xbe>
    1a00:	26 fd       	sbrc	r18, 6
    1a02:	6b c1       	rjmp	.+726    	; 0x1cda <vfprintf+0x390>
    1a04:	20 64       	ori	r18, 0x40	; 64
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <vfprintf+0xca>
    1a08:	8c 36       	cpi	r24, 0x6C	; 108
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <vfprintf+0xc6>
    1a0c:	20 68       	ori	r18, 0x80	; 128
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <vfprintf+0xca>
    1a10:	88 36       	cpi	r24, 0x68	; 104
    1a12:	41 f4       	brne	.+16     	; 0x1a24 <vfprintf+0xda>
    1a14:	f6 01       	movw	r30, r12
    1a16:	93 fd       	sbrc	r25, 3
    1a18:	85 91       	lpm	r24, Z+
    1a1a:	93 ff       	sbrs	r25, 3
    1a1c:	81 91       	ld	r24, Z+
    1a1e:	6f 01       	movw	r12, r30
    1a20:	81 11       	cpse	r24, r1
    1a22:	c1 cf       	rjmp	.-126    	; 0x19a6 <vfprintf+0x5c>
    1a24:	98 2f       	mov	r25, r24
    1a26:	9f 7d       	andi	r25, 0xDF	; 223
    1a28:	95 54       	subi	r25, 0x45	; 69
    1a2a:	93 30       	cpi	r25, 0x03	; 3
    1a2c:	28 f4       	brcc	.+10     	; 0x1a38 <vfprintf+0xee>
    1a2e:	0c 5f       	subi	r16, 0xFC	; 252
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	ff e3       	ldi	r31, 0x3F	; 63
    1a34:	f9 83       	std	Y+1, r31	; 0x01
    1a36:	0d c0       	rjmp	.+26     	; 0x1a52 <vfprintf+0x108>
    1a38:	83 36       	cpi	r24, 0x63	; 99
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <vfprintf+0xfe>
    1a3c:	83 37       	cpi	r24, 0x73	; 115
    1a3e:	71 f0       	breq	.+28     	; 0x1a5c <vfprintf+0x112>
    1a40:	83 35       	cpi	r24, 0x53	; 83
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <vfprintf+0xfc>
    1a44:	5b c0       	rjmp	.+182    	; 0x1afc <vfprintf+0x1b2>
    1a46:	22 c0       	rjmp	.+68     	; 0x1a8c <vfprintf+0x142>
    1a48:	f8 01       	movw	r30, r16
    1a4a:	80 81       	ld	r24, Z
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	0e 5f       	subi	r16, 0xFE	; 254
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	44 24       	eor	r4, r4
    1a54:	43 94       	inc	r4
    1a56:	51 2c       	mov	r5, r1
    1a58:	54 01       	movw	r10, r8
    1a5a:	15 c0       	rjmp	.+42     	; 0x1a86 <vfprintf+0x13c>
    1a5c:	38 01       	movw	r6, r16
    1a5e:	f2 e0       	ldi	r31, 0x02	; 2
    1a60:	6f 0e       	add	r6, r31
    1a62:	71 1c       	adc	r7, r1
    1a64:	f8 01       	movw	r30, r16
    1a66:	a0 80       	ld	r10, Z
    1a68:	b1 80       	ldd	r11, Z+1	; 0x01
    1a6a:	26 ff       	sbrs	r18, 6
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <vfprintf+0x12a>
    1a6e:	65 2d       	mov	r22, r5
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <vfprintf+0x12e>
    1a74:	6f ef       	ldi	r22, 0xFF	; 255
    1a76:	7f ef       	ldi	r23, 0xFF	; 255
    1a78:	c5 01       	movw	r24, r10
    1a7a:	2c 87       	std	Y+12, r18	; 0x0c
    1a7c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <strnlen>
    1a80:	2c 01       	movw	r4, r24
    1a82:	83 01       	movw	r16, r6
    1a84:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a86:	2f 77       	andi	r18, 0x7F	; 127
    1a88:	22 2e       	mov	r2, r18
    1a8a:	17 c0       	rjmp	.+46     	; 0x1aba <vfprintf+0x170>
    1a8c:	38 01       	movw	r6, r16
    1a8e:	f2 e0       	ldi	r31, 0x02	; 2
    1a90:	6f 0e       	add	r6, r31
    1a92:	71 1c       	adc	r7, r1
    1a94:	f8 01       	movw	r30, r16
    1a96:	a0 80       	ld	r10, Z
    1a98:	b1 80       	ldd	r11, Z+1	; 0x01
    1a9a:	26 ff       	sbrs	r18, 6
    1a9c:	03 c0       	rjmp	.+6      	; 0x1aa4 <vfprintf+0x15a>
    1a9e:	65 2d       	mov	r22, r5
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x15e>
    1aa4:	6f ef       	ldi	r22, 0xFF	; 255
    1aa6:	7f ef       	ldi	r23, 0xFF	; 255
    1aa8:	c5 01       	movw	r24, r10
    1aaa:	2c 87       	std	Y+12, r18	; 0x0c
    1aac:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <strnlen_P>
    1ab0:	2c 01       	movw	r4, r24
    1ab2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ab4:	20 68       	ori	r18, 0x80	; 128
    1ab6:	22 2e       	mov	r2, r18
    1ab8:	83 01       	movw	r16, r6
    1aba:	23 fc       	sbrc	r2, 3
    1abc:	1b c0       	rjmp	.+54     	; 0x1af4 <vfprintf+0x1aa>
    1abe:	83 2d       	mov	r24, r3
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	48 16       	cp	r4, r24
    1ac4:	59 06       	cpc	r5, r25
    1ac6:	b0 f4       	brcc	.+44     	; 0x1af4 <vfprintf+0x1aa>
    1ac8:	b7 01       	movw	r22, r14
    1aca:	80 e2       	ldi	r24, 0x20	; 32
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1ad2:	3a 94       	dec	r3
    1ad4:	f4 cf       	rjmp	.-24     	; 0x1abe <vfprintf+0x174>
    1ad6:	f5 01       	movw	r30, r10
    1ad8:	27 fc       	sbrc	r2, 7
    1ada:	85 91       	lpm	r24, Z+
    1adc:	27 fe       	sbrs	r2, 7
    1ade:	81 91       	ld	r24, Z+
    1ae0:	5f 01       	movw	r10, r30
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1aea:	31 10       	cpse	r3, r1
    1aec:	3a 94       	dec	r3
    1aee:	f1 e0       	ldi	r31, 0x01	; 1
    1af0:	4f 1a       	sub	r4, r31
    1af2:	51 08       	sbc	r5, r1
    1af4:	41 14       	cp	r4, r1
    1af6:	51 04       	cpc	r5, r1
    1af8:	71 f7       	brne	.-36     	; 0x1ad6 <vfprintf+0x18c>
    1afa:	e5 c0       	rjmp	.+458    	; 0x1cc6 <vfprintf+0x37c>
    1afc:	84 36       	cpi	r24, 0x64	; 100
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <vfprintf+0x1ba>
    1b00:	89 36       	cpi	r24, 0x69	; 105
    1b02:	39 f5       	brne	.+78     	; 0x1b52 <vfprintf+0x208>
    1b04:	f8 01       	movw	r30, r16
    1b06:	27 ff       	sbrs	r18, 7
    1b08:	07 c0       	rjmp	.+14     	; 0x1b18 <vfprintf+0x1ce>
    1b0a:	60 81       	ld	r22, Z
    1b0c:	71 81       	ldd	r23, Z+1	; 0x01
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	93 81       	ldd	r25, Z+3	; 0x03
    1b12:	0c 5f       	subi	r16, 0xFC	; 252
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	08 c0       	rjmp	.+16     	; 0x1b28 <vfprintf+0x1de>
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	88 27       	eor	r24, r24
    1b1e:	77 fd       	sbrc	r23, 7
    1b20:	80 95       	com	r24
    1b22:	98 2f       	mov	r25, r24
    1b24:	0e 5f       	subi	r16, 0xFE	; 254
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	2f 76       	andi	r18, 0x6F	; 111
    1b2a:	b2 2e       	mov	r11, r18
    1b2c:	97 ff       	sbrs	r25, 7
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <vfprintf+0x1f8>
    1b30:	90 95       	com	r25
    1b32:	80 95       	com	r24
    1b34:	70 95       	com	r23
    1b36:	61 95       	neg	r22
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	20 68       	ori	r18, 0x80	; 128
    1b40:	b2 2e       	mov	r11, r18
    1b42:	2a e0       	ldi	r18, 0x0A	; 10
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	a4 01       	movw	r20, r8
    1b48:	0e 94 09 10 	call	0x2012	; 0x2012 <__ultoa_invert>
    1b4c:	a8 2e       	mov	r10, r24
    1b4e:	a8 18       	sub	r10, r8
    1b50:	44 c0       	rjmp	.+136    	; 0x1bda <vfprintf+0x290>
    1b52:	85 37       	cpi	r24, 0x75	; 117
    1b54:	29 f4       	brne	.+10     	; 0x1b60 <vfprintf+0x216>
    1b56:	2f 7e       	andi	r18, 0xEF	; 239
    1b58:	b2 2e       	mov	r11, r18
    1b5a:	2a e0       	ldi	r18, 0x0A	; 10
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	25 c0       	rjmp	.+74     	; 0x1baa <vfprintf+0x260>
    1b60:	f2 2f       	mov	r31, r18
    1b62:	f9 7f       	andi	r31, 0xF9	; 249
    1b64:	bf 2e       	mov	r11, r31
    1b66:	8f 36       	cpi	r24, 0x6F	; 111
    1b68:	c1 f0       	breq	.+48     	; 0x1b9a <vfprintf+0x250>
    1b6a:	18 f4       	brcc	.+6      	; 0x1b72 <vfprintf+0x228>
    1b6c:	88 35       	cpi	r24, 0x58	; 88
    1b6e:	79 f0       	breq	.+30     	; 0x1b8e <vfprintf+0x244>
    1b70:	b4 c0       	rjmp	.+360    	; 0x1cda <vfprintf+0x390>
    1b72:	80 37       	cpi	r24, 0x70	; 112
    1b74:	19 f0       	breq	.+6      	; 0x1b7c <vfprintf+0x232>
    1b76:	88 37       	cpi	r24, 0x78	; 120
    1b78:	21 f0       	breq	.+8      	; 0x1b82 <vfprintf+0x238>
    1b7a:	af c0       	rjmp	.+350    	; 0x1cda <vfprintf+0x390>
    1b7c:	2f 2f       	mov	r18, r31
    1b7e:	20 61       	ori	r18, 0x10	; 16
    1b80:	b2 2e       	mov	r11, r18
    1b82:	b4 fe       	sbrs	r11, 4
    1b84:	0d c0       	rjmp	.+26     	; 0x1ba0 <vfprintf+0x256>
    1b86:	8b 2d       	mov	r24, r11
    1b88:	84 60       	ori	r24, 0x04	; 4
    1b8a:	b8 2e       	mov	r11, r24
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <vfprintf+0x256>
    1b8e:	24 ff       	sbrs	r18, 4
    1b90:	0a c0       	rjmp	.+20     	; 0x1ba6 <vfprintf+0x25c>
    1b92:	9f 2f       	mov	r25, r31
    1b94:	96 60       	ori	r25, 0x06	; 6
    1b96:	b9 2e       	mov	r11, r25
    1b98:	06 c0       	rjmp	.+12     	; 0x1ba6 <vfprintf+0x25c>
    1b9a:	28 e0       	ldi	r18, 0x08	; 8
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	05 c0       	rjmp	.+10     	; 0x1baa <vfprintf+0x260>
    1ba0:	20 e1       	ldi	r18, 0x10	; 16
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <vfprintf+0x260>
    1ba6:	20 e1       	ldi	r18, 0x10	; 16
    1ba8:	32 e0       	ldi	r19, 0x02	; 2
    1baa:	f8 01       	movw	r30, r16
    1bac:	b7 fe       	sbrs	r11, 7
    1bae:	07 c0       	rjmp	.+14     	; 0x1bbe <vfprintf+0x274>
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	0c 5f       	subi	r16, 0xFC	; 252
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <vfprintf+0x280>
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 5f       	subi	r16, 0xFE	; 254
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bca:	a4 01       	movw	r20, r8
    1bcc:	0e 94 09 10 	call	0x2012	; 0x2012 <__ultoa_invert>
    1bd0:	a8 2e       	mov	r10, r24
    1bd2:	a8 18       	sub	r10, r8
    1bd4:	fb 2d       	mov	r31, r11
    1bd6:	ff 77       	andi	r31, 0x7F	; 127
    1bd8:	bf 2e       	mov	r11, r31
    1bda:	b6 fe       	sbrs	r11, 6
    1bdc:	0b c0       	rjmp	.+22     	; 0x1bf4 <vfprintf+0x2aa>
    1bde:	2b 2d       	mov	r18, r11
    1be0:	2e 7f       	andi	r18, 0xFE	; 254
    1be2:	a5 14       	cp	r10, r5
    1be4:	50 f4       	brcc	.+20     	; 0x1bfa <vfprintf+0x2b0>
    1be6:	b4 fe       	sbrs	r11, 4
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <vfprintf+0x2b4>
    1bea:	b2 fc       	sbrc	r11, 2
    1bec:	08 c0       	rjmp	.+16     	; 0x1bfe <vfprintf+0x2b4>
    1bee:	2b 2d       	mov	r18, r11
    1bf0:	2e 7e       	andi	r18, 0xEE	; 238
    1bf2:	05 c0       	rjmp	.+10     	; 0x1bfe <vfprintf+0x2b4>
    1bf4:	7a 2c       	mov	r7, r10
    1bf6:	2b 2d       	mov	r18, r11
    1bf8:	03 c0       	rjmp	.+6      	; 0x1c00 <vfprintf+0x2b6>
    1bfa:	7a 2c       	mov	r7, r10
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <vfprintf+0x2b6>
    1bfe:	75 2c       	mov	r7, r5
    1c00:	24 ff       	sbrs	r18, 4
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <vfprintf+0x2d4>
    1c04:	fe 01       	movw	r30, r28
    1c06:	ea 0d       	add	r30, r10
    1c08:	f1 1d       	adc	r31, r1
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 33       	cpi	r24, 0x30	; 48
    1c0e:	11 f4       	brne	.+4      	; 0x1c14 <vfprintf+0x2ca>
    1c10:	29 7e       	andi	r18, 0xE9	; 233
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <vfprintf+0x2dc>
    1c14:	22 ff       	sbrs	r18, 2
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x2da>
    1c18:	73 94       	inc	r7
    1c1a:	73 94       	inc	r7
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <vfprintf+0x2dc>
    1c1e:	82 2f       	mov	r24, r18
    1c20:	86 78       	andi	r24, 0x86	; 134
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <vfprintf+0x2dc>
    1c24:	73 94       	inc	r7
    1c26:	23 fd       	sbrc	r18, 3
    1c28:	13 c0       	rjmp	.+38     	; 0x1c50 <vfprintf+0x306>
    1c2a:	20 ff       	sbrs	r18, 0
    1c2c:	06 c0       	rjmp	.+12     	; 0x1c3a <vfprintf+0x2f0>
    1c2e:	5a 2c       	mov	r5, r10
    1c30:	73 14       	cp	r7, r3
    1c32:	18 f4       	brcc	.+6      	; 0x1c3a <vfprintf+0x2f0>
    1c34:	53 0c       	add	r5, r3
    1c36:	57 18       	sub	r5, r7
    1c38:	73 2c       	mov	r7, r3
    1c3a:	73 14       	cp	r7, r3
    1c3c:	68 f4       	brcc	.+26     	; 0x1c58 <vfprintf+0x30e>
    1c3e:	b7 01       	movw	r22, r14
    1c40:	80 e2       	ldi	r24, 0x20	; 32
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	2c 87       	std	Y+12, r18	; 0x0c
    1c46:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1c4a:	73 94       	inc	r7
    1c4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c4e:	f5 cf       	rjmp	.-22     	; 0x1c3a <vfprintf+0x2f0>
    1c50:	73 14       	cp	r7, r3
    1c52:	10 f4       	brcc	.+4      	; 0x1c58 <vfprintf+0x30e>
    1c54:	37 18       	sub	r3, r7
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <vfprintf+0x310>
    1c58:	31 2c       	mov	r3, r1
    1c5a:	24 ff       	sbrs	r18, 4
    1c5c:	12 c0       	rjmp	.+36     	; 0x1c82 <vfprintf+0x338>
    1c5e:	b7 01       	movw	r22, r14
    1c60:	80 e3       	ldi	r24, 0x30	; 48
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	2c 87       	std	Y+12, r18	; 0x0c
    1c66:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1c6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c6c:	22 ff       	sbrs	r18, 2
    1c6e:	17 c0       	rjmp	.+46     	; 0x1c9e <vfprintf+0x354>
    1c70:	21 ff       	sbrs	r18, 1
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <vfprintf+0x330>
    1c74:	88 e5       	ldi	r24, 0x58	; 88
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <vfprintf+0x334>
    1c7a:	88 e7       	ldi	r24, 0x78	; 120
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	b7 01       	movw	r22, r14
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <vfprintf+0x350>
    1c82:	82 2f       	mov	r24, r18
    1c84:	86 78       	andi	r24, 0x86	; 134
    1c86:	59 f0       	breq	.+22     	; 0x1c9e <vfprintf+0x354>
    1c88:	21 fd       	sbrc	r18, 1
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <vfprintf+0x346>
    1c8c:	80 e2       	ldi	r24, 0x20	; 32
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <vfprintf+0x348>
    1c90:	8b e2       	ldi	r24, 0x2B	; 43
    1c92:	27 fd       	sbrc	r18, 7
    1c94:	8d e2       	ldi	r24, 0x2D	; 45
    1c96:	b7 01       	movw	r22, r14
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1c9e:	a5 14       	cp	r10, r5
    1ca0:	38 f4       	brcc	.+14     	; 0x1cb0 <vfprintf+0x366>
    1ca2:	b7 01       	movw	r22, r14
    1ca4:	80 e3       	ldi	r24, 0x30	; 48
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1cac:	5a 94       	dec	r5
    1cae:	f7 cf       	rjmp	.-18     	; 0x1c9e <vfprintf+0x354>
    1cb0:	aa 94       	dec	r10
    1cb2:	f4 01       	movw	r30, r8
    1cb4:	ea 0d       	add	r30, r10
    1cb6:	f1 1d       	adc	r31, r1
    1cb8:	80 81       	ld	r24, Z
    1cba:	b7 01       	movw	r22, r14
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1cc2:	a1 10       	cpse	r10, r1
    1cc4:	f5 cf       	rjmp	.-22     	; 0x1cb0 <vfprintf+0x366>
    1cc6:	33 20       	and	r3, r3
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <vfprintf+0x382>
    1cca:	51 ce       	rjmp	.-862    	; 0x196e <vfprintf+0x24>
    1ccc:	b7 01       	movw	r22, r14
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <fputc>
    1cd6:	3a 94       	dec	r3
    1cd8:	f6 cf       	rjmp	.-20     	; 0x1cc6 <vfprintf+0x37c>
    1cda:	f7 01       	movw	r30, r14
    1cdc:	86 81       	ldd	r24, Z+6	; 0x06
    1cde:	97 81       	ldd	r25, Z+7	; 0x07
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <vfprintf+0x39c>
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
    1ce6:	2c 96       	adiw	r28, 0x0c	; 12
    1ce8:	e2 e1       	ldi	r30, 0x12	; 18
    1cea:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__epilogue_restores__>

00001cee <calloc>:
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	86 9f       	mul	r24, r22
    1cf8:	80 01       	movw	r16, r0
    1cfa:	87 9f       	mul	r24, r23
    1cfc:	10 0d       	add	r17, r0
    1cfe:	96 9f       	mul	r25, r22
    1d00:	10 0d       	add	r17, r0
    1d02:	11 24       	eor	r1, r1
    1d04:	c8 01       	movw	r24, r16
    1d06:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <malloc>
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	29 f0       	breq	.+10     	; 0x1d1a <calloc+0x2c>
    1d10:	a8 01       	movw	r20, r16
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <memset>
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	08 95       	ret

00001d26 <malloc>:
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	10 f4       	brcc	.+4      	; 0x1d34 <malloc+0xe>
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	e0 91 41 04 	lds	r30, 0x0441
    1d38:	f0 91 42 04 	lds	r31, 0x0442
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	a0 e0       	ldi	r26, 0x00	; 0
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	30 97       	sbiw	r30, 0x00	; 0
    1d46:	39 f1       	breq	.+78     	; 0x1d96 <malloc+0x70>
    1d48:	40 81       	ld	r20, Z
    1d4a:	51 81       	ldd	r21, Z+1	; 0x01
    1d4c:	48 17       	cp	r20, r24
    1d4e:	59 07       	cpc	r21, r25
    1d50:	b8 f0       	brcs	.+46     	; 0x1d80 <malloc+0x5a>
    1d52:	48 17       	cp	r20, r24
    1d54:	59 07       	cpc	r21, r25
    1d56:	71 f4       	brne	.+28     	; 0x1d74 <malloc+0x4e>
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	10 97       	sbiw	r26, 0x00	; 0
    1d5e:	29 f0       	breq	.+10     	; 0x1d6a <malloc+0x44>
    1d60:	13 96       	adiw	r26, 0x03	; 3
    1d62:	9c 93       	st	X, r25
    1d64:	8e 93       	st	-X, r24
    1d66:	12 97       	sbiw	r26, 0x02	; 2
    1d68:	2c c0       	rjmp	.+88     	; 0x1dc2 <malloc+0x9c>
    1d6a:	90 93 42 04 	sts	0x0442, r25
    1d6e:	80 93 41 04 	sts	0x0441, r24
    1d72:	27 c0       	rjmp	.+78     	; 0x1dc2 <malloc+0x9c>
    1d74:	21 15       	cp	r18, r1
    1d76:	31 05       	cpc	r19, r1
    1d78:	31 f0       	breq	.+12     	; 0x1d86 <malloc+0x60>
    1d7a:	42 17       	cp	r20, r18
    1d7c:	53 07       	cpc	r21, r19
    1d7e:	18 f0       	brcs	.+6      	; 0x1d86 <malloc+0x60>
    1d80:	a9 01       	movw	r20, r18
    1d82:	db 01       	movw	r26, r22
    1d84:	01 c0       	rjmp	.+2      	; 0x1d88 <malloc+0x62>
    1d86:	ef 01       	movw	r28, r30
    1d88:	9a 01       	movw	r18, r20
    1d8a:	bd 01       	movw	r22, r26
    1d8c:	df 01       	movw	r26, r30
    1d8e:	02 80       	ldd	r0, Z+2	; 0x02
    1d90:	f3 81       	ldd	r31, Z+3	; 0x03
    1d92:	e0 2d       	mov	r30, r0
    1d94:	d7 cf       	rjmp	.-82     	; 0x1d44 <malloc+0x1e>
    1d96:	21 15       	cp	r18, r1
    1d98:	31 05       	cpc	r19, r1
    1d9a:	f9 f0       	breq	.+62     	; 0x1dda <malloc+0xb4>
    1d9c:	28 1b       	sub	r18, r24
    1d9e:	39 0b       	sbc	r19, r25
    1da0:	24 30       	cpi	r18, 0x04	; 4
    1da2:	31 05       	cpc	r19, r1
    1da4:	80 f4       	brcc	.+32     	; 0x1dc6 <malloc+0xa0>
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	9b 81       	ldd	r25, Y+3	; 0x03
    1daa:	61 15       	cp	r22, r1
    1dac:	71 05       	cpc	r23, r1
    1dae:	21 f0       	breq	.+8      	; 0x1db8 <malloc+0x92>
    1db0:	fb 01       	movw	r30, r22
    1db2:	93 83       	std	Z+3, r25	; 0x03
    1db4:	82 83       	std	Z+2, r24	; 0x02
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <malloc+0x9a>
    1db8:	90 93 42 04 	sts	0x0442, r25
    1dbc:	80 93 41 04 	sts	0x0441, r24
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	32 96       	adiw	r30, 0x02	; 2
    1dc4:	44 c0       	rjmp	.+136    	; 0x1e4e <malloc+0x128>
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	81 93       	st	Z+, r24
    1dce:	91 93       	st	Z+, r25
    1dd0:	22 50       	subi	r18, 0x02	; 2
    1dd2:	31 09       	sbc	r19, r1
    1dd4:	39 83       	std	Y+1, r19	; 0x01
    1dd6:	28 83       	st	Y, r18
    1dd8:	3a c0       	rjmp	.+116    	; 0x1e4e <malloc+0x128>
    1dda:	20 91 3f 04 	lds	r18, 0x043F
    1dde:	30 91 40 04 	lds	r19, 0x0440
    1de2:	23 2b       	or	r18, r19
    1de4:	41 f4       	brne	.+16     	; 0x1df6 <malloc+0xd0>
    1de6:	20 91 06 01 	lds	r18, 0x0106
    1dea:	30 91 07 01 	lds	r19, 0x0107
    1dee:	30 93 40 04 	sts	0x0440, r19
    1df2:	20 93 3f 04 	sts	0x043F, r18
    1df6:	20 91 04 01 	lds	r18, 0x0104
    1dfa:	30 91 05 01 	lds	r19, 0x0105
    1dfe:	21 15       	cp	r18, r1
    1e00:	31 05       	cpc	r19, r1
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <malloc+0xee>
    1e04:	2d b7       	in	r18, 0x3d	; 61
    1e06:	3e b7       	in	r19, 0x3e	; 62
    1e08:	40 91 08 01 	lds	r20, 0x0108
    1e0c:	50 91 09 01 	lds	r21, 0x0109
    1e10:	24 1b       	sub	r18, r20
    1e12:	35 0b       	sbc	r19, r21
    1e14:	e0 91 3f 04 	lds	r30, 0x043F
    1e18:	f0 91 40 04 	lds	r31, 0x0440
    1e1c:	e2 17       	cp	r30, r18
    1e1e:	f3 07       	cpc	r31, r19
    1e20:	a0 f4       	brcc	.+40     	; 0x1e4a <malloc+0x124>
    1e22:	2e 1b       	sub	r18, r30
    1e24:	3f 0b       	sbc	r19, r31
    1e26:	28 17       	cp	r18, r24
    1e28:	39 07       	cpc	r19, r25
    1e2a:	78 f0       	brcs	.+30     	; 0x1e4a <malloc+0x124>
    1e2c:	ac 01       	movw	r20, r24
    1e2e:	4e 5f       	subi	r20, 0xFE	; 254
    1e30:	5f 4f       	sbci	r21, 0xFF	; 255
    1e32:	24 17       	cp	r18, r20
    1e34:	35 07       	cpc	r19, r21
    1e36:	48 f0       	brcs	.+18     	; 0x1e4a <malloc+0x124>
    1e38:	4e 0f       	add	r20, r30
    1e3a:	5f 1f       	adc	r21, r31
    1e3c:	50 93 40 04 	sts	0x0440, r21
    1e40:	40 93 3f 04 	sts	0x043F, r20
    1e44:	81 93       	st	Z+, r24
    1e46:	91 93       	st	Z+, r25
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <malloc+0x128>
    1e4a:	e0 e0       	ldi	r30, 0x00	; 0
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	cf 01       	movw	r24, r30
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <free>:
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <free+0xa>
    1e5e:	87 c0       	rjmp	.+270    	; 0x1f6e <free+0x118>
    1e60:	fc 01       	movw	r30, r24
    1e62:	32 97       	sbiw	r30, 0x02	; 2
    1e64:	13 82       	std	Z+3, r1	; 0x03
    1e66:	12 82       	std	Z+2, r1	; 0x02
    1e68:	c0 91 41 04 	lds	r28, 0x0441
    1e6c:	d0 91 42 04 	lds	r29, 0x0442
    1e70:	20 97       	sbiw	r28, 0x00	; 0
    1e72:	81 f4       	brne	.+32     	; 0x1e94 <free+0x3e>
    1e74:	20 81       	ld	r18, Z
    1e76:	31 81       	ldd	r19, Z+1	; 0x01
    1e78:	28 0f       	add	r18, r24
    1e7a:	39 1f       	adc	r19, r25
    1e7c:	80 91 3f 04 	lds	r24, 0x043F
    1e80:	90 91 40 04 	lds	r25, 0x0440
    1e84:	82 17       	cp	r24, r18
    1e86:	93 07       	cpc	r25, r19
    1e88:	79 f5       	brne	.+94     	; 0x1ee8 <free+0x92>
    1e8a:	f0 93 40 04 	sts	0x0440, r31
    1e8e:	e0 93 3f 04 	sts	0x043F, r30
    1e92:	6d c0       	rjmp	.+218    	; 0x1f6e <free+0x118>
    1e94:	de 01       	movw	r26, r28
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	ae 17       	cp	r26, r30
    1e9c:	bf 07       	cpc	r27, r31
    1e9e:	50 f4       	brcc	.+20     	; 0x1eb4 <free+0x5e>
    1ea0:	12 96       	adiw	r26, 0x02	; 2
    1ea2:	4d 91       	ld	r20, X+
    1ea4:	5c 91       	ld	r21, X
    1ea6:	13 97       	sbiw	r26, 0x03	; 3
    1ea8:	9d 01       	movw	r18, r26
    1eaa:	41 15       	cp	r20, r1
    1eac:	51 05       	cpc	r21, r1
    1eae:	09 f1       	breq	.+66     	; 0x1ef2 <free+0x9c>
    1eb0:	da 01       	movw	r26, r20
    1eb2:	f3 cf       	rjmp	.-26     	; 0x1e9a <free+0x44>
    1eb4:	b3 83       	std	Z+3, r27	; 0x03
    1eb6:	a2 83       	std	Z+2, r26	; 0x02
    1eb8:	40 81       	ld	r20, Z
    1eba:	51 81       	ldd	r21, Z+1	; 0x01
    1ebc:	84 0f       	add	r24, r20
    1ebe:	95 1f       	adc	r25, r21
    1ec0:	8a 17       	cp	r24, r26
    1ec2:	9b 07       	cpc	r25, r27
    1ec4:	71 f4       	brne	.+28     	; 0x1ee2 <free+0x8c>
    1ec6:	8d 91       	ld	r24, X+
    1ec8:	9c 91       	ld	r25, X
    1eca:	11 97       	sbiw	r26, 0x01	; 1
    1ecc:	84 0f       	add	r24, r20
    1ece:	95 1f       	adc	r25, r21
    1ed0:	02 96       	adiw	r24, 0x02	; 2
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
    1ed6:	12 96       	adiw	r26, 0x02	; 2
    1ed8:	8d 91       	ld	r24, X+
    1eda:	9c 91       	ld	r25, X
    1edc:	13 97       	sbiw	r26, 0x03	; 3
    1ede:	93 83       	std	Z+3, r25	; 0x03
    1ee0:	82 83       	std	Z+2, r24	; 0x02
    1ee2:	21 15       	cp	r18, r1
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	29 f4       	brne	.+10     	; 0x1ef2 <free+0x9c>
    1ee8:	f0 93 42 04 	sts	0x0442, r31
    1eec:	e0 93 41 04 	sts	0x0441, r30
    1ef0:	3e c0       	rjmp	.+124    	; 0x1f6e <free+0x118>
    1ef2:	d9 01       	movw	r26, r18
    1ef4:	13 96       	adiw	r26, 0x03	; 3
    1ef6:	fc 93       	st	X, r31
    1ef8:	ee 93       	st	-X, r30
    1efa:	12 97       	sbiw	r26, 0x02	; 2
    1efc:	4d 91       	ld	r20, X+
    1efe:	5d 91       	ld	r21, X+
    1f00:	a4 0f       	add	r26, r20
    1f02:	b5 1f       	adc	r27, r21
    1f04:	ea 17       	cp	r30, r26
    1f06:	fb 07       	cpc	r31, r27
    1f08:	79 f4       	brne	.+30     	; 0x1f28 <free+0xd2>
    1f0a:	80 81       	ld	r24, Z
    1f0c:	91 81       	ldd	r25, Z+1	; 0x01
    1f0e:	84 0f       	add	r24, r20
    1f10:	95 1f       	adc	r25, r21
    1f12:	02 96       	adiw	r24, 0x02	; 2
    1f14:	d9 01       	movw	r26, r18
    1f16:	11 96       	adiw	r26, 0x01	; 1
    1f18:	9c 93       	st	X, r25
    1f1a:	8e 93       	st	-X, r24
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	13 96       	adiw	r26, 0x03	; 3
    1f22:	9c 93       	st	X, r25
    1f24:	8e 93       	st	-X, r24
    1f26:	12 97       	sbiw	r26, 0x02	; 2
    1f28:	e0 e0       	ldi	r30, 0x00	; 0
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	19 f0       	breq	.+6      	; 0x1f3a <free+0xe4>
    1f34:	fe 01       	movw	r30, r28
    1f36:	ec 01       	movw	r28, r24
    1f38:	f9 cf       	rjmp	.-14     	; 0x1f2c <free+0xd6>
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	02 96       	adiw	r24, 0x02	; 2
    1f3e:	28 81       	ld	r18, Y
    1f40:	39 81       	ldd	r19, Y+1	; 0x01
    1f42:	82 0f       	add	r24, r18
    1f44:	93 1f       	adc	r25, r19
    1f46:	20 91 3f 04 	lds	r18, 0x043F
    1f4a:	30 91 40 04 	lds	r19, 0x0440
    1f4e:	28 17       	cp	r18, r24
    1f50:	39 07       	cpc	r19, r25
    1f52:	69 f4       	brne	.+26     	; 0x1f6e <free+0x118>
    1f54:	30 97       	sbiw	r30, 0x00	; 0
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <free+0x10c>
    1f58:	10 92 42 04 	sts	0x0442, r1
    1f5c:	10 92 41 04 	sts	0x0441, r1
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <free+0x110>
    1f62:	13 82       	std	Z+3, r1	; 0x03
    1f64:	12 82       	std	Z+2, r1	; 0x02
    1f66:	d0 93 40 04 	sts	0x0440, r29
    1f6a:	c0 93 3f 04 	sts	0x043F, r28
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	08 95       	ret

00001f74 <strnlen_P>:
    1f74:	fc 01       	movw	r30, r24
    1f76:	05 90       	lpm	r0, Z+
    1f78:	61 50       	subi	r22, 0x01	; 1
    1f7a:	70 40       	sbci	r23, 0x00	; 0
    1f7c:	01 10       	cpse	r0, r1
    1f7e:	d8 f7       	brcc	.-10     	; 0x1f76 <strnlen_P+0x2>
    1f80:	80 95       	com	r24
    1f82:	90 95       	com	r25
    1f84:	8e 0f       	add	r24, r30
    1f86:	9f 1f       	adc	r25, r31
    1f88:	08 95       	ret

00001f8a <memset>:
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <memset+0x6>
    1f8e:	6d 93       	st	X+, r22
    1f90:	41 50       	subi	r20, 0x01	; 1
    1f92:	50 40       	sbci	r21, 0x00	; 0
    1f94:	e0 f7       	brcc	.-8      	; 0x1f8e <memset+0x4>
    1f96:	08 95       	ret

00001f98 <strnlen>:
    1f98:	fc 01       	movw	r30, r24
    1f9a:	61 50       	subi	r22, 0x01	; 1
    1f9c:	70 40       	sbci	r23, 0x00	; 0
    1f9e:	01 90       	ld	r0, Z+
    1fa0:	01 10       	cpse	r0, r1
    1fa2:	d8 f7       	brcc	.-10     	; 0x1f9a <strnlen+0x2>
    1fa4:	80 95       	com	r24
    1fa6:	90 95       	com	r25
    1fa8:	8e 0f       	add	r24, r30
    1faa:	9f 1f       	adc	r25, r31
    1fac:	08 95       	ret

00001fae <fputc>:
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	18 2f       	mov	r17, r24
    1fb8:	09 2f       	mov	r16, r25
    1fba:	eb 01       	movw	r28, r22
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	81 fd       	sbrc	r24, 1
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <fputc+0x1a>
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	9f ef       	ldi	r25, 0xFF	; 255
    1fc6:	20 c0       	rjmp	.+64     	; 0x2008 <fputc+0x5a>
    1fc8:	82 ff       	sbrs	r24, 2
    1fca:	10 c0       	rjmp	.+32     	; 0x1fec <fputc+0x3e>
    1fcc:	4e 81       	ldd	r20, Y+6	; 0x06
    1fce:	5f 81       	ldd	r21, Y+7	; 0x07
    1fd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd4:	42 17       	cp	r20, r18
    1fd6:	53 07       	cpc	r21, r19
    1fd8:	7c f4       	brge	.+30     	; 0x1ff8 <fputc+0x4a>
    1fda:	e8 81       	ld	r30, Y
    1fdc:	f9 81       	ldd	r31, Y+1	; 0x01
    1fde:	9f 01       	movw	r18, r30
    1fe0:	2f 5f       	subi	r18, 0xFF	; 255
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	39 83       	std	Y+1, r19	; 0x01
    1fe6:	28 83       	st	Y, r18
    1fe8:	10 83       	st	Z, r17
    1fea:	06 c0       	rjmp	.+12     	; 0x1ff8 <fputc+0x4a>
    1fec:	e8 85       	ldd	r30, Y+8	; 0x08
    1fee:	f9 85       	ldd	r31, Y+9	; 0x09
    1ff0:	81 2f       	mov	r24, r17
    1ff2:	09 95       	icall
    1ff4:	89 2b       	or	r24, r25
    1ff6:	29 f7       	brne	.-54     	; 0x1fc2 <fputc+0x14>
    1ff8:	2e 81       	ldd	r18, Y+6	; 0x06
    1ffa:	3f 81       	ldd	r19, Y+7	; 0x07
    1ffc:	2f 5f       	subi	r18, 0xFF	; 255
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	3f 83       	std	Y+7, r19	; 0x07
    2002:	2e 83       	std	Y+6, r18	; 0x06
    2004:	81 2f       	mov	r24, r17
    2006:	90 2f       	mov	r25, r16
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	08 95       	ret

00002012 <__ultoa_invert>:
    2012:	fa 01       	movw	r30, r20
    2014:	aa 27       	eor	r26, r26
    2016:	28 30       	cpi	r18, 0x08	; 8
    2018:	51 f1       	breq	.+84     	; 0x206e <__ultoa_invert+0x5c>
    201a:	20 31       	cpi	r18, 0x10	; 16
    201c:	81 f1       	breq	.+96     	; 0x207e <__ultoa_invert+0x6c>
    201e:	e8 94       	clt
    2020:	6f 93       	push	r22
    2022:	6e 7f       	andi	r22, 0xFE	; 254
    2024:	6e 5f       	subi	r22, 0xFE	; 254
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	8f 4f       	sbci	r24, 0xFF	; 255
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	af 4f       	sbci	r26, 0xFF	; 255
    202e:	b1 e0       	ldi	r27, 0x01	; 1
    2030:	3e d0       	rcall	.+124    	; 0x20ae <__ultoa_invert+0x9c>
    2032:	b4 e0       	ldi	r27, 0x04	; 4
    2034:	3c d0       	rcall	.+120    	; 0x20ae <__ultoa_invert+0x9c>
    2036:	67 0f       	add	r22, r23
    2038:	78 1f       	adc	r23, r24
    203a:	89 1f       	adc	r24, r25
    203c:	9a 1f       	adc	r25, r26
    203e:	a1 1d       	adc	r26, r1
    2040:	68 0f       	add	r22, r24
    2042:	79 1f       	adc	r23, r25
    2044:	8a 1f       	adc	r24, r26
    2046:	91 1d       	adc	r25, r1
    2048:	a1 1d       	adc	r26, r1
    204a:	6a 0f       	add	r22, r26
    204c:	71 1d       	adc	r23, r1
    204e:	81 1d       	adc	r24, r1
    2050:	91 1d       	adc	r25, r1
    2052:	a1 1d       	adc	r26, r1
    2054:	20 d0       	rcall	.+64     	; 0x2096 <__ultoa_invert+0x84>
    2056:	09 f4       	brne	.+2      	; 0x205a <__ultoa_invert+0x48>
    2058:	68 94       	set
    205a:	3f 91       	pop	r19
    205c:	2a e0       	ldi	r18, 0x0A	; 10
    205e:	26 9f       	mul	r18, r22
    2060:	11 24       	eor	r1, r1
    2062:	30 19       	sub	r19, r0
    2064:	30 5d       	subi	r19, 0xD0	; 208
    2066:	31 93       	st	Z+, r19
    2068:	de f6       	brtc	.-74     	; 0x2020 <__ultoa_invert+0xe>
    206a:	cf 01       	movw	r24, r30
    206c:	08 95       	ret
    206e:	46 2f       	mov	r20, r22
    2070:	47 70       	andi	r20, 0x07	; 7
    2072:	40 5d       	subi	r20, 0xD0	; 208
    2074:	41 93       	st	Z+, r20
    2076:	b3 e0       	ldi	r27, 0x03	; 3
    2078:	0f d0       	rcall	.+30     	; 0x2098 <__ultoa_invert+0x86>
    207a:	c9 f7       	brne	.-14     	; 0x206e <__ultoa_invert+0x5c>
    207c:	f6 cf       	rjmp	.-20     	; 0x206a <__ultoa_invert+0x58>
    207e:	46 2f       	mov	r20, r22
    2080:	4f 70       	andi	r20, 0x0F	; 15
    2082:	40 5d       	subi	r20, 0xD0	; 208
    2084:	4a 33       	cpi	r20, 0x3A	; 58
    2086:	18 f0       	brcs	.+6      	; 0x208e <__ultoa_invert+0x7c>
    2088:	49 5d       	subi	r20, 0xD9	; 217
    208a:	31 fd       	sbrc	r19, 1
    208c:	40 52       	subi	r20, 0x20	; 32
    208e:	41 93       	st	Z+, r20
    2090:	02 d0       	rcall	.+4      	; 0x2096 <__ultoa_invert+0x84>
    2092:	a9 f7       	brne	.-22     	; 0x207e <__ultoa_invert+0x6c>
    2094:	ea cf       	rjmp	.-44     	; 0x206a <__ultoa_invert+0x58>
    2096:	b4 e0       	ldi	r27, 0x04	; 4
    2098:	a6 95       	lsr	r26
    209a:	97 95       	ror	r25
    209c:	87 95       	ror	r24
    209e:	77 95       	ror	r23
    20a0:	67 95       	ror	r22
    20a2:	ba 95       	dec	r27
    20a4:	c9 f7       	brne	.-14     	; 0x2098 <__ultoa_invert+0x86>
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	61 05       	cpc	r22, r1
    20aa:	71 05       	cpc	r23, r1
    20ac:	08 95       	ret
    20ae:	9b 01       	movw	r18, r22
    20b0:	ac 01       	movw	r20, r24
    20b2:	0a 2e       	mov	r0, r26
    20b4:	06 94       	lsr	r0
    20b6:	57 95       	ror	r21
    20b8:	47 95       	ror	r20
    20ba:	37 95       	ror	r19
    20bc:	27 95       	ror	r18
    20be:	ba 95       	dec	r27
    20c0:	c9 f7       	brne	.-14     	; 0x20b4 <__ultoa_invert+0xa2>
    20c2:	62 0f       	add	r22, r18
    20c4:	73 1f       	adc	r23, r19
    20c6:	84 1f       	adc	r24, r20
    20c8:	95 1f       	adc	r25, r21
    20ca:	a0 1d       	adc	r26, r0
    20cc:	08 95       	ret

000020ce <__divmodsi4>:
    20ce:	05 2e       	mov	r0, r21
    20d0:	97 fb       	bst	r25, 7
    20d2:	1e f4       	brtc	.+6      	; 0x20da <__divmodsi4+0xc>
    20d4:	00 94       	com	r0
    20d6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__negsi2>
    20da:	57 fd       	sbrc	r21, 7
    20dc:	07 d0       	rcall	.+14     	; 0x20ec <__divmodsi4_neg2>
    20de:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__udivmodsi4>
    20e2:	07 fc       	sbrc	r0, 7
    20e4:	03 d0       	rcall	.+6      	; 0x20ec <__divmodsi4_neg2>
    20e6:	4e f4       	brtc	.+18     	; 0x20fa <__divmodsi4_exit>
    20e8:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__negsi2>

000020ec <__divmodsi4_neg2>:
    20ec:	50 95       	com	r21
    20ee:	40 95       	com	r20
    20f0:	30 95       	com	r19
    20f2:	21 95       	neg	r18
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	4f 4f       	sbci	r20, 0xFF	; 255
    20f8:	5f 4f       	sbci	r21, 0xFF	; 255

000020fa <__divmodsi4_exit>:
    20fa:	08 95       	ret

000020fc <__negsi2>:
    20fc:	90 95       	com	r25
    20fe:	80 95       	com	r24
    2100:	70 95       	com	r23
    2102:	61 95       	neg	r22
    2104:	7f 4f       	sbci	r23, 0xFF	; 255
    2106:	8f 4f       	sbci	r24, 0xFF	; 255
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	08 95       	ret

0000210c <__muluhisi3>:
    210c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__umulhisi3>
    2110:	a5 9f       	mul	r26, r21
    2112:	90 0d       	add	r25, r0
    2114:	b4 9f       	mul	r27, r20
    2116:	90 0d       	add	r25, r0
    2118:	a4 9f       	mul	r26, r20
    211a:	80 0d       	add	r24, r0
    211c:	91 1d       	adc	r25, r1
    211e:	11 24       	eor	r1, r1
    2120:	08 95       	ret

00002122 <__mulshisi3>:
    2122:	b7 ff       	sbrs	r27, 7
    2124:	0c 94 86 10 	jmp	0x210c	; 0x210c <__muluhisi3>

00002128 <__mulohisi3>:
    2128:	0e 94 86 10 	call	0x210c	; 0x210c <__muluhisi3>
    212c:	82 1b       	sub	r24, r18
    212e:	93 0b       	sbc	r25, r19
    2130:	08 95       	ret

00002132 <__prologue_saves__>:
    2132:	2f 92       	push	r2
    2134:	3f 92       	push	r3
    2136:	4f 92       	push	r4
    2138:	5f 92       	push	r5
    213a:	6f 92       	push	r6
    213c:	7f 92       	push	r7
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	ca 1b       	sub	r28, r26
    215c:	db 0b       	sbc	r29, r27
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	09 94       	ijmp

0000216a <__epilogue_restores__>:
    216a:	2a 88       	ldd	r2, Y+18	; 0x12
    216c:	39 88       	ldd	r3, Y+17	; 0x11
    216e:	48 88       	ldd	r4, Y+16	; 0x10
    2170:	5f 84       	ldd	r5, Y+15	; 0x0f
    2172:	6e 84       	ldd	r6, Y+14	; 0x0e
    2174:	7d 84       	ldd	r7, Y+13	; 0x0d
    2176:	8c 84       	ldd	r8, Y+12	; 0x0c
    2178:	9b 84       	ldd	r9, Y+11	; 0x0b
    217a:	aa 84       	ldd	r10, Y+10	; 0x0a
    217c:	b9 84       	ldd	r11, Y+9	; 0x09
    217e:	c8 84       	ldd	r12, Y+8	; 0x08
    2180:	df 80       	ldd	r13, Y+7	; 0x07
    2182:	ee 80       	ldd	r14, Y+6	; 0x06
    2184:	fd 80       	ldd	r15, Y+5	; 0x05
    2186:	0c 81       	ldd	r16, Y+4	; 0x04
    2188:	1b 81       	ldd	r17, Y+3	; 0x03
    218a:	aa 81       	ldd	r26, Y+2	; 0x02
    218c:	b9 81       	ldd	r27, Y+1	; 0x01
    218e:	ce 0f       	add	r28, r30
    2190:	d1 1d       	adc	r29, r1
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	ed 01       	movw	r28, r26
    219e:	08 95       	ret

000021a0 <__udivmodsi4>:
    21a0:	a1 e2       	ldi	r26, 0x21	; 33
    21a2:	1a 2e       	mov	r1, r26
    21a4:	aa 1b       	sub	r26, r26
    21a6:	bb 1b       	sub	r27, r27
    21a8:	fd 01       	movw	r30, r26
    21aa:	0d c0       	rjmp	.+26     	; 0x21c6 <__udivmodsi4_ep>

000021ac <__udivmodsi4_loop>:
    21ac:	aa 1f       	adc	r26, r26
    21ae:	bb 1f       	adc	r27, r27
    21b0:	ee 1f       	adc	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	a2 17       	cp	r26, r18
    21b6:	b3 07       	cpc	r27, r19
    21b8:	e4 07       	cpc	r30, r20
    21ba:	f5 07       	cpc	r31, r21
    21bc:	20 f0       	brcs	.+8      	; 0x21c6 <__udivmodsi4_ep>
    21be:	a2 1b       	sub	r26, r18
    21c0:	b3 0b       	sbc	r27, r19
    21c2:	e4 0b       	sbc	r30, r20
    21c4:	f5 0b       	sbc	r31, r21

000021c6 <__udivmodsi4_ep>:
    21c6:	66 1f       	adc	r22, r22
    21c8:	77 1f       	adc	r23, r23
    21ca:	88 1f       	adc	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	1a 94       	dec	r1
    21d0:	69 f7       	brne	.-38     	; 0x21ac <__udivmodsi4_loop>
    21d2:	60 95       	com	r22
    21d4:	70 95       	com	r23
    21d6:	80 95       	com	r24
    21d8:	90 95       	com	r25
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	bd 01       	movw	r22, r26
    21e0:	cf 01       	movw	r24, r30
    21e2:	08 95       	ret

000021e4 <__umulhisi3>:
    21e4:	a2 9f       	mul	r26, r18
    21e6:	b0 01       	movw	r22, r0
    21e8:	b3 9f       	mul	r27, r19
    21ea:	c0 01       	movw	r24, r0
    21ec:	a3 9f       	mul	r26, r19
    21ee:	70 0d       	add	r23, r0
    21f0:	81 1d       	adc	r24, r1
    21f2:	11 24       	eor	r1, r1
    21f4:	91 1d       	adc	r25, r1
    21f6:	b2 9f       	mul	r27, r18
    21f8:	70 0d       	add	r23, r0
    21fa:	81 1d       	adc	r24, r1
    21fc:	11 24       	eor	r1, r1
    21fe:	91 1d       	adc	r25, r1
    2200:	08 95       	ret

00002202 <_exit>:
    2202:	f8 94       	cli

00002204 <__stop_program>:
    2204:	ff cf       	rjmp	.-2      	; 0x2204 <__stop_program>
