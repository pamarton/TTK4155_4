
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000294  00800100  00001eb8  00001f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800394  00800394  000021e0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021cb  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a76  00000000  00000000  000045e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b52  00000000  00000000  0000505d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005c4  00000000  00000000  00005bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007a8  00000000  00000000  00006174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000152a  00000000  00000000  0000691c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00007e46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__ctors_end>
       4:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_1>
       8:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_2>
       c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      10:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      14:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      18:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      1c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      20:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      24:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      28:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      2c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      30:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      34:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      38:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      3c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      40:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      44:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      48:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      4c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      50:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      54:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      58:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      5c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      60:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      64:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      68:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      6c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	43 61       	ori	r20, 0x13	; 19
      72:	6c 69       	ori	r22, 0x9C	; 156
      74:	62 72       	andi	r22, 0x22	; 34
      76:	61 74       	andi	r22, 0x41	; 65
      78:	65 00       	.word	0x0065	; ????
	...

0000007c <debug_entry_0>:
      7c:	66 69 74 20 73 63 72 65 65 6e 00 00                 fit screen..

00000088 <option_entry_1>:
      88:	43 6f 6e 74 72 61 73 74 00 00 00 00                 Contrast....

00000094 <option_entry_0>:
      94:	4d 75 73 69 63 00 00 00 00 00 00 00                 Music.......

000000a0 <mainmenu_entry_3>:
      a0:	4f 70 74 69 6f 6e 73 00 00 00 00 00                 Options.....

000000ac <mainmenu_entry_2>:
      ac:	44 65 62 75 67 00 00 00 00 00 00 00                 Debug.......

000000b8 <mainmenu_entry_1>:
      b8:	48 69 67 68 73 63 6f 72 65 00 00 00                 Highscore...

000000c4 <font>:
	...
      cc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      dc:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
      ec:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
      fc:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     10c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     11c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     12c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     13c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     14c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     15c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     16c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     17c:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     18c:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     19c:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1ac:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1bc:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1cc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1dc:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1ec:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     1fc:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     20c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     21c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     22c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     23c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     24c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     25c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     26c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     27c:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     28c:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     29c:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2ac:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2bc:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2cc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2dc:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2ec:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     2fc:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     30c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     31c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     32c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     33c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     34c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     35c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     36c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     37c:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     38c:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     39c:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3ac:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3bc:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3cc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     3dc:	01 01 01 01 01 01 01 ff                             ........

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d4 e0       	ldi	r29, 0x04	; 4
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61

000003f0 <__do_copy_data>:
     3f0:	13 e0       	ldi	r17, 0x03	; 3
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	b1 e0       	ldi	r27, 0x01	; 1
     3f6:	e8 eb       	ldi	r30, 0xB8	; 184
     3f8:	fe e1       	ldi	r31, 0x1E	; 30
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__do_copy_data+0x10>
     3fc:	05 90       	lpm	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	a4 39       	cpi	r26, 0x94	; 148
     402:	b1 07       	cpc	r27, r17
     404:	d9 f7       	brne	.-10     	; 0x3fc <__do_copy_data+0xc>

00000406 <__do_clear_bss>:
     406:	24 e0       	ldi	r18, 0x04	; 4
     408:	a4 e9       	ldi	r26, 0x94	; 148
     40a:	b3 e0       	ldi	r27, 0x03	; 3
     40c:	01 c0       	rjmp	.+2      	; 0x410 <.do_clear_bss_start>

0000040e <.do_clear_bss_loop>:
     40e:	1d 92       	st	X+, r1

00000410 <.do_clear_bss_start>:
     410:	a4 30       	cpi	r26, 0x04	; 4
     412:	b2 07       	cpc	r27, r18
     414:	e1 f7       	brne	.-8      	; 0x40e <.do_clear_bss_loop>
     416:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
     41a:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <_exit>

0000041e <__bad_interrupt>:
     41e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000422 <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
     422:	82 30       	cpi	r24, 0x02	; 2
     424:	91 05       	cpc	r25, r1
     426:	71 f0       	breq	.+28     	; 0x444 <readADC+0x22>
     428:	1c f4       	brge	.+6      	; 0x430 <readADC+0xe>
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	39 f0       	breq	.+14     	; 0x43c <readADC+0x1a>
     42e:	1c c0       	rjmp	.+56     	; 0x468 <readADC+0x46>
     430:	83 30       	cpi	r24, 0x03	; 3
     432:	91 05       	cpc	r25, r1
     434:	59 f0       	breq	.+22     	; 0x44c <readADC+0x2a>
     436:	04 97       	sbiw	r24, 0x04	; 4
     438:	69 f0       	breq	.+26     	; 0x454 <readADC+0x32>
     43a:	16 c0       	rjmp	.+44     	; 0x468 <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // Joystick X_axis
     43c:	84 e1       	ldi	r24, 0x14	; 20
     43e:	80 93 00 14 	sts	0x1400, r24
     442:	0b c0       	rjmp	.+22     	; 0x45a <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Joystick Y_axis
     444:	85 e1       	ldi	r24, 0x15	; 21
     446:	80 93 00 14 	sts	0x1400, r24
     44a:	07 c0       	rjmp	.+14     	; 0x45a <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
     44c:	86 e1       	ldi	r24, 0x16	; 22
     44e:	80 93 00 14 	sts	0x1400, r24
     452:	03 c0       	rjmp	.+6      	; 0x45a <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
     454:	87 e1       	ldi	r24, 0x17	; 23
     456:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45a:	82 e5       	ldi	r24, 0x52	; 82
     45c:	8a 95       	dec	r24
     45e:	f1 f7       	brne	.-4      	; 0x45c <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
     460:	80 91 00 14 	lds	r24, 0x1400
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // Joystick X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Joystick Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
     46c:	08 95       	ret

0000046e <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     46e:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     470:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     472:	85 b7       	in	r24, 0x35	; 53
     474:	81 60       	ori	r24, 0x01	; 1
     476:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     478:	85 b7       	in	r24, 0x35	; 53
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	84 60       	ori	r24, 0x04	; 4
     482:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     484:	85 b7       	in	r24, 0x35	; 53
     486:	88 60       	ori	r24, 0x08	; 8
     488:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     48a:	8b b7       	in	r24, 0x3b	; 59
     48c:	80 64       	ori	r24, 0x40	; 64
     48e:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     490:	8b b7       	in	r24, 0x3b	; 59
     492:	80 68       	ori	r24, 0x80	; 128
     494:	8b bf       	out	0x3b, r24	; 59
	sei();//enabling interrupts globaly
     496:	78 94       	sei
     498:	08 95       	ret

0000049a <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ef 93       	push	r30
     4c6:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4c8:	81 e1       	ldi	r24, 0x11	; 17
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     4d4:	82 e5       	ldi	r24, 0x52	; 82
     4d6:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     4da:	f8 2e       	mov	r15, r24
     4dc:	e9 2e       	mov	r14, r25
     4de:	8c e4       	ldi	r24, 0x4C	; 76
     4e0:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     4e4:	18 2f       	mov	r17, r24
     4e6:	09 2f       	mov	r16, r25
     4e8:	89 e5       	ldi	r24, 0x59	; 89
     4ea:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     4ee:	c8 2f       	mov	r28, r24
     4f0:	d9 2f       	mov	r29, r25
     4f2:	88 e5       	ldi	r24, 0x58	; 88
     4f4:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	8a e3       	ldi	r24, 0x3A	; 58
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
     514:	8d b7       	in	r24, 0x3d	; 61
     516:	9e b7       	in	r25, 0x3e	; 62
     518:	0c 96       	adiw	r24, 0x0c	; 12
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	9e bf       	out	0x3e, r25	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	8d bf       	out	0x3d, r24	; 61
}
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	bf 91       	pop	r27
     52e:	af 91       	pop	r26
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	7f 91       	pop	r23
     536:	6f 91       	pop	r22
     538:	5f 91       	pop	r21
     53a:	4f 91       	pop	r20
     53c:	3f 91       	pop	r19
     53e:	2f 91       	pop	r18
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
	printf("Left Button Pressed\n");
     574:	83 e5       	ldi	r24, 0x53	; 83
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <puts>
     57c:	ff 91       	pop	r31
     57e:	ef 91       	pop	r30
     580:	bf 91       	pop	r27
     582:	af 91       	pop	r26
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	7f 91       	pop	r23
     58a:	6f 91       	pop	r22
     58c:	5f 91       	pop	r21
     58e:	4f 91       	pop	r20
     590:	3f 91       	pop	r19
     592:	2f 91       	pop	r18
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	c4 e6       	ldi	r28, 0x64	; 100
     5a8:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     5aa:	00 91 9e 03 	lds	r16, 0x039E
     5ae:	10 91 9f 03 	lds	r17, 0x039F
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     5ba:	01 58       	subi	r16, 0x81	; 129
     5bc:	1f 4f       	sbci	r17, 0xFF	; 255
     5be:	08 1b       	sub	r16, r24
     5c0:	19 0b       	sbc	r17, r25
     5c2:	10 93 9f 03 	sts	0x039F, r17
     5c6:	00 93 9e 03 	sts	0x039E, r16
		calibrate_y += 127 - readADC(2);
     5ca:	00 91 9c 03 	lds	r16, 0x039C
     5ce:	10 91 9d 03 	lds	r17, 0x039D
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     5da:	01 58       	subi	r16, 0x81	; 129
     5dc:	1f 4f       	sbci	r17, 0xFF	; 255
     5de:	08 1b       	sub	r16, r24
     5e0:	19 0b       	sbc	r17, r25
     5e2:	10 93 9d 03 	sts	0x039D, r17
     5e6:	00 93 9c 03 	sts	0x039C, r16
     5ea:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     5ec:	20 97       	sbiw	r28, 0x00	; 0
     5ee:	e9 f6       	brne	.-70     	; 0x5aa <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     5f0:	80 91 9e 03 	lds	r24, 0x039E
     5f4:	90 91 9f 03 	lds	r25, 0x039F
     5f8:	24 e6       	ldi	r18, 0x64	; 100
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	b9 01       	movw	r22, r18
     5fe:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__divmodhi4>
     602:	70 93 9f 03 	sts	0x039F, r23
     606:	60 93 9e 03 	sts	0x039E, r22
	calibrate_y /= CALIBRATE_READINGS;
     60a:	80 91 9c 03 	lds	r24, 0x039C
     60e:	90 91 9d 03 	lds	r25, 0x039D
     612:	b9 01       	movw	r22, r18
     614:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__divmodhi4>
     618:	70 93 9d 03 	sts	0x039D, r23
     61c:	60 93 9c 03 	sts	0x039C, r22
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     62a:	2f 92       	push	r2
     62c:	3f 92       	push	r3
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <signal_to_range+0x26>
     650:	00 d0       	rcall	.+0      	; 0x652 <signal_to_range+0x28>
     652:	00 d0       	rcall	.+0      	; 0x654 <signal_to_range+0x2a>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	3c 01       	movw	r6, r24
     65a:	7a 83       	std	Y+2, r23	; 0x02
     65c:	69 83       	std	Y+1, r22	; 0x01
     65e:	5c 83       	std	Y+4, r21	; 0x04
     660:	4b 83       	std	Y+3, r20	; 0x03
     662:	3e 83       	std	Y+6, r19	; 0x06
     664:	2d 83       	std	Y+5, r18	; 0x05
     666:	18 01       	movw	r2, r16
     668:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     66a:	b9 01       	movw	r22, r18
     66c:	88 27       	eor	r24, r24
     66e:	77 fd       	sbrc	r23, 7
     670:	80 95       	com	r24
     672:	98 2f       	mov	r25, r24
     674:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__floatsisf>
     678:	4b 01       	movw	r8, r22
     67a:	5c 01       	movw	r10, r24
     67c:	b3 01       	movw	r22, r6
     67e:	6e 0d       	add	r22, r14
     680:	7f 1d       	adc	r23, r15
     682:	29 81       	ldd	r18, Y+1	; 0x01
     684:	3a 81       	ldd	r19, Y+2	; 0x02
     686:	62 1b       	sub	r22, r18
     688:	73 0b       	sbc	r23, r19
     68a:	88 27       	eor	r24, r24
     68c:	77 fd       	sbrc	r23, 7
     68e:	80 95       	com	r24
     690:	98 2f       	mov	r25, r24
     692:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__floatsisf>
     696:	2b 01       	movw	r4, r22
     698:	3c 01       	movw	r6, r24
     69a:	b1 01       	movw	r22, r2
     69c:	8d 81       	ldd	r24, Y+5	; 0x05
     69e:	9e 81       	ldd	r25, Y+6	; 0x06
     6a0:	68 1b       	sub	r22, r24
     6a2:	79 0b       	sbc	r23, r25
     6a4:	88 27       	eor	r24, r24
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	80 95       	com	r24
     6aa:	98 2f       	mov	r25, r24
     6ac:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__floatsisf>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     6bc:	2b 01       	movw	r4, r22
     6be:	3c 01       	movw	r6, r24
     6c0:	6b 81       	ldd	r22, Y+3	; 0x03
     6c2:	7c 81       	ldd	r23, Y+4	; 0x04
     6c4:	e9 81       	ldd	r30, Y+1	; 0x01
     6c6:	fa 81       	ldd	r31, Y+2	; 0x02
     6c8:	6e 1b       	sub	r22, r30
     6ca:	7f 0b       	sbc	r23, r31
     6cc:	88 27       	eor	r24, r24
     6ce:	77 fd       	sbrc	r23, 7
     6d0:	80 95       	com	r24
     6d2:	98 2f       	mov	r25, r24
     6d4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__floatsisf>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	c3 01       	movw	r24, r6
     6de:	b2 01       	movw	r22, r4
     6e0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__divsf3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	c5 01       	movw	r24, r10
     6ea:	b4 01       	movw	r22, r8
     6ec:	0e 94 fe 07 	call	0xffc	; 0xffc <__addsf3>
     6f0:	0e 94 ca 08 	call	0x1194	; 0x1194 <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     6f4:	c1 01       	movw	r24, r2
     6f6:	80 1b       	sub	r24, r16
     6f8:	91 0b       	sbc	r25, r17
     6fa:	68 17       	cp	r22, r24
     6fc:	79 07       	cpc	r23, r25
     6fe:	74 f5       	brge	.+92     	; 0x75c <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     700:	8d 81       	ldd	r24, Y+5	; 0x05
     702:	9e 81       	ldd	r25, Y+6	; 0x06
     704:	80 0f       	add	r24, r16
     706:	91 1f       	adc	r25, r17
     708:	86 17       	cp	r24, r22
     70a:	97 07       	cpc	r25, r23
     70c:	4c f5       	brge	.+82     	; 0x760 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     70e:	f8 01       	movw	r30, r16
     710:	11 23       	and	r17, r17
     712:	0c f4       	brge	.+2      	; 0x716 <signal_to_range+0xec>
     714:	31 96       	adiw	r30, 0x01	; 1
     716:	f5 95       	asr	r31
     718:	e7 95       	ror	r30
     71a:	d8 01       	movw	r26, r16
     71c:	12 c0       	rjmp	.+36     	; 0x742 <signal_to_range+0x118>
     71e:	8a 0f       	add	r24, r26
     720:	9b 1f       	adc	r25, r27
     722:	ac 01       	movw	r20, r24
     724:	4e 0f       	add	r20, r30
     726:	5f 1f       	adc	r21, r31
     728:	64 17       	cp	r22, r20
     72a:	75 07       	cpc	r23, r21
     72c:	14 f0       	brlt	.+4      	; 0x732 <signal_to_range+0x108>
				reference += step;
     72e:	69 01       	movw	r12, r18
     730:	0b c0       	rjmp	.+22     	; 0x748 <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
     732:	c6 01       	movw	r24, r12
     734:	8e 1b       	sub	r24, r30
     736:	9f 0b       	sbc	r25, r31
     738:	86 17       	cp	r24, r22
     73a:	97 07       	cpc	r25, r23
     73c:	14 f0       	brlt	.+4      	; 0x742 <signal_to_range+0x118>
				reference -= step;
     73e:	c0 1a       	sub	r12, r16
     740:	d1 0a       	sbc	r13, r17
     742:	c6 01       	movw	r24, r12
     744:	80 1b       	sub	r24, r16
     746:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     748:	96 01       	movw	r18, r12
     74a:	20 0f       	add	r18, r16
     74c:	31 1f       	adc	r19, r17
     74e:	62 17       	cp	r22, r18
     750:	73 07       	cpc	r23, r19
     752:	2c f7       	brge	.-54     	; 0x71e <signal_to_range+0xf4>
     754:	86 17       	cp	r24, r22
     756:	97 07       	cpc	r25, r23
     758:	14 f7       	brge	.-60     	; 0x71e <signal_to_range+0xf4>
     75a:	04 c0       	rjmp	.+8      	; 0x764 <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     75c:	61 01       	movw	r12, r2
     75e:	02 c0       	rjmp	.+4      	; 0x764 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     760:	cd 80       	ldd	r12, Y+5	; 0x05
     762:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     764:	c6 01       	movw	r24, r12
     766:	26 96       	adiw	r28, 0x06	; 6
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	8f 90       	pop	r8
     78a:	7f 90       	pop	r7
     78c:	6f 90       	pop	r6
     78e:	5f 90       	pop	r5
     790:	4f 90       	pop	r4
     792:	3f 90       	pop	r3
     794:	2f 90       	pop	r2
     796:	08 95       	ret

00000798 <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     798:	af 92       	push	r10
     79a:	bf 92       	push	r11
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
	switch(channel){
     7a8:	82 35       	cpi	r24, 0x52	; 82
     7aa:	09 f4       	brne	.+2      	; 0x7ae <read_control_input+0x16>
     7ac:	74 c0       	rjmp	.+232    	; 0x896 <read_control_input+0xfe>
     7ae:	20 f4       	brcc	.+8      	; 0x7b8 <read_control_input+0x20>
     7b0:	8c 34       	cpi	r24, 0x4C	; 76
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <read_control_input+0x1e>
     7b4:	4e c0       	rjmp	.+156    	; 0x852 <read_control_input+0xba>
     7b6:	91 c0       	rjmp	.+290    	; 0x8da <read_control_input+0x142>
     7b8:	88 35       	cpi	r24, 0x58	; 88
     7ba:	19 f0       	breq	.+6      	; 0x7c2 <read_control_input+0x2a>
     7bc:	89 35       	cpi	r24, 0x59	; 89
     7be:	29 f1       	breq	.+74     	; 0x80a <read_control_input+0x72>
     7c0:	8c c0       	rjmp	.+280    	; 0x8da <read_control_input+0x142>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     7c2:	c0 90 9a 03 	lds	r12, 0x039A
     7c6:	d0 90 9b 03 	lds	r13, 0x039B
     7ca:	e0 90 9e 03 	lds	r14, 0x039E
     7ce:	f0 90 9f 03 	lds	r15, 0x039F
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     7da:	0f 2e       	mov	r0, r31
     7dc:	fa e0       	ldi	r31, 0x0A	; 10
     7de:	af 2e       	mov	r10, r31
     7e0:	b1 2c       	mov	r11, r1
     7e2:	f0 2d       	mov	r31, r0
     7e4:	04 e6       	ldi	r16, 0x64	; 100
     7e6:	10 e0       	ldi	r17, 0x00	; 0
     7e8:	2c e9       	ldi	r18, 0x9C	; 156
     7ea:	3f ef       	ldi	r19, 0xFF	; 255
     7ec:	4f ef       	ldi	r20, 0xFF	; 255
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	0e 94 15 03 	call	0x62a	; 0x62a <signal_to_range>
     7f8:	90 93 9b 03 	sts	0x039B, r25
     7fc:	80 93 9a 03 	sts	0x039A, r24
			return ref_X;
     800:	80 91 9a 03 	lds	r24, 0x039A
     804:	90 91 9b 03 	lds	r25, 0x039B
     808:	6a c0       	rjmp	.+212    	; 0x8de <read_control_input+0x146>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     80a:	c0 90 98 03 	lds	r12, 0x0398
     80e:	d0 90 99 03 	lds	r13, 0x0399
     812:	e0 90 9c 03 	lds	r14, 0x039C
     816:	f0 90 9d 03 	lds	r15, 0x039D
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     822:	0f 2e       	mov	r0, r31
     824:	fa e0       	ldi	r31, 0x0A	; 10
     826:	af 2e       	mov	r10, r31
     828:	b1 2c       	mov	r11, r1
     82a:	f0 2d       	mov	r31, r0
     82c:	04 e6       	ldi	r16, 0x64	; 100
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	2c e9       	ldi	r18, 0x9C	; 156
     832:	3f ef       	ldi	r19, 0xFF	; 255
     834:	4f ef       	ldi	r20, 0xFF	; 255
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	0e 94 15 03 	call	0x62a	; 0x62a <signal_to_range>
     840:	90 93 99 03 	sts	0x0399, r25
     844:	80 93 98 03 	sts	0x0398, r24
			return ref_Y;
     848:	80 91 98 03 	lds	r24, 0x0398
     84c:	90 91 99 03 	lds	r25, 0x0399
     850:	46 c0       	rjmp	.+140    	; 0x8de <read_control_input+0x146>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     852:	c0 90 96 03 	lds	r12, 0x0396
     856:	d0 90 97 03 	lds	r13, 0x0397
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     862:	0f 2e       	mov	r0, r31
     864:	fa e0       	ldi	r31, 0x0A	; 10
     866:	af 2e       	mov	r10, r31
     868:	b1 2c       	mov	r11, r1
     86a:	f0 2d       	mov	r31, r0
     86c:	e1 2c       	mov	r14, r1
     86e:	f1 2c       	mov	r15, r1
     870:	04 e6       	ldi	r16, 0x64	; 100
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	0e 94 15 03 	call	0x62a	; 0x62a <signal_to_range>
     884:	90 93 97 03 	sts	0x0397, r25
     888:	80 93 96 03 	sts	0x0396, r24
		return ref_L;
     88c:	80 91 96 03 	lds	r24, 0x0396
     890:	90 91 97 03 	lds	r25, 0x0397
     894:	24 c0       	rjmp	.+72     	; 0x8de <read_control_input+0x146>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
     896:	c0 90 94 03 	lds	r12, 0x0394
     89a:	d0 90 95 03 	lds	r13, 0x0395
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 11 02 	call	0x422	; 0x422 <readADC>
     8a6:	0f 2e       	mov	r0, r31
     8a8:	fa e0       	ldi	r31, 0x0A	; 10
     8aa:	af 2e       	mov	r10, r31
     8ac:	b1 2c       	mov	r11, r1
     8ae:	f0 2d       	mov	r31, r0
     8b0:	e1 2c       	mov	r14, r1
     8b2:	f1 2c       	mov	r15, r1
     8b4:	04 e6       	ldi	r16, 0x64	; 100
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	4f ef       	ldi	r20, 0xFF	; 255
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	0e 94 15 03 	call	0x62a	; 0x62a <signal_to_range>
     8c8:	90 93 95 03 	sts	0x0395, r25
     8cc:	80 93 94 03 	sts	0x0394, r24
			return ref_R;
     8d0:	80 91 94 03 	lds	r24, 0x0394
     8d4:	90 91 95 03 	lds	r25, 0x0395
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <read_control_input+0x146>
	}
	return 0;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
}
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	08 95       	ret

000008f0 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     8f0:	0e 94 cf 02 	call	0x59e	; 0x59e <calibrate_joystick>
	ref_X = read_control_input('X');
     8f4:	88 e5       	ldi	r24, 0x58	; 88
     8f6:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     8fa:	90 93 9b 03 	sts	0x039B, r25
     8fe:	80 93 9a 03 	sts	0x039A, r24
	ref_Y = read_control_input('Y');
     902:	89 e5       	ldi	r24, 0x59	; 89
     904:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     908:	90 93 99 03 	sts	0x0399, r25
     90c:	80 93 98 03 	sts	0x0398, r24
	ref_L = read_control_input('L');
     910:	8c e4       	ldi	r24, 0x4C	; 76
     912:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     916:	90 93 97 03 	sts	0x0397, r25
     91a:	80 93 96 03 	sts	0x0396, r24
	ref_R = read_control_input('R');
     91e:	82 e5       	ldi	r24, 0x52	; 82
     920:	0e 94 cc 03 	call	0x798	; 0x798 <read_control_input>
     924:	90 93 95 03 	sts	0x0395, r25
     928:	80 93 94 03 	sts	0x0394, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     92c:	20 91 9c 03 	lds	r18, 0x039C
     930:	30 91 9d 03 	lds	r19, 0x039D
     934:	80 91 9e 03 	lds	r24, 0x039E
     938:	90 91 9f 03 	lds	r25, 0x039F
     93c:	3f 93       	push	r19
     93e:	2f 93       	push	r18
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	87 e6       	ldi	r24, 0x67	; 103
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     950:	60 91 94 03 	lds	r22, 0x0394
     954:	70 91 95 03 	lds	r23, 0x0395
     958:	40 91 96 03 	lds	r20, 0x0396
     95c:	50 91 97 03 	lds	r21, 0x0397
     960:	20 91 98 03 	lds	r18, 0x0398
     964:	30 91 99 03 	lds	r19, 0x0399
     968:	80 91 9a 03 	lds	r24, 0x039A
     96c:	90 91 9b 03 	lds	r25, 0x039B
     970:	7f 93       	push	r23
     972:	6f 93       	push	r22
     974:	5f 93       	push	r21
     976:	4f 93       	push	r20
     978:	3f 93       	push	r19
     97a:	2f 93       	push	r18
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	80 e9       	ldi	r24, 0x90	; 144
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
     98c:	8d b7       	in	r24, 0x3d	; 61
     98e:	9e b7       	in	r25, 0x3e	; 62
     990:	40 96       	adiw	r24, 0x10	; 16
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	9e bf       	out	0x3e, r25	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	8d bf       	out	0x3d, r24	; 61
     99c:	08 95       	ret

0000099e <SRAM_test>:
	printf("\nINITIALIZATION COMPLETE\n");
}

#include <stdlib.h>
void SRAM_test(void)
{
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     9ae:	89 eb       	ldi	r24, 0xB9	; 185
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9b6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <rand>
     9ba:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9bc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9c0:	c0 e0       	ldi	r28, 0x00	; 0
     9c2:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9c4:	00 e0       	ldi	r16, 0x00	; 0
     9c6:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9c8:	0f 2e       	mov	r0, r31
     9ca:	ff ec       	ldi	r31, 0xCF	; 207
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f1 e0       	ldi	r31, 0x01	; 1
     9d0:	ff 2e       	mov	r15, r31
     9d2:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9d4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <rand>
     9d8:	fe 01       	movw	r30, r28
     9da:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9dc:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9de:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9e0:	28 17       	cp	r18, r24
     9e2:	a9 f0       	breq	.+42     	; 0xa0e <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9e4:	99 27       	eor	r25, r25
     9e6:	9f 93       	push	r25
     9e8:	8f 93       	push	r24
     9ea:	1f 92       	push	r1
     9ec:	2f 93       	push	r18
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	ff 92       	push	r15
     9f4:	ef 92       	push	r14
     9f6:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
			write_errors++;
     9fa:	0f 5f       	subi	r16, 0xFF	; 255
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
     9fe:	8d b7       	in	r24, 0x3d	; 61
     a00:	9e b7       	in	r25, 0x3e	; 62
     a02:	08 96       	adiw	r24, 0x08	; 8
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	9e bf       	out	0x3e, r25	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a0e:	21 96       	adiw	r28, 0x01	; 1
     a10:	c1 15       	cp	r28, r1
     a12:	98 e0       	ldi	r25, 0x08	; 8
     a14:	d9 07       	cpc	r29, r25
     a16:	f1 f6       	brne	.-68     	; 0x9d4 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     a18:	c6 01       	movw	r24, r12
     a1a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a1e:	c0 e0       	ldi	r28, 0x00	; 0
     a20:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a22:	e1 2c       	mov	r14, r1
     a24:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a26:	0f 2e       	mov	r0, r31
     a28:	f8 e0       	ldi	r31, 0x08	; 8
     a2a:	cf 2e       	mov	r12, r31
     a2c:	f2 e0       	ldi	r31, 0x02	; 2
     a2e:	df 2e       	mov	r13, r31
     a30:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a32:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <rand>
     a36:	fe 01       	movw	r30, r28
     a38:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a3a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a3c:	28 17       	cp	r18, r24
     a3e:	b1 f0       	breq	.+44     	; 0xa6c <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a40:	99 27       	eor	r25, r25
     a42:	9f 93       	push	r25
     a44:	8f 93       	push	r24
     a46:	1f 92       	push	r1
     a48:	2f 93       	push	r18
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	df 92       	push	r13
     a50:	cf 92       	push	r12
     a52:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
			retrieval_errors++;
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	e8 1a       	sub	r14, r24
     a5a:	f8 0a       	sbc	r15, r24
     a5c:	8d b7       	in	r24, 0x3d	; 61
     a5e:	9e b7       	in	r25, 0x3e	; 62
     a60:	08 96       	adiw	r24, 0x08	; 8
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	9e bf       	out	0x3e, r25	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a6c:	21 96       	adiw	r28, 0x01	; 1
     a6e:	c1 15       	cp	r28, r1
     a70:	98 e0       	ldi	r25, 0x08	; 8
     a72:	d9 07       	cpc	r29, r25
     a74:	f1 f6       	brne	.-68     	; 0xa32 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     a76:	ff 92       	push	r15
     a78:	ef 92       	push	r14
     a7a:	1f 93       	push	r17
     a7c:	0f 93       	push	r16
     a7e:	85 e4       	ldi	r24, 0x45	; 69
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	08 95       	ret

00000aa8 <initalize>:



void initalize(void){
	
	init_UART(UBBR);
     aa8:	8f e1       	ldi	r24, 0x1F	; 31
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     ab0:	8c e9       	ldi	r24, 0x9C	; 156
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	85 ea       	ldi	r24, 0xA5	; 165
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	81 eb       	ldi	r24, 0xB1	; 177
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	86 eb       	ldi	r24, 0xB6	; 182
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 bd 0a 	call	0x157a	; 0x157a <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     ad4:	85 b7       	in	r24, 0x35	; 53
     ad6:	80 68       	ori	r24, 0x80	; 128
     ad8:	85 bf       	out	0x35, r24	; 53
	
	
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     ada:	80 b7       	in	r24, 0x30	; 48
     adc:	80 62       	ori	r24, 0x20	; 32
     ade:	80 bf       	out	0x30, r24	; 48
	
	oled_ini();
     ae0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <oled_ini>
	initialize_menu();
     ae4:	0e 94 b3 05 	call	0xb66	; 0xb66 <initialize_menu>
	
	initialize_control_input();
     ae8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <initialize_control_input>
	printf("control input successfully initialized\n\n");
     aec:	8c ef       	ldi	r24, 0xFC	; 252
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <puts>
	SRAM_test();
     af4:	0e 94 cf 04 	call	0x99e	; 0x99e <SRAM_test>
	printf("SRAM successfully initialized\n");
     af8:	84 e2       	ldi	r24, 0x24	; 36
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <puts>
	initalize_interrupts();
     b00:	0e 94 37 02 	call	0x46e	; 0x46e <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     b04:	82 e4       	ldi	r24, 0x42	; 66
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <puts>
	printf("Interrupts activated\n");
     b0c:	86 e6       	ldi	r24, 0x66	; 102
     b0e:	93 e0       	ldi	r25, 0x03	; 3
     b10:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     b14:	8b e7       	ldi	r24, 0x7B	; 123
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <puts>
     b1c:	8d b7       	in	r24, 0x3d	; 61
     b1e:	9e b7       	in	r25, 0x3e	; 62
     b20:	08 96       	adiw	r24, 0x08	; 8
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	9e bf       	out	0x3e, r25	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	8d bf       	out	0x3d, r24	; 61
     b2c:	08 95       	ret

00000b2e <main>:
#include "menu.h"

int main(void)
{
	
	initalize();	
     b2e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <initalize>
	sram_init();
     b32:	0e 94 8f 07 	call	0xf1e	; 0xf1e <sram_init>
	
	sram_write_char('T');
     b36:	84 e5       	ldi	r24, 0x54	; 84
     b38:	0e 94 54 07 	call	0xea8	; 0xea8 <sram_write_char>
	for(int x = 0; x < 8; x++){
		
	}
	sram_pixel(8,2);
     b3c:	62 e0       	ldi	r22, 0x02	; 2
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	88 e0       	ldi	r24, 0x08	; 8
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 bb 07 	call	0xf76	; 0xf76 <sram_pixel>
	sram_pixel(8,3);
     b48:	63 e0       	ldi	r22, 0x03	; 3
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 bb 07 	call	0xf76	; 0xf76 <sram_pixel>
	sram_pixel(8,4);
     b54:	64 e0       	ldi	r22, 0x04	; 4
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	88 e0       	ldi	r24, 0x08	; 8
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 bb 07 	call	0xf76	; 0xf76 <sram_pixel>
	write_screen();
     b60:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <write_screen>
     b64:	ff cf       	rjmp	.-2      	; 0xb64 <main+0x36>

00000b66 <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b6a:	cc ee       	ldi	r28, 0xEC	; 236
     b6c:	d3 e0       	ldi	r29, 0x03	; 3
     b6e:	d0 93 d3 03 	sts	0x03D3, r29
     b72:	c0 93 d2 03 	sts	0x03D2, r28
	new_menu->ptr_child = ptr_child;
     b76:	10 92 d5 03 	sts	0x03D5, r1
     b7a:	10 92 d4 03 	sts	0x03D4, r1
	new_menu->ptr_parent = ptr_parent;
     b7e:	10 92 d7 03 	sts	0x03D7, r1
     b82:	10 92 d6 03 	sts	0x03D6, r1
	
	new_menu->title = title;
     b86:	ee ec       	ldi	r30, 0xCE	; 206
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	88 eb       	ldi	r24, 0xB8	; 184
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 d1 03 	sts	0x03D1, r25
     b9a:	80 93 d0 03 	sts	0x03D0, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b9e:	24 ea       	ldi	r18, 0xA4	; 164
     ba0:	33 e0       	ldi	r19, 0x03	; 3
     ba2:	30 93 f1 03 	sts	0x03F1, r19
     ba6:	20 93 f0 03 	sts	0x03F0, r18
	new_menu->ptr_child = ptr_child;
     baa:	68 ed       	ldi	r22, 0xD8	; 216
     bac:	73 e0       	ldi	r23, 0x03	; 3
     bae:	70 93 f3 03 	sts	0x03F3, r23
     bb2:	60 93 f2 03 	sts	0x03F2, r22
	new_menu->ptr_parent = ptr_parent;
     bb6:	10 92 f5 03 	sts	0x03F5, r1
     bba:	10 92 f4 03 	sts	0x03F4, r1
	
	new_menu->title = title;
     bbe:	4c ea       	ldi	r20, 0xAC	; 172
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	59 83       	std	Y+1, r21	; 0x01
     bc4:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     bc6:	90 93 ef 03 	sts	0x03EF, r25
     bca:	80 93 ee 03 	sts	0x03EE, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     bce:	f0 93 a9 03 	sts	0x03A9, r31
     bd2:	e0 93 a8 03 	sts	0x03A8, r30
	new_menu->ptr_child = ptr_child;
     bd6:	ca eb       	ldi	r28, 0xBA	; 186
     bd8:	d3 e0       	ldi	r29, 0x03	; 3
     bda:	d0 93 ab 03 	sts	0x03AB, r29
     bde:	c0 93 aa 03 	sts	0x03AA, r28
	new_menu->ptr_parent = ptr_parent;
     be2:	10 92 ad 03 	sts	0x03AD, r1
     be6:	10 92 ac 03 	sts	0x03AC, r1
	
	new_menu->title = title;
     bea:	40 ea       	ldi	r20, 0xA0	; 160
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	d9 01       	movw	r26, r18
     bf0:	4d 93       	st	X+, r20
     bf2:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     bf4:	90 93 a7 03 	sts	0x03A7, r25
     bf8:	80 93 a6 03 	sts	0x03A6, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     bfc:	24 ec       	ldi	r18, 0xC4	; 196
     bfe:	33 e0       	ldi	r19, 0x03	; 3
     c00:	30 93 bf 03 	sts	0x03BF, r19
     c04:	20 93 be 03 	sts	0x03BE, r18
	new_menu->ptr_child = ptr_child;
     c08:	10 92 c1 03 	sts	0x03C1, r1
     c0c:	10 92 c0 03 	sts	0x03C0, r1
	new_menu->ptr_parent = ptr_parent;
     c10:	f0 93 c3 03 	sts	0x03C3, r31
     c14:	e0 93 c2 03 	sts	0x03C2, r30
	
	new_menu->title = title;
     c18:	84 e9       	ldi	r24, 0x94	; 148
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	99 83       	std	Y+1, r25	; 0x01
     c1e:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	90 93 bd 03 	sts	0x03BD, r25
     c28:	80 93 bc 03 	sts	0x03BC, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c2c:	d0 93 c9 03 	sts	0x03C9, r29
     c30:	c0 93 c8 03 	sts	0x03C8, r28
	new_menu->ptr_child = ptr_child;
     c34:	10 92 cb 03 	sts	0x03CB, r1
     c38:	10 92 ca 03 	sts	0x03CA, r1
	new_menu->ptr_parent = ptr_parent;
     c3c:	f0 93 cd 03 	sts	0x03CD, r31
     c40:	e0 93 cc 03 	sts	0x03CC, r30
	
	new_menu->title = title;
     c44:	48 e8       	ldi	r20, 0x88	; 136
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	d9 01       	movw	r26, r18
     c4a:	4d 93       	st	X+, r20
     c4c:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     c4e:	90 93 c7 03 	sts	0x03C7, r25
     c52:	80 93 c6 03 	sts	0x03C6, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c56:	c2 ee       	ldi	r28, 0xE2	; 226
     c58:	d3 e0       	ldi	r29, 0x03	; 3
     c5a:	d0 93 dd 03 	sts	0x03DD, r29
     c5e:	c0 93 dc 03 	sts	0x03DC, r28
	new_menu->ptr_child = ptr_child;
     c62:	10 92 df 03 	sts	0x03DF, r1
     c66:	10 92 de 03 	sts	0x03DE, r1
	new_menu->ptr_parent = ptr_parent;
     c6a:	f0 93 e1 03 	sts	0x03E1, r31
     c6e:	e0 93 e0 03 	sts	0x03E0, r30
	
	new_menu->title = title;
     c72:	2c e7       	ldi	r18, 0x7C	; 124
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	db 01       	movw	r26, r22
     c78:	2d 93       	st	X+, r18
     c7a:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     c7c:	90 93 db 03 	sts	0x03DB, r25
     c80:	80 93 da 03 	sts	0x03DA, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c84:	70 93 e7 03 	sts	0x03E7, r23
     c88:	60 93 e6 03 	sts	0x03E6, r22
	new_menu->ptr_child = ptr_child;
     c8c:	10 92 e9 03 	sts	0x03E9, r1
     c90:	10 92 e8 03 	sts	0x03E8, r1
	new_menu->ptr_parent = ptr_parent;
     c94:	f0 93 eb 03 	sts	0x03EB, r31
     c98:	e0 93 ea 03 	sts	0x03EA, r30
	
	new_menu->title = title;
     c9c:	20 e7       	ldi	r18, 0x70	; 112
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	39 83       	std	Y+1, r19	; 0x01
     ca2:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     ca4:	90 93 e5 03 	sts	0x03E5, r25
     ca8:	80 93 e4 03 	sts	0x03E4, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     cac:	f0 93 a1 03 	sts	0x03A1, r31
     cb0:	e0 93 a0 03 	sts	0x03A0, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     cb4:	f0 93 a3 03 	sts	0x03A3, r31
     cb8:	e0 93 a2 03 	sts	0x03A2, r30
	
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <oled_home>:
	}
}

void oled_home(void)
{
	page = 0;
     cc2:	10 92 f9 03 	sts	0x03F9, r1
     cc6:	10 92 f8 03 	sts	0x03F8, r1
	col = 0;
     cca:	10 92 f7 03 	sts	0x03F7, r1
     cce:	10 92 f6 03 	sts	0x03F6, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     cd2:	e0 91 0f 01 	lds	r30, 0x010F
     cd6:	f0 91 10 01 	lds	r31, 0x0110
     cda:	81 e2       	ldi	r24, 0x21	; 33
     cdc:	80 83       	st	Z, r24
     cde:	e0 91 0f 01 	lds	r30, 0x010F
     ce2:	f0 91 10 01 	lds	r31, 0x0110
     ce6:	10 82       	st	Z, r1
     ce8:	e0 91 0f 01 	lds	r30, 0x010F
     cec:	f0 91 10 01 	lds	r31, 0x0110
     cf0:	8f e7       	ldi	r24, 0x7F	; 127
     cf2:	80 83       	st	Z, r24
     cf4:	e0 91 0f 01 	lds	r30, 0x010F
     cf8:	f0 91 10 01 	lds	r31, 0x0110
     cfc:	82 e2       	ldi	r24, 0x22	; 34
     cfe:	80 83       	st	Z, r24
     d00:	e0 91 0f 01 	lds	r30, 0x010F
     d04:	f0 91 10 01 	lds	r31, 0x0110
     d08:	10 82       	st	Z, r1
     d0a:	e0 91 0f 01 	lds	r30, 0x010F
     d0e:	f0 91 10 01 	lds	r31, 0x0110
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	80 83       	st	Z, r24
     d16:	08 95       	ret

00000d18 <oled_goto_line>:
	
	//write_c(0x00);
	//write_c(0x10);
}

void oled_goto_line(unsigned int line){
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	ec 01       	movw	r28, r24
	oled_home();
     d1e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <oled_home>
	page = line;
     d22:	d0 93 f9 03 	sts	0x03F9, r29
     d26:	c0 93 f8 03 	sts	0x03F8, r28
	if(line < 8){
     d2a:	c8 30       	cpi	r28, 0x08	; 8
     d2c:	d1 05       	cpc	r29, r1
     d2e:	88 f4       	brcc	.+34     	; 0xd52 <oled_goto_line+0x3a>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     d30:	e0 91 0f 01 	lds	r30, 0x010F
     d34:	f0 91 10 01 	lds	r31, 0x0110
     d38:	10 82       	st	Z, r1
     d3a:	e0 91 0f 01 	lds	r30, 0x010F
     d3e:	f0 91 10 01 	lds	r31, 0x0110
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	80 83       	st	Z, r24
	oled_home();
	page = line;
	if(line < 8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
     d46:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     d48:	e0 91 0f 01 	lds	r30, 0x010F
     d4c:	f0 91 10 01 	lds	r31, 0x0110
     d50:	c0 83       	st	Z, r28
	if(line < 8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <oled_clear_line>:
		printf("parameter too big, oled_goto_column\n");
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
     d58:	08 97       	sbiw	r24, 0x08	; 8
     d5a:	50 f4       	brcc	.+20     	; 0xd70 <oled_clear_line+0x18>
     d5c:	80 e8       	ldi	r24, 0x80	; 128
     d5e:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
     d60:	e0 91 0d 01 	lds	r30, 0x010D
     d64:	f0 91 0e 01 	lds	r31, 0x010E
     d68:	10 82       	st	Z, r1
     d6a:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	c1 f7       	brne	.-16     	; 0xd60 <oled_clear_line+0x8>
     d70:	08 95       	ret

00000d72 <oled_reset>:

}


void oled_reset(void)
{		
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
     d76:	c0 e0       	ldi	r28, 0x00	; 0
     d78:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
     d7a:	ce 01       	movw	r24, r28
     d7c:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
     d80:	21 96       	adiw	r28, 0x01	; 1
     d82:	c8 30       	cpi	r28, 0x08	; 8
     d84:	d1 05       	cpc	r29, r1
     d86:	c9 f7       	brne	.-14     	; 0xd7a <oled_reset+0x8>
		oled_clear_line(i);
	}
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
     d8e:	85 b7       	in	r24, 0x35	; 53
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     d94:	80 b7       	in	r24, 0x30	; 48
     d96:	80 62       	ori	r24, 0x20	; 32
     d98:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     d9a:	e0 91 0f 01 	lds	r30, 0x010F
     d9e:	f0 91 10 01 	lds	r31, 0x0110
     da2:	8e ea       	ldi	r24, 0xAE	; 174
     da4:	80 83       	st	Z, r24
     da6:	e0 91 0f 01 	lds	r30, 0x010F
     daa:	f0 91 10 01 	lds	r31, 0x0110
     dae:	81 ea       	ldi	r24, 0xA1	; 161
     db0:	80 83       	st	Z, r24
     db2:	e0 91 0f 01 	lds	r30, 0x010F
     db6:	f0 91 10 01 	lds	r31, 0x0110
     dba:	8a ed       	ldi	r24, 0xDA	; 218
     dbc:	80 83       	st	Z, r24
     dbe:	e0 91 0f 01 	lds	r30, 0x010F
     dc2:	f0 91 10 01 	lds	r31, 0x0110
     dc6:	82 e1       	ldi	r24, 0x12	; 18
     dc8:	80 83       	st	Z, r24
     dca:	e0 91 0f 01 	lds	r30, 0x010F
     dce:	f0 91 10 01 	lds	r31, 0x0110
     dd2:	88 ec       	ldi	r24, 0xC8	; 200
     dd4:	80 83       	st	Z, r24
     dd6:	e0 91 0f 01 	lds	r30, 0x010F
     dda:	f0 91 10 01 	lds	r31, 0x0110
     dde:	88 ea       	ldi	r24, 0xA8	; 168
     de0:	80 83       	st	Z, r24
     de2:	e0 91 0f 01 	lds	r30, 0x010F
     de6:	f0 91 10 01 	lds	r31, 0x0110
     dea:	8f e3       	ldi	r24, 0x3F	; 63
     dec:	80 83       	st	Z, r24
     dee:	e0 91 0f 01 	lds	r30, 0x010F
     df2:	f0 91 10 01 	lds	r31, 0x0110
     df6:	85 ed       	ldi	r24, 0xD5	; 213
     df8:	80 83       	st	Z, r24
     dfa:	e0 91 0f 01 	lds	r30, 0x010F
     dfe:	f0 91 10 01 	lds	r31, 0x0110
     e02:	80 e8       	ldi	r24, 0x80	; 128
     e04:	80 83       	st	Z, r24
     e06:	e0 91 0f 01 	lds	r30, 0x010F
     e0a:	f0 91 10 01 	lds	r31, 0x0110
     e0e:	81 e8       	ldi	r24, 0x81	; 129
     e10:	80 83       	st	Z, r24
     e12:	e0 91 0f 01 	lds	r30, 0x010F
     e16:	f0 91 10 01 	lds	r31, 0x0110
     e1a:	80 e5       	ldi	r24, 0x50	; 80
     e1c:	80 83       	st	Z, r24
     e1e:	e0 91 0f 01 	lds	r30, 0x010F
     e22:	f0 91 10 01 	lds	r31, 0x0110
     e26:	89 ed       	ldi	r24, 0xD9	; 217
     e28:	80 83       	st	Z, r24
     e2a:	e0 91 0f 01 	lds	r30, 0x010F
     e2e:	f0 91 10 01 	lds	r31, 0x0110
     e32:	81 e2       	ldi	r24, 0x21	; 33
     e34:	80 83       	st	Z, r24
     e36:	e0 91 0f 01 	lds	r30, 0x010F
     e3a:	f0 91 10 01 	lds	r31, 0x0110
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	80 83       	st	Z, r24
     e42:	e0 91 0f 01 	lds	r30, 0x010F
     e46:	f0 91 10 01 	lds	r31, 0x0110
     e4a:	10 82       	st	Z, r1
     e4c:	e0 91 0f 01 	lds	r30, 0x010F
     e50:	f0 91 10 01 	lds	r31, 0x0110
     e54:	8b ed       	ldi	r24, 0xDB	; 219
     e56:	80 83       	st	Z, r24
     e58:	e0 91 0f 01 	lds	r30, 0x010F
     e5c:	f0 91 10 01 	lds	r31, 0x0110
     e60:	80 e3       	ldi	r24, 0x30	; 48
     e62:	80 83       	st	Z, r24
     e64:	e0 91 0f 01 	lds	r30, 0x010F
     e68:	f0 91 10 01 	lds	r31, 0x0110
     e6c:	8d ea       	ldi	r24, 0xAD	; 173
     e6e:	80 83       	st	Z, r24
     e70:	e0 91 0f 01 	lds	r30, 0x010F
     e74:	f0 91 10 01 	lds	r31, 0x0110
     e78:	10 82       	st	Z, r1
     e7a:	e0 91 0f 01 	lds	r30, 0x010F
     e7e:	f0 91 10 01 	lds	r31, 0x0110
     e82:	84 ea       	ldi	r24, 0xA4	; 164
     e84:	80 83       	st	Z, r24
     e86:	e0 91 0f 01 	lds	r30, 0x010F
     e8a:	f0 91 10 01 	lds	r31, 0x0110
     e8e:	86 ea       	ldi	r24, 0xA6	; 166
     e90:	80 83       	st	Z, r24
     e92:	e0 91 0f 01 	lds	r30, 0x010F
     e96:	f0 91 10 01 	lds	r31, 0x0110
     e9a:	8f ea       	ldi	r24, 0xAF	; 175
     e9c:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
     e9e:	0e 94 b9 06 	call	0xd72	; 0xd72 <oled_reset>
	oled_home();
     ea2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <oled_home>
     ea6:	08 95       	ret

00000ea8 <sram_write_char>:
volatile char *ext_ram = (char *) 0x1800;



int sram_write_char(char letter){
	if(letter != '\0'){
     ea8:	88 23       	and	r24, r24
     eaa:	99 f1       	breq	.+102    	; 0xf12 <sram_write_char+0x6a>
     eac:	e8 2f       	mov	r30, r24
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ec 53       	subi	r30, 0x3C	; 60
     ebe:	f0 40       	sbci	r31, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page*128 + col] = pgm_read_byte(&font[letter-' '][i]);
     ec4:	a0 91 f8 03 	lds	r26, 0x03F8
     ec8:	b0 91 f9 03 	lds	r27, 0x03F9
     ecc:	b6 95       	lsr	r27
     ece:	ba 2f       	mov	r27, r26
     ed0:	aa 27       	eor	r26, r26
     ed2:	b7 95       	ror	r27
     ed4:	a7 95       	ror	r26
     ed6:	20 91 f6 03 	lds	r18, 0x03F6
     eda:	30 91 f7 03 	lds	r19, 0x03F7
     ede:	a2 0f       	add	r26, r18
     ee0:	b3 1f       	adc	r27, r19
     ee2:	20 91 0b 01 	lds	r18, 0x010B
     ee6:	30 91 0c 01 	lds	r19, 0x010C
     eea:	a2 0f       	add	r26, r18
     eec:	b3 1f       	adc	r27, r19
     eee:	24 91       	lpm	r18, Z
     ef0:	2c 93       	st	X, r18
			col++;
     ef2:	20 91 f6 03 	lds	r18, 0x03F6
     ef6:	30 91 f7 03 	lds	r19, 0x03F7
     efa:	2f 5f       	subi	r18, 0xFF	; 255
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	30 93 f7 03 	sts	0x03F7, r19
     f02:	20 93 f6 03 	sts	0x03F6, r18



int sram_write_char(char letter){
	if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	31 96       	adiw	r30, 0x01	; 1
     f0a:	88 30       	cpi	r24, 0x08	; 8
     f0c:	91 05       	cpc	r25, r1
     f0e:	d1 f6       	brne	.-76     	; 0xec4 <sram_write_char+0x1c>
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <sram_write_char+0x70>
			ext_ram[page*128 + col] = pgm_read_byte(&font[letter-' '][i]);
			col++;
		}
		return 1;
	}else{
		return 0;
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	08 95       	ret
	if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page*128 + col] = pgm_read_byte(&font[letter-' '][i]);
			col++;
		}
		return 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 0;
	}
}
     f1c:	08 95       	ret

00000f1e <sram_init>:

void sram_init(void){
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
     f28:	9c 01       	movw	r18, r24
     f2a:	24 0f       	add	r18, r20
     f2c:	35 1f       	adc	r19, r21
     f2e:	e0 91 0b 01 	lds	r30, 0x010B
     f32:	f0 91 0c 01 	lds	r31, 0x010C
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	80 38       	cpi	r24, 0x80	; 128
     f40:	91 05       	cpc	r25, r1
     f42:	91 f7       	brne	.-28     	; 0xf28 <sram_init+0xa>
     f44:	40 58       	subi	r20, 0x80	; 128
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
     f48:	41 15       	cp	r20, r1
     f4a:	84 e0       	ldi	r24, 0x04	; 4
     f4c:	58 07       	cpc	r21, r24
     f4e:	19 f0       	breq	.+6      	; 0xf56 <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
     f50:	87 2f       	mov	r24, r23
     f52:	96 2f       	mov	r25, r22
     f54:	e9 cf       	rjmp	.-46     	; 0xf28 <sram_init+0xa>
     f56:	08 95       	ret

00000f58 <sram_write>:
		}
	}
}

void sram_write(int rad, int kol, char data){
	ext_ram[rad*128 + kol] = data;
     f58:	96 95       	lsr	r25
     f5a:	98 2f       	mov	r25, r24
     f5c:	88 27       	eor	r24, r24
     f5e:	97 95       	ror	r25
     f60:	87 95       	ror	r24
     f62:	68 0f       	add	r22, r24
     f64:	79 1f       	adc	r23, r25
     f66:	e0 91 0b 01 	lds	r30, 0x010B
     f6a:	f0 91 0c 01 	lds	r31, 0x010C
     f6e:	e6 0f       	add	r30, r22
     f70:	f7 1f       	adc	r31, r23
     f72:	40 83       	st	Z, r20
     f74:	08 95       	ret

00000f76 <sram_pixel>:
void sram_write_or(int rad, int kol, char data){
	ext_ram[rad*128 + kol] |= data;
}

void sram_pixel(int x, int y){
	sram_write(x,y,(1<<(y%8)));
     f76:	9b 01       	movw	r18, r22
     f78:	27 70       	andi	r18, 0x07	; 7
     f7a:	30 78       	andi	r19, 0x80	; 128
     f7c:	33 23       	and	r19, r19
     f7e:	34 f4       	brge	.+12     	; 0xf8c <sram_pixel+0x16>
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	31 09       	sbc	r19, r1
     f84:	28 6f       	ori	r18, 0xF8	; 248
     f86:	3f 6f       	ori	r19, 0xFF	; 255
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <sram_pixel+0x20>
     f92:	44 0f       	add	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	2a 95       	dec	r18
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <sram_pixel+0x1c>
     f9a:	0e 94 ac 07 	call	0xf58	; 0xf58 <sram_write>
     f9e:	08 95       	ret

00000fa0 <write_screen>:
}

uint8_t tempchar = ' ';
void write_screen(void){
	oled_goto_line(0);
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 8c 06 	call	0xd18	; 0xd18 <oled_goto_line>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned int r = 0; r < 1; r++){
		for(unsigned int k = 0; k < 128; k++){
			tempchar = ext_ram[r*128 + k];
     fac:	e0 91 0b 01 	lds	r30, 0x010B
     fb0:	f0 91 0c 01 	lds	r31, 0x010C
     fb4:	e8 0f       	add	r30, r24
     fb6:	f9 1f       	adc	r31, r25
     fb8:	20 81       	ld	r18, Z
     fba:	20 93 0a 01 	sts	0x010A, r18
}


void write_d(uint8_t data)
{
	*oled_data = data;
     fbe:	e0 91 0d 01 	lds	r30, 0x010D
     fc2:	f0 91 0e 01 	lds	r31, 0x010E
     fc6:	20 83       	st	Z, r18

uint8_t tempchar = ' ';
void write_screen(void){
	oled_goto_line(0);
	for(unsigned int r = 0; r < 1; r++){
		for(unsigned int k = 0; k < 128; k++){
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	80 38       	cpi	r24, 0x80	; 128
     fcc:	91 05       	cpc	r25, r1
     fce:	71 f7       	brne	.-36     	; 0xfac <write_screen+0xc>
			tempchar = ext_ram[r*128 + k];
			write_d(tempchar);
			
		}
	}
}
     fd0:	08 95       	ret

00000fd2 <send_UART>:
     fd2:	5d 9b       	sbis	0x0b, 5	; 11
     fd4:	fe cf       	rjmp	.-4      	; 0xfd2 <send_UART>
     fd6:	8c b9       	out	0x0c, r24	; 12
     fd8:	08 95       	ret

00000fda <recieve_UART>:
     fda:	5f 9b       	sbis	0x0b, 7	; 11
     fdc:	fe cf       	rjmp	.-4      	; 0xfda <recieve_UART>
     fde:	8c b1       	in	r24, 0x0c	; 12
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	08 95       	ret

00000fe4 <init_UART>:
     fe4:	90 bd       	out	0x20, r25	; 32
     fe6:	89 b9       	out	0x09, r24	; 9
     fe8:	88 e1       	ldi	r24, 0x18	; 24
     fea:	8a b9       	out	0x0a, r24	; 10
     fec:	6d ee       	ldi	r22, 0xED	; 237
     fee:	77 e0       	ldi	r23, 0x07	; 7
     ff0:	89 ee       	ldi	r24, 0xE9	; 233
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <fdevopen>
     ff8:	08 95       	ret

00000ffa <__subsf3>:
     ffa:	50 58       	subi	r21, 0x80	; 128

00000ffc <__addsf3>:
     ffc:	bb 27       	eor	r27, r27
     ffe:	aa 27       	eor	r26, r26
    1000:	0e d0       	rcall	.+28     	; 0x101e <__addsf3x>
    1002:	4d c1       	rjmp	.+666    	; 0x129e <__fp_round>
    1004:	3e d1       	rcall	.+636    	; 0x1282 <__fp_pscA>
    1006:	30 f0       	brcs	.+12     	; 0x1014 <__addsf3+0x18>
    1008:	43 d1       	rcall	.+646    	; 0x1290 <__fp_pscB>
    100a:	20 f0       	brcs	.+8      	; 0x1014 <__addsf3+0x18>
    100c:	31 f4       	brne	.+12     	; 0x101a <__addsf3+0x1e>
    100e:	9f 3f       	cpi	r25, 0xFF	; 255
    1010:	11 f4       	brne	.+4      	; 0x1016 <__addsf3+0x1a>
    1012:	1e f4       	brtc	.+6      	; 0x101a <__addsf3+0x1e>
    1014:	33 c1       	rjmp	.+614    	; 0x127c <__fp_nan>
    1016:	0e f4       	brtc	.+2      	; 0x101a <__addsf3+0x1e>
    1018:	e0 95       	com	r30
    101a:	e7 fb       	bst	r30, 7
    101c:	29 c1       	rjmp	.+594    	; 0x1270 <__fp_inf>

0000101e <__addsf3x>:
    101e:	e9 2f       	mov	r30, r25
    1020:	4f d1       	rcall	.+670    	; 0x12c0 <__fp_split3>
    1022:	80 f3       	brcs	.-32     	; 0x1004 <__addsf3+0x8>
    1024:	ba 17       	cp	r27, r26
    1026:	62 07       	cpc	r22, r18
    1028:	73 07       	cpc	r23, r19
    102a:	84 07       	cpc	r24, r20
    102c:	95 07       	cpc	r25, r21
    102e:	18 f0       	brcs	.+6      	; 0x1036 <__addsf3x+0x18>
    1030:	71 f4       	brne	.+28     	; 0x104e <__addsf3x+0x30>
    1032:	9e f5       	brtc	.+102    	; 0x109a <__addsf3x+0x7c>
    1034:	67 c1       	rjmp	.+718    	; 0x1304 <__fp_zero>
    1036:	0e f4       	brtc	.+2      	; 0x103a <__addsf3x+0x1c>
    1038:	e0 95       	com	r30
    103a:	0b 2e       	mov	r0, r27
    103c:	ba 2f       	mov	r27, r26
    103e:	a0 2d       	mov	r26, r0
    1040:	0b 01       	movw	r0, r22
    1042:	b9 01       	movw	r22, r18
    1044:	90 01       	movw	r18, r0
    1046:	0c 01       	movw	r0, r24
    1048:	ca 01       	movw	r24, r20
    104a:	a0 01       	movw	r20, r0
    104c:	11 24       	eor	r1, r1
    104e:	ff 27       	eor	r31, r31
    1050:	59 1b       	sub	r21, r25
    1052:	99 f0       	breq	.+38     	; 0x107a <__addsf3x+0x5c>
    1054:	59 3f       	cpi	r21, 0xF9	; 249
    1056:	50 f4       	brcc	.+20     	; 0x106c <__addsf3x+0x4e>
    1058:	50 3e       	cpi	r21, 0xE0	; 224
    105a:	68 f1       	brcs	.+90     	; 0x10b6 <__addsf3x+0x98>
    105c:	1a 16       	cp	r1, r26
    105e:	f0 40       	sbci	r31, 0x00	; 0
    1060:	a2 2f       	mov	r26, r18
    1062:	23 2f       	mov	r18, r19
    1064:	34 2f       	mov	r19, r20
    1066:	44 27       	eor	r20, r20
    1068:	58 5f       	subi	r21, 0xF8	; 248
    106a:	f3 cf       	rjmp	.-26     	; 0x1052 <__addsf3x+0x34>
    106c:	46 95       	lsr	r20
    106e:	37 95       	ror	r19
    1070:	27 95       	ror	r18
    1072:	a7 95       	ror	r26
    1074:	f0 40       	sbci	r31, 0x00	; 0
    1076:	53 95       	inc	r21
    1078:	c9 f7       	brne	.-14     	; 0x106c <__addsf3x+0x4e>
    107a:	7e f4       	brtc	.+30     	; 0x109a <__addsf3x+0x7c>
    107c:	1f 16       	cp	r1, r31
    107e:	ba 0b       	sbc	r27, r26
    1080:	62 0b       	sbc	r22, r18
    1082:	73 0b       	sbc	r23, r19
    1084:	84 0b       	sbc	r24, r20
    1086:	ba f0       	brmi	.+46     	; 0x10b6 <__addsf3x+0x98>
    1088:	91 50       	subi	r25, 0x01	; 1
    108a:	a1 f0       	breq	.+40     	; 0x10b4 <__addsf3x+0x96>
    108c:	ff 0f       	add	r31, r31
    108e:	bb 1f       	adc	r27, r27
    1090:	66 1f       	adc	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	c2 f7       	brpl	.-16     	; 0x1088 <__addsf3x+0x6a>
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <__addsf3x+0x98>
    109a:	ba 0f       	add	r27, r26
    109c:	62 1f       	adc	r22, r18
    109e:	73 1f       	adc	r23, r19
    10a0:	84 1f       	adc	r24, r20
    10a2:	48 f4       	brcc	.+18     	; 0x10b6 <__addsf3x+0x98>
    10a4:	87 95       	ror	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f7 95       	ror	r31
    10ae:	9e 3f       	cpi	r25, 0xFE	; 254
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <__addsf3x+0x96>
    10b2:	b3 cf       	rjmp	.-154    	; 0x101a <__addsf3+0x1e>
    10b4:	93 95       	inc	r25
    10b6:	88 0f       	add	r24, r24
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <__addsf3x+0x9e>
    10ba:	99 27       	eor	r25, r25
    10bc:	ee 0f       	add	r30, r30
    10be:	97 95       	ror	r25
    10c0:	87 95       	ror	r24
    10c2:	08 95       	ret

000010c4 <__divsf3>:
    10c4:	0c d0       	rcall	.+24     	; 0x10de <__divsf3x>
    10c6:	eb c0       	rjmp	.+470    	; 0x129e <__fp_round>
    10c8:	e3 d0       	rcall	.+454    	; 0x1290 <__fp_pscB>
    10ca:	40 f0       	brcs	.+16     	; 0x10dc <__divsf3+0x18>
    10cc:	da d0       	rcall	.+436    	; 0x1282 <__fp_pscA>
    10ce:	30 f0       	brcs	.+12     	; 0x10dc <__divsf3+0x18>
    10d0:	21 f4       	brne	.+8      	; 0x10da <__divsf3+0x16>
    10d2:	5f 3f       	cpi	r21, 0xFF	; 255
    10d4:	19 f0       	breq	.+6      	; 0x10dc <__divsf3+0x18>
    10d6:	cc c0       	rjmp	.+408    	; 0x1270 <__fp_inf>
    10d8:	51 11       	cpse	r21, r1
    10da:	15 c1       	rjmp	.+554    	; 0x1306 <__fp_szero>
    10dc:	cf c0       	rjmp	.+414    	; 0x127c <__fp_nan>

000010de <__divsf3x>:
    10de:	f0 d0       	rcall	.+480    	; 0x12c0 <__fp_split3>
    10e0:	98 f3       	brcs	.-26     	; 0x10c8 <__divsf3+0x4>

000010e2 <__divsf3_pse>:
    10e2:	99 23       	and	r25, r25
    10e4:	c9 f3       	breq	.-14     	; 0x10d8 <__divsf3+0x14>
    10e6:	55 23       	and	r21, r21
    10e8:	b1 f3       	breq	.-20     	; 0x10d6 <__divsf3+0x12>
    10ea:	95 1b       	sub	r25, r21
    10ec:	55 0b       	sbc	r21, r21
    10ee:	bb 27       	eor	r27, r27
    10f0:	aa 27       	eor	r26, r26
    10f2:	62 17       	cp	r22, r18
    10f4:	73 07       	cpc	r23, r19
    10f6:	84 07       	cpc	r24, r20
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <__divsf3_pse+0x26>
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	44 1f       	adc	r20, r20
    1104:	aa 1f       	adc	r26, r26
    1106:	a9 f3       	breq	.-22     	; 0x10f2 <__divsf3_pse+0x10>
    1108:	33 d0       	rcall	.+102    	; 0x1170 <__divsf3_pse+0x8e>
    110a:	0e 2e       	mov	r0, r30
    110c:	3a f0       	brmi	.+14     	; 0x111c <__divsf3_pse+0x3a>
    110e:	e0 e8       	ldi	r30, 0x80	; 128
    1110:	30 d0       	rcall	.+96     	; 0x1172 <__divsf3_pse+0x90>
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	e6 95       	lsr	r30
    1118:	00 1c       	adc	r0, r0
    111a:	ca f7       	brpl	.-14     	; 0x110e <__divsf3_pse+0x2c>
    111c:	29 d0       	rcall	.+82     	; 0x1170 <__divsf3_pse+0x8e>
    111e:	fe 2f       	mov	r31, r30
    1120:	27 d0       	rcall	.+78     	; 0x1170 <__divsf3_pse+0x8e>
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	bb 1f       	adc	r27, r27
    112a:	26 17       	cp	r18, r22
    112c:	37 07       	cpc	r19, r23
    112e:	48 07       	cpc	r20, r24
    1130:	ab 07       	cpc	r26, r27
    1132:	b0 e8       	ldi	r27, 0x80	; 128
    1134:	09 f0       	breq	.+2      	; 0x1138 <__divsf3_pse+0x56>
    1136:	bb 0b       	sbc	r27, r27
    1138:	80 2d       	mov	r24, r0
    113a:	bf 01       	movw	r22, r30
    113c:	ff 27       	eor	r31, r31
    113e:	93 58       	subi	r25, 0x83	; 131
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	2a f0       	brmi	.+10     	; 0x114e <__divsf3_pse+0x6c>
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	51 05       	cpc	r21, r1
    1148:	68 f0       	brcs	.+26     	; 0x1164 <__divsf3_pse+0x82>
    114a:	92 c0       	rjmp	.+292    	; 0x1270 <__fp_inf>
    114c:	dc c0       	rjmp	.+440    	; 0x1306 <__fp_szero>
    114e:	5f 3f       	cpi	r21, 0xFF	; 255
    1150:	ec f3       	brlt	.-6      	; 0x114c <__divsf3_pse+0x6a>
    1152:	98 3e       	cpi	r25, 0xE8	; 232
    1154:	dc f3       	brlt	.-10     	; 0x114c <__divsf3_pse+0x6a>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f7 95       	ror	r31
    1160:	9f 5f       	subi	r25, 0xFF	; 255
    1162:	c9 f7       	brne	.-14     	; 0x1156 <__divsf3_pse+0x74>
    1164:	88 0f       	add	r24, r24
    1166:	91 1d       	adc	r25, r1
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	97 f9       	bld	r25, 7
    116e:	08 95       	ret
    1170:	e1 e0       	ldi	r30, 0x01	; 1
    1172:	66 0f       	add	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	bb 1f       	adc	r27, r27
    117a:	62 17       	cp	r22, r18
    117c:	73 07       	cpc	r23, r19
    117e:	84 07       	cpc	r24, r20
    1180:	ba 07       	cpc	r27, r26
    1182:	20 f0       	brcs	.+8      	; 0x118c <__divsf3_pse+0xaa>
    1184:	62 1b       	sub	r22, r18
    1186:	73 0b       	sbc	r23, r19
    1188:	84 0b       	sbc	r24, r20
    118a:	ba 0b       	sbc	r27, r26
    118c:	ee 1f       	adc	r30, r30
    118e:	88 f7       	brcc	.-30     	; 0x1172 <__divsf3_pse+0x90>
    1190:	e0 95       	com	r30
    1192:	08 95       	ret

00001194 <__fixsfsi>:
    1194:	04 d0       	rcall	.+8      	; 0x119e <__fixunssfsi>
    1196:	68 94       	set
    1198:	b1 11       	cpse	r27, r1
    119a:	b5 c0       	rjmp	.+362    	; 0x1306 <__fp_szero>
    119c:	08 95       	ret

0000119e <__fixunssfsi>:
    119e:	98 d0       	rcall	.+304    	; 0x12d0 <__fp_splitA>
    11a0:	88 f0       	brcs	.+34     	; 0x11c4 <__fixunssfsi+0x26>
    11a2:	9f 57       	subi	r25, 0x7F	; 127
    11a4:	90 f0       	brcs	.+36     	; 0x11ca <__fixunssfsi+0x2c>
    11a6:	b9 2f       	mov	r27, r25
    11a8:	99 27       	eor	r25, r25
    11aa:	b7 51       	subi	r27, 0x17	; 23
    11ac:	a0 f0       	brcs	.+40     	; 0x11d6 <__fixunssfsi+0x38>
    11ae:	d1 f0       	breq	.+52     	; 0x11e4 <__fixunssfsi+0x46>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	88 1f       	adc	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	1a f0       	brmi	.+6      	; 0x11c0 <__fixunssfsi+0x22>
    11ba:	ba 95       	dec	r27
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__fixunssfsi+0x12>
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <__fixunssfsi+0x46>
    11c0:	b1 30       	cpi	r27, 0x01	; 1
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <__fixunssfsi+0x46>
    11c4:	9f d0       	rcall	.+318    	; 0x1304 <__fp_zero>
    11c6:	b1 e0       	ldi	r27, 0x01	; 1
    11c8:	08 95       	ret
    11ca:	9c c0       	rjmp	.+312    	; 0x1304 <__fp_zero>
    11cc:	67 2f       	mov	r22, r23
    11ce:	78 2f       	mov	r23, r24
    11d0:	88 27       	eor	r24, r24
    11d2:	b8 5f       	subi	r27, 0xF8	; 248
    11d4:	39 f0       	breq	.+14     	; 0x11e4 <__fixunssfsi+0x46>
    11d6:	b9 3f       	cpi	r27, 0xF9	; 249
    11d8:	cc f3       	brlt	.-14     	; 0x11cc <__fixunssfsi+0x2e>
    11da:	86 95       	lsr	r24
    11dc:	77 95       	ror	r23
    11de:	67 95       	ror	r22
    11e0:	b3 95       	inc	r27
    11e2:	d9 f7       	brne	.-10     	; 0x11da <__fixunssfsi+0x3c>
    11e4:	3e f4       	brtc	.+14     	; 0x11f4 <__fixunssfsi+0x56>
    11e6:	90 95       	com	r25
    11e8:	80 95       	com	r24
    11ea:	70 95       	com	r23
    11ec:	61 95       	neg	r22
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	08 95       	ret

000011f6 <__floatunsisf>:
    11f6:	e8 94       	clt
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <__floatsisf+0x12>

000011fa <__floatsisf>:
    11fa:	97 fb       	bst	r25, 7
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__floatsisf+0x12>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	99 23       	and	r25, r25
    120e:	a9 f0       	breq	.+42     	; 0x123a <__floatsisf+0x40>
    1210:	f9 2f       	mov	r31, r25
    1212:	96 e9       	ldi	r25, 0x96	; 150
    1214:	bb 27       	eor	r27, r27
    1216:	93 95       	inc	r25
    1218:	f6 95       	lsr	r31
    121a:	87 95       	ror	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	b7 95       	ror	r27
    1222:	f1 11       	cpse	r31, r1
    1224:	f8 cf       	rjmp	.-16     	; 0x1216 <__floatsisf+0x1c>
    1226:	fa f4       	brpl	.+62     	; 0x1266 <__floatsisf+0x6c>
    1228:	bb 0f       	add	r27, r27
    122a:	11 f4       	brne	.+4      	; 0x1230 <__floatsisf+0x36>
    122c:	60 ff       	sbrs	r22, 0
    122e:	1b c0       	rjmp	.+54     	; 0x1266 <__floatsisf+0x6c>
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <__floatsisf+0x6c>
    123a:	88 23       	and	r24, r24
    123c:	11 f0       	breq	.+4      	; 0x1242 <__floatsisf+0x48>
    123e:	96 e9       	ldi	r25, 0x96	; 150
    1240:	11 c0       	rjmp	.+34     	; 0x1264 <__floatsisf+0x6a>
    1242:	77 23       	and	r23, r23
    1244:	21 f0       	breq	.+8      	; 0x124e <__floatsisf+0x54>
    1246:	9e e8       	ldi	r25, 0x8E	; 142
    1248:	87 2f       	mov	r24, r23
    124a:	76 2f       	mov	r23, r22
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <__floatsisf+0x5e>
    124e:	66 23       	and	r22, r22
    1250:	71 f0       	breq	.+28     	; 0x126e <__floatsisf+0x74>
    1252:	96 e8       	ldi	r25, 0x86	; 134
    1254:	86 2f       	mov	r24, r22
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	2a f0       	brmi	.+10     	; 0x1266 <__floatsisf+0x6c>
    125c:	9a 95       	dec	r25
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	da f7       	brpl	.-10     	; 0x125c <__floatsisf+0x62>
    1266:	88 0f       	add	r24, r24
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__fp_inf>:
    1270:	97 f9       	bld	r25, 7
    1272:	9f 67       	ori	r25, 0x7F	; 127
    1274:	80 e8       	ldi	r24, 0x80	; 128
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	08 95       	ret

0000127c <__fp_nan>:
    127c:	9f ef       	ldi	r25, 0xFF	; 255
    127e:	80 ec       	ldi	r24, 0xC0	; 192
    1280:	08 95       	ret

00001282 <__fp_pscA>:
    1282:	00 24       	eor	r0, r0
    1284:	0a 94       	dec	r0
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	09 06       	cpc	r0, r25
    128e:	08 95       	ret

00001290 <__fp_pscB>:
    1290:	00 24       	eor	r0, r0
    1292:	0a 94       	dec	r0
    1294:	12 16       	cp	r1, r18
    1296:	13 06       	cpc	r1, r19
    1298:	14 06       	cpc	r1, r20
    129a:	05 06       	cpc	r0, r21
    129c:	08 95       	ret

0000129e <__fp_round>:
    129e:	09 2e       	mov	r0, r25
    12a0:	03 94       	inc	r0
    12a2:	00 0c       	add	r0, r0
    12a4:	11 f4       	brne	.+4      	; 0x12aa <__fp_round+0xc>
    12a6:	88 23       	and	r24, r24
    12a8:	52 f0       	brmi	.+20     	; 0x12be <__fp_round+0x20>
    12aa:	bb 0f       	add	r27, r27
    12ac:	40 f4       	brcc	.+16     	; 0x12be <__fp_round+0x20>
    12ae:	bf 2b       	or	r27, r31
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <__fp_round+0x18>
    12b2:	60 ff       	sbrs	r22, 0
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <__fp_round+0x20>
    12b6:	6f 5f       	subi	r22, 0xFF	; 255
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	8f 4f       	sbci	r24, 0xFF	; 255
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	08 95       	ret

000012c0 <__fp_split3>:
    12c0:	57 fd       	sbrc	r21, 7
    12c2:	90 58       	subi	r25, 0x80	; 128
    12c4:	44 0f       	add	r20, r20
    12c6:	55 1f       	adc	r21, r21
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <__fp_splitA+0x10>
    12ca:	5f 3f       	cpi	r21, 0xFF	; 255
    12cc:	71 f0       	breq	.+28     	; 0x12ea <__fp_splitA+0x1a>
    12ce:	47 95       	ror	r20

000012d0 <__fp_splitA>:
    12d0:	88 0f       	add	r24, r24
    12d2:	97 fb       	bst	r25, 7
    12d4:	99 1f       	adc	r25, r25
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <__fp_splitA+0x20>
    12d8:	9f 3f       	cpi	r25, 0xFF	; 255
    12da:	79 f0       	breq	.+30     	; 0x12fa <__fp_splitA+0x2a>
    12dc:	87 95       	ror	r24
    12de:	08 95       	ret
    12e0:	12 16       	cp	r1, r18
    12e2:	13 06       	cpc	r1, r19
    12e4:	14 06       	cpc	r1, r20
    12e6:	55 1f       	adc	r21, r21
    12e8:	f2 cf       	rjmp	.-28     	; 0x12ce <__fp_split3+0xe>
    12ea:	46 95       	lsr	r20
    12ec:	f1 df       	rcall	.-30     	; 0x12d0 <__fp_splitA>
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <__fp_splitA+0x30>
    12f0:	16 16       	cp	r1, r22
    12f2:	17 06       	cpc	r1, r23
    12f4:	18 06       	cpc	r1, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	f1 cf       	rjmp	.-30     	; 0x12dc <__fp_splitA+0xc>
    12fa:	86 95       	lsr	r24
    12fc:	71 05       	cpc	r23, r1
    12fe:	61 05       	cpc	r22, r1
    1300:	08 94       	sec
    1302:	08 95       	ret

00001304 <__fp_zero>:
    1304:	e8 94       	clt

00001306 <__fp_szero>:
    1306:	bb 27       	eor	r27, r27
    1308:	66 27       	eor	r22, r22
    130a:	77 27       	eor	r23, r23
    130c:	cb 01       	movw	r24, r22
    130e:	97 f9       	bld	r25, 7
    1310:	08 95       	ret

00001312 <__mulsf3>:
    1312:	0b d0       	rcall	.+22     	; 0x132a <__mulsf3x>
    1314:	c4 cf       	rjmp	.-120    	; 0x129e <__fp_round>
    1316:	b5 df       	rcall	.-150    	; 0x1282 <__fp_pscA>
    1318:	28 f0       	brcs	.+10     	; 0x1324 <__mulsf3+0x12>
    131a:	ba df       	rcall	.-140    	; 0x1290 <__fp_pscB>
    131c:	18 f0       	brcs	.+6      	; 0x1324 <__mulsf3+0x12>
    131e:	95 23       	and	r25, r21
    1320:	09 f0       	breq	.+2      	; 0x1324 <__mulsf3+0x12>
    1322:	a6 cf       	rjmp	.-180    	; 0x1270 <__fp_inf>
    1324:	ab cf       	rjmp	.-170    	; 0x127c <__fp_nan>
    1326:	11 24       	eor	r1, r1
    1328:	ee cf       	rjmp	.-36     	; 0x1306 <__fp_szero>

0000132a <__mulsf3x>:
    132a:	ca df       	rcall	.-108    	; 0x12c0 <__fp_split3>
    132c:	a0 f3       	brcs	.-24     	; 0x1316 <__mulsf3+0x4>

0000132e <__mulsf3_pse>:
    132e:	95 9f       	mul	r25, r21
    1330:	d1 f3       	breq	.-12     	; 0x1326 <__mulsf3+0x14>
    1332:	95 0f       	add	r25, r21
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	55 1f       	adc	r21, r21
    1338:	62 9f       	mul	r22, r18
    133a:	f0 01       	movw	r30, r0
    133c:	72 9f       	mul	r23, r18
    133e:	bb 27       	eor	r27, r27
    1340:	f0 0d       	add	r31, r0
    1342:	b1 1d       	adc	r27, r1
    1344:	63 9f       	mul	r22, r19
    1346:	aa 27       	eor	r26, r26
    1348:	f0 0d       	add	r31, r0
    134a:	b1 1d       	adc	r27, r1
    134c:	aa 1f       	adc	r26, r26
    134e:	64 9f       	mul	r22, r20
    1350:	66 27       	eor	r22, r22
    1352:	b0 0d       	add	r27, r0
    1354:	a1 1d       	adc	r26, r1
    1356:	66 1f       	adc	r22, r22
    1358:	82 9f       	mul	r24, r18
    135a:	22 27       	eor	r18, r18
    135c:	b0 0d       	add	r27, r0
    135e:	a1 1d       	adc	r26, r1
    1360:	62 1f       	adc	r22, r18
    1362:	73 9f       	mul	r23, r19
    1364:	b0 0d       	add	r27, r0
    1366:	a1 1d       	adc	r26, r1
    1368:	62 1f       	adc	r22, r18
    136a:	83 9f       	mul	r24, r19
    136c:	a0 0d       	add	r26, r0
    136e:	61 1d       	adc	r22, r1
    1370:	22 1f       	adc	r18, r18
    1372:	74 9f       	mul	r23, r20
    1374:	33 27       	eor	r19, r19
    1376:	a0 0d       	add	r26, r0
    1378:	61 1d       	adc	r22, r1
    137a:	23 1f       	adc	r18, r19
    137c:	84 9f       	mul	r24, r20
    137e:	60 0d       	add	r22, r0
    1380:	21 1d       	adc	r18, r1
    1382:	82 2f       	mov	r24, r18
    1384:	76 2f       	mov	r23, r22
    1386:	6a 2f       	mov	r22, r26
    1388:	11 24       	eor	r1, r1
    138a:	9f 57       	subi	r25, 0x7F	; 127
    138c:	50 40       	sbci	r21, 0x00	; 0
    138e:	8a f0       	brmi	.+34     	; 0x13b2 <__mulsf3_pse+0x84>
    1390:	e1 f0       	breq	.+56     	; 0x13ca <__mulsf3_pse+0x9c>
    1392:	88 23       	and	r24, r24
    1394:	4a f0       	brmi	.+18     	; 0x13a8 <__mulsf3_pse+0x7a>
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	bb 1f       	adc	r27, r27
    139c:	66 1f       	adc	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	88 1f       	adc	r24, r24
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	a9 f7       	brne	.-22     	; 0x1392 <__mulsf3_pse+0x64>
    13a8:	9e 3f       	cpi	r25, 0xFE	; 254
    13aa:	51 05       	cpc	r21, r1
    13ac:	70 f0       	brcs	.+28     	; 0x13ca <__mulsf3_pse+0x9c>
    13ae:	60 cf       	rjmp	.-320    	; 0x1270 <__fp_inf>
    13b0:	aa cf       	rjmp	.-172    	; 0x1306 <__fp_szero>
    13b2:	5f 3f       	cpi	r21, 0xFF	; 255
    13b4:	ec f3       	brlt	.-6      	; 0x13b0 <__mulsf3_pse+0x82>
    13b6:	98 3e       	cpi	r25, 0xE8	; 232
    13b8:	dc f3       	brlt	.-10     	; 0x13b0 <__mulsf3_pse+0x82>
    13ba:	86 95       	lsr	r24
    13bc:	77 95       	ror	r23
    13be:	67 95       	ror	r22
    13c0:	b7 95       	ror	r27
    13c2:	f7 95       	ror	r31
    13c4:	e7 95       	ror	r30
    13c6:	9f 5f       	subi	r25, 0xFF	; 255
    13c8:	c1 f7       	brne	.-16     	; 0x13ba <__mulsf3_pse+0x8c>
    13ca:	fe 2b       	or	r31, r30
    13cc:	88 0f       	add	r24, r24
    13ce:	91 1d       	adc	r25, r1
    13d0:	96 95       	lsr	r25
    13d2:	87 95       	ror	r24
    13d4:	97 f9       	bld	r25, 7
    13d6:	08 95       	ret

000013d8 <__divmodhi4>:
    13d8:	97 fb       	bst	r25, 7
    13da:	07 2e       	mov	r0, r23
    13dc:	16 f4       	brtc	.+4      	; 0x13e2 <__divmodhi4+0xa>
    13de:	00 94       	com	r0
    13e0:	07 d0       	rcall	.+14     	; 0x13f0 <__divmodhi4_neg1>
    13e2:	77 fd       	sbrc	r23, 7
    13e4:	09 d0       	rcall	.+18     	; 0x13f8 <__divmodhi4_neg2>
    13e6:	0e 94 00 0a 	call	0x1400	; 0x1400 <__udivmodhi4>
    13ea:	07 fc       	sbrc	r0, 7
    13ec:	05 d0       	rcall	.+10     	; 0x13f8 <__divmodhi4_neg2>
    13ee:	3e f4       	brtc	.+14     	; 0x13fe <__divmodhi4_exit>

000013f0 <__divmodhi4_neg1>:
    13f0:	90 95       	com	r25
    13f2:	81 95       	neg	r24
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	08 95       	ret

000013f8 <__divmodhi4_neg2>:
    13f8:	70 95       	com	r23
    13fa:	61 95       	neg	r22
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255

000013fe <__divmodhi4_exit>:
    13fe:	08 95       	ret

00001400 <__udivmodhi4>:
    1400:	aa 1b       	sub	r26, r26
    1402:	bb 1b       	sub	r27, r27
    1404:	51 e1       	ldi	r21, 0x11	; 17
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <__udivmodhi4_ep>

00001408 <__udivmodhi4_loop>:
    1408:	aa 1f       	adc	r26, r26
    140a:	bb 1f       	adc	r27, r27
    140c:	a6 17       	cp	r26, r22
    140e:	b7 07       	cpc	r27, r23
    1410:	10 f0       	brcs	.+4      	; 0x1416 <__udivmodhi4_ep>
    1412:	a6 1b       	sub	r26, r22
    1414:	b7 0b       	sbc	r27, r23

00001416 <__udivmodhi4_ep>:
    1416:	88 1f       	adc	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	5a 95       	dec	r21
    141c:	a9 f7       	brne	.-22     	; 0x1408 <__udivmodhi4_loop>
    141e:	80 95       	com	r24
    1420:	90 95       	com	r25
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	08 95       	ret

00001428 <do_rand>:
    1428:	8f 92       	push	r8
    142a:	9f 92       	push	r9
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	ec 01       	movw	r28, r24
    143e:	68 81       	ld	r22, Y
    1440:	79 81       	ldd	r23, Y+1	; 0x01
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	61 15       	cp	r22, r1
    1448:	71 05       	cpc	r23, r1
    144a:	81 05       	cpc	r24, r1
    144c:	91 05       	cpc	r25, r1
    144e:	21 f4       	brne	.+8      	; 0x1458 <do_rand+0x30>
    1450:	64 e2       	ldi	r22, 0x24	; 36
    1452:	79 ed       	ldi	r23, 0xD9	; 217
    1454:	8b e5       	ldi	r24, 0x5B	; 91
    1456:	97 e0       	ldi	r25, 0x07	; 7
    1458:	2d e1       	ldi	r18, 0x1D	; 29
    145a:	33 ef       	ldi	r19, 0xF3	; 243
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__divmodsi4>
    1464:	49 01       	movw	r8, r18
    1466:	5a 01       	movw	r10, r20
    1468:	9b 01       	movw	r18, r22
    146a:	ac 01       	movw	r20, r24
    146c:	a7 ea       	ldi	r26, 0xA7	; 167
    146e:	b1 e4       	ldi	r27, 0x41	; 65
    1470:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__muluhisi3>
    1474:	6b 01       	movw	r12, r22
    1476:	7c 01       	movw	r14, r24
    1478:	ac ee       	ldi	r26, 0xEC	; 236
    147a:	b4 ef       	ldi	r27, 0xF4	; 244
    147c:	a5 01       	movw	r20, r10
    147e:	94 01       	movw	r18, r8
    1480:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__mulohisi3>
    1484:	c6 0e       	add	r12, r22
    1486:	d7 1e       	adc	r13, r23
    1488:	e8 1e       	adc	r14, r24
    148a:	f9 1e       	adc	r15, r25
    148c:	f7 fe       	sbrs	r15, 7
    148e:	06 c0       	rjmp	.+12     	; 0x149c <do_rand+0x74>
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	c8 1a       	sub	r12, r24
    1494:	d1 08       	sbc	r13, r1
    1496:	e1 08       	sbc	r14, r1
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	f8 0a       	sbc	r15, r24
    149c:	c8 82       	st	Y, r12
    149e:	d9 82       	std	Y+1, r13	; 0x01
    14a0:	ea 82       	std	Y+2, r14	; 0x02
    14a2:	fb 82       	std	Y+3, r15	; 0x03
    14a4:	c6 01       	movw	r24, r12
    14a6:	9f 77       	andi	r25, 0x7F	; 127
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	bf 90       	pop	r11
    14b6:	af 90       	pop	r10
    14b8:	9f 90       	pop	r9
    14ba:	8f 90       	pop	r8
    14bc:	08 95       	ret

000014be <rand_r>:
    14be:	0e 94 14 0a 	call	0x1428	; 0x1428 <do_rand>
    14c2:	08 95       	ret

000014c4 <rand>:
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	0e 94 14 0a 	call	0x1428	; 0x1428 <do_rand>
    14cc:	08 95       	ret

000014ce <srand>:
    14ce:	a0 e0       	ldi	r26, 0x00	; 0
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	80 93 00 01 	sts	0x0100, r24
    14d6:	90 93 01 01 	sts	0x0101, r25
    14da:	a0 93 02 01 	sts	0x0102, r26
    14de:	b0 93 03 01 	sts	0x0103, r27
    14e2:	08 95       	ret

000014e4 <fdevopen>:
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	ec 01       	movw	r28, r24
    14ee:	8b 01       	movw	r16, r22
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	31 f4       	brne	.+12     	; 0x1500 <fdevopen+0x1c>
    14f4:	61 15       	cp	r22, r1
    14f6:	71 05       	cpc	r23, r1
    14f8:	19 f4       	brne	.+6      	; 0x1500 <fdevopen+0x1c>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	38 c0       	rjmp	.+112    	; 0x1570 <fdevopen+0x8c>
    1500:	6e e0       	ldi	r22, 0x0E	; 14
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <calloc>
    150c:	fc 01       	movw	r30, r24
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	a1 f3       	breq	.-24     	; 0x14fa <fdevopen+0x16>
    1512:	80 e8       	ldi	r24, 0x80	; 128
    1514:	83 83       	std	Z+3, r24	; 0x03
    1516:	01 15       	cp	r16, r1
    1518:	11 05       	cpc	r17, r1
    151a:	71 f0       	breq	.+28     	; 0x1538 <fdevopen+0x54>
    151c:	13 87       	std	Z+11, r17	; 0x0b
    151e:	02 87       	std	Z+10, r16	; 0x0a
    1520:	81 e8       	ldi	r24, 0x81	; 129
    1522:	83 83       	std	Z+3, r24	; 0x03
    1524:	80 91 fa 03 	lds	r24, 0x03FA
    1528:	90 91 fb 03 	lds	r25, 0x03FB
    152c:	89 2b       	or	r24, r25
    152e:	21 f4       	brne	.+8      	; 0x1538 <fdevopen+0x54>
    1530:	f0 93 fb 03 	sts	0x03FB, r31
    1534:	e0 93 fa 03 	sts	0x03FA, r30
    1538:	20 97       	sbiw	r28, 0x00	; 0
    153a:	c9 f0       	breq	.+50     	; 0x156e <fdevopen+0x8a>
    153c:	d1 87       	std	Z+9, r29	; 0x09
    153e:	c0 87       	std	Z+8, r28	; 0x08
    1540:	83 81       	ldd	r24, Z+3	; 0x03
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	83 83       	std	Z+3, r24	; 0x03
    1546:	80 91 fc 03 	lds	r24, 0x03FC
    154a:	90 91 fd 03 	lds	r25, 0x03FD
    154e:	89 2b       	or	r24, r25
    1550:	71 f4       	brne	.+28     	; 0x156e <fdevopen+0x8a>
    1552:	f0 93 fd 03 	sts	0x03FD, r31
    1556:	e0 93 fc 03 	sts	0x03FC, r30
    155a:	80 91 fe 03 	lds	r24, 0x03FE
    155e:	90 91 ff 03 	lds	r25, 0x03FF
    1562:	89 2b       	or	r24, r25
    1564:	21 f4       	brne	.+8      	; 0x156e <fdevopen+0x8a>
    1566:	f0 93 ff 03 	sts	0x03FF, r31
    156a:	e0 93 fe 03 	sts	0x03FE, r30
    156e:	cf 01       	movw	r24, r30
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <printf>:
    157a:	a0 e0       	ldi	r26, 0x00	; 0
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e3 ec       	ldi	r30, 0xC3	; 195
    1580:	fa e0       	ldi	r31, 0x0A	; 10
    1582:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__prologue_saves__+0x20>
    1586:	fe 01       	movw	r30, r28
    1588:	35 96       	adiw	r30, 0x05	; 5
    158a:	61 91       	ld	r22, Z+
    158c:	71 91       	ld	r23, Z+
    158e:	af 01       	movw	r20, r30
    1590:	80 91 fc 03 	lds	r24, 0x03FC
    1594:	90 91 fd 03 	lds	r25, 0x03FD
    1598:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vfprintf>
    159c:	e2 e0       	ldi	r30, 0x02	; 2
    159e:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__epilogue_restores__+0x20>

000015a2 <puts>:
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	e0 91 fc 03 	lds	r30, 0x03FC
    15ae:	f0 91 fd 03 	lds	r31, 0x03FD
    15b2:	23 81       	ldd	r18, Z+3	; 0x03
    15b4:	21 ff       	sbrs	r18, 1
    15b6:	1b c0       	rjmp	.+54     	; 0x15ee <puts+0x4c>
    15b8:	ec 01       	movw	r28, r24
    15ba:	00 e0       	ldi	r16, 0x00	; 0
    15bc:	10 e0       	ldi	r17, 0x00	; 0
    15be:	89 91       	ld	r24, Y+
    15c0:	60 91 fc 03 	lds	r22, 0x03FC
    15c4:	70 91 fd 03 	lds	r23, 0x03FD
    15c8:	db 01       	movw	r26, r22
    15ca:	18 96       	adiw	r26, 0x08	; 8
    15cc:	ed 91       	ld	r30, X+
    15ce:	fc 91       	ld	r31, X
    15d0:	19 97       	sbiw	r26, 0x09	; 9
    15d2:	88 23       	and	r24, r24
    15d4:	31 f0       	breq	.+12     	; 0x15e2 <puts+0x40>
    15d6:	09 95       	icall
    15d8:	89 2b       	or	r24, r25
    15da:	89 f3       	breq	.-30     	; 0x15be <puts+0x1c>
    15dc:	0f ef       	ldi	r16, 0xFF	; 255
    15de:	1f ef       	ldi	r17, 0xFF	; 255
    15e0:	ee cf       	rjmp	.-36     	; 0x15be <puts+0x1c>
    15e2:	8a e0       	ldi	r24, 0x0A	; 10
    15e4:	09 95       	icall
    15e6:	89 2b       	or	r24, r25
    15e8:	11 f4       	brne	.+4      	; 0x15ee <puts+0x4c>
    15ea:	c8 01       	movw	r24, r16
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <puts+0x50>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <vfprintf>:
    15fc:	ac e0       	ldi	r26, 0x0C	; 12
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e4 e0       	ldi	r30, 0x04	; 4
    1602:	fb e0       	ldi	r31, 0x0B	; 11
    1604:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__prologue_saves__>
    1608:	7c 01       	movw	r14, r24
    160a:	6b 01       	movw	r12, r22
    160c:	8a 01       	movw	r16, r20
    160e:	fc 01       	movw	r30, r24
    1610:	17 82       	std	Z+7, r1	; 0x07
    1612:	16 82       	std	Z+6, r1	; 0x06
    1614:	83 81       	ldd	r24, Z+3	; 0x03
    1616:	81 ff       	sbrs	r24, 1
    1618:	bd c1       	rjmp	.+890    	; 0x1994 <vfprintf+0x398>
    161a:	ce 01       	movw	r24, r28
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	4c 01       	movw	r8, r24
    1620:	f7 01       	movw	r30, r14
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	f6 01       	movw	r30, r12
    1626:	93 fd       	sbrc	r25, 3
    1628:	85 91       	lpm	r24, Z+
    162a:	93 ff       	sbrs	r25, 3
    162c:	81 91       	ld	r24, Z+
    162e:	6f 01       	movw	r12, r30
    1630:	88 23       	and	r24, r24
    1632:	09 f4       	brne	.+2      	; 0x1636 <vfprintf+0x3a>
    1634:	ab c1       	rjmp	.+854    	; 0x198c <vfprintf+0x390>
    1636:	85 32       	cpi	r24, 0x25	; 37
    1638:	39 f4       	brne	.+14     	; 0x1648 <vfprintf+0x4c>
    163a:	93 fd       	sbrc	r25, 3
    163c:	85 91       	lpm	r24, Z+
    163e:	93 ff       	sbrs	r25, 3
    1640:	81 91       	ld	r24, Z+
    1642:	6f 01       	movw	r12, r30
    1644:	85 32       	cpi	r24, 0x25	; 37
    1646:	29 f4       	brne	.+10     	; 0x1652 <vfprintf+0x56>
    1648:	b7 01       	movw	r22, r14
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    1650:	e7 cf       	rjmp	.-50     	; 0x1620 <vfprintf+0x24>
    1652:	51 2c       	mov	r5, r1
    1654:	31 2c       	mov	r3, r1
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	20 32       	cpi	r18, 0x20	; 32
    165a:	a0 f4       	brcc	.+40     	; 0x1684 <vfprintf+0x88>
    165c:	8b 32       	cpi	r24, 0x2B	; 43
    165e:	69 f0       	breq	.+26     	; 0x167a <vfprintf+0x7e>
    1660:	30 f4       	brcc	.+12     	; 0x166e <vfprintf+0x72>
    1662:	80 32       	cpi	r24, 0x20	; 32
    1664:	59 f0       	breq	.+22     	; 0x167c <vfprintf+0x80>
    1666:	83 32       	cpi	r24, 0x23	; 35
    1668:	69 f4       	brne	.+26     	; 0x1684 <vfprintf+0x88>
    166a:	20 61       	ori	r18, 0x10	; 16
    166c:	2c c0       	rjmp	.+88     	; 0x16c6 <vfprintf+0xca>
    166e:	8d 32       	cpi	r24, 0x2D	; 45
    1670:	39 f0       	breq	.+14     	; 0x1680 <vfprintf+0x84>
    1672:	80 33       	cpi	r24, 0x30	; 48
    1674:	39 f4       	brne	.+14     	; 0x1684 <vfprintf+0x88>
    1676:	21 60       	ori	r18, 0x01	; 1
    1678:	26 c0       	rjmp	.+76     	; 0x16c6 <vfprintf+0xca>
    167a:	22 60       	ori	r18, 0x02	; 2
    167c:	24 60       	ori	r18, 0x04	; 4
    167e:	23 c0       	rjmp	.+70     	; 0x16c6 <vfprintf+0xca>
    1680:	28 60       	ori	r18, 0x08	; 8
    1682:	21 c0       	rjmp	.+66     	; 0x16c6 <vfprintf+0xca>
    1684:	27 fd       	sbrc	r18, 7
    1686:	27 c0       	rjmp	.+78     	; 0x16d6 <vfprintf+0xda>
    1688:	30 ed       	ldi	r19, 0xD0	; 208
    168a:	38 0f       	add	r19, r24
    168c:	3a 30       	cpi	r19, 0x0A	; 10
    168e:	78 f4       	brcc	.+30     	; 0x16ae <vfprintf+0xb2>
    1690:	26 ff       	sbrs	r18, 6
    1692:	06 c0       	rjmp	.+12     	; 0x16a0 <vfprintf+0xa4>
    1694:	fa e0       	ldi	r31, 0x0A	; 10
    1696:	5f 9e       	mul	r5, r31
    1698:	30 0d       	add	r19, r0
    169a:	11 24       	eor	r1, r1
    169c:	53 2e       	mov	r5, r19
    169e:	13 c0       	rjmp	.+38     	; 0x16c6 <vfprintf+0xca>
    16a0:	8a e0       	ldi	r24, 0x0A	; 10
    16a2:	38 9e       	mul	r3, r24
    16a4:	30 0d       	add	r19, r0
    16a6:	11 24       	eor	r1, r1
    16a8:	33 2e       	mov	r3, r19
    16aa:	20 62       	ori	r18, 0x20	; 32
    16ac:	0c c0       	rjmp	.+24     	; 0x16c6 <vfprintf+0xca>
    16ae:	8e 32       	cpi	r24, 0x2E	; 46
    16b0:	21 f4       	brne	.+8      	; 0x16ba <vfprintf+0xbe>
    16b2:	26 fd       	sbrc	r18, 6
    16b4:	6b c1       	rjmp	.+726    	; 0x198c <vfprintf+0x390>
    16b6:	20 64       	ori	r18, 0x40	; 64
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <vfprintf+0xca>
    16ba:	8c 36       	cpi	r24, 0x6C	; 108
    16bc:	11 f4       	brne	.+4      	; 0x16c2 <vfprintf+0xc6>
    16be:	20 68       	ori	r18, 0x80	; 128
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <vfprintf+0xca>
    16c2:	88 36       	cpi	r24, 0x68	; 104
    16c4:	41 f4       	brne	.+16     	; 0x16d6 <vfprintf+0xda>
    16c6:	f6 01       	movw	r30, r12
    16c8:	93 fd       	sbrc	r25, 3
    16ca:	85 91       	lpm	r24, Z+
    16cc:	93 ff       	sbrs	r25, 3
    16ce:	81 91       	ld	r24, Z+
    16d0:	6f 01       	movw	r12, r30
    16d2:	81 11       	cpse	r24, r1
    16d4:	c1 cf       	rjmp	.-126    	; 0x1658 <vfprintf+0x5c>
    16d6:	98 2f       	mov	r25, r24
    16d8:	9f 7d       	andi	r25, 0xDF	; 223
    16da:	95 54       	subi	r25, 0x45	; 69
    16dc:	93 30       	cpi	r25, 0x03	; 3
    16de:	28 f4       	brcc	.+10     	; 0x16ea <vfprintf+0xee>
    16e0:	0c 5f       	subi	r16, 0xFC	; 252
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	ff e3       	ldi	r31, 0x3F	; 63
    16e6:	f9 83       	std	Y+1, r31	; 0x01
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <vfprintf+0x108>
    16ea:	83 36       	cpi	r24, 0x63	; 99
    16ec:	31 f0       	breq	.+12     	; 0x16fa <vfprintf+0xfe>
    16ee:	83 37       	cpi	r24, 0x73	; 115
    16f0:	71 f0       	breq	.+28     	; 0x170e <vfprintf+0x112>
    16f2:	83 35       	cpi	r24, 0x53	; 83
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <vfprintf+0xfc>
    16f6:	5b c0       	rjmp	.+182    	; 0x17ae <vfprintf+0x1b2>
    16f8:	22 c0       	rjmp	.+68     	; 0x173e <vfprintf+0x142>
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 81       	ld	r24, Z
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	0e 5f       	subi	r16, 0xFE	; 254
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	44 24       	eor	r4, r4
    1706:	43 94       	inc	r4
    1708:	51 2c       	mov	r5, r1
    170a:	54 01       	movw	r10, r8
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <vfprintf+0x13c>
    170e:	38 01       	movw	r6, r16
    1710:	f2 e0       	ldi	r31, 0x02	; 2
    1712:	6f 0e       	add	r6, r31
    1714:	71 1c       	adc	r7, r1
    1716:	f8 01       	movw	r30, r16
    1718:	a0 80       	ld	r10, Z
    171a:	b1 80       	ldd	r11, Z+1	; 0x01
    171c:	26 ff       	sbrs	r18, 6
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x12a>
    1720:	65 2d       	mov	r22, r5
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x12e>
    1726:	6f ef       	ldi	r22, 0xFF	; 255
    1728:	7f ef       	ldi	r23, 0xFF	; 255
    172a:	c5 01       	movw	r24, r10
    172c:	2c 87       	std	Y+12, r18	; 0x0c
    172e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <strnlen>
    1732:	2c 01       	movw	r4, r24
    1734:	83 01       	movw	r16, r6
    1736:	2c 85       	ldd	r18, Y+12	; 0x0c
    1738:	2f 77       	andi	r18, 0x7F	; 127
    173a:	22 2e       	mov	r2, r18
    173c:	17 c0       	rjmp	.+46     	; 0x176c <vfprintf+0x170>
    173e:	38 01       	movw	r6, r16
    1740:	f2 e0       	ldi	r31, 0x02	; 2
    1742:	6f 0e       	add	r6, r31
    1744:	71 1c       	adc	r7, r1
    1746:	f8 01       	movw	r30, r16
    1748:	a0 80       	ld	r10, Z
    174a:	b1 80       	ldd	r11, Z+1	; 0x01
    174c:	26 ff       	sbrs	r18, 6
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <vfprintf+0x15a>
    1750:	65 2d       	mov	r22, r5
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x15e>
    1756:	6f ef       	ldi	r22, 0xFF	; 255
    1758:	7f ef       	ldi	r23, 0xFF	; 255
    175a:	c5 01       	movw	r24, r10
    175c:	2c 87       	std	Y+12, r18	; 0x0c
    175e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <strnlen_P>
    1762:	2c 01       	movw	r4, r24
    1764:	2c 85       	ldd	r18, Y+12	; 0x0c
    1766:	20 68       	ori	r18, 0x80	; 128
    1768:	22 2e       	mov	r2, r18
    176a:	83 01       	movw	r16, r6
    176c:	23 fc       	sbrc	r2, 3
    176e:	1b c0       	rjmp	.+54     	; 0x17a6 <vfprintf+0x1aa>
    1770:	83 2d       	mov	r24, r3
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	48 16       	cp	r4, r24
    1776:	59 06       	cpc	r5, r25
    1778:	b0 f4       	brcc	.+44     	; 0x17a6 <vfprintf+0x1aa>
    177a:	b7 01       	movw	r22, r14
    177c:	80 e2       	ldi	r24, 0x20	; 32
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    1784:	3a 94       	dec	r3
    1786:	f4 cf       	rjmp	.-24     	; 0x1770 <vfprintf+0x174>
    1788:	f5 01       	movw	r30, r10
    178a:	27 fc       	sbrc	r2, 7
    178c:	85 91       	lpm	r24, Z+
    178e:	27 fe       	sbrs	r2, 7
    1790:	81 91       	ld	r24, Z+
    1792:	5f 01       	movw	r10, r30
    1794:	b7 01       	movw	r22, r14
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    179c:	31 10       	cpse	r3, r1
    179e:	3a 94       	dec	r3
    17a0:	f1 e0       	ldi	r31, 0x01	; 1
    17a2:	4f 1a       	sub	r4, r31
    17a4:	51 08       	sbc	r5, r1
    17a6:	41 14       	cp	r4, r1
    17a8:	51 04       	cpc	r5, r1
    17aa:	71 f7       	brne	.-36     	; 0x1788 <vfprintf+0x18c>
    17ac:	e5 c0       	rjmp	.+458    	; 0x1978 <vfprintf+0x37c>
    17ae:	84 36       	cpi	r24, 0x64	; 100
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <vfprintf+0x1ba>
    17b2:	89 36       	cpi	r24, 0x69	; 105
    17b4:	39 f5       	brne	.+78     	; 0x1804 <vfprintf+0x208>
    17b6:	f8 01       	movw	r30, r16
    17b8:	27 ff       	sbrs	r18, 7
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <vfprintf+0x1ce>
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	0c 5f       	subi	r16, 0xFC	; 252
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <vfprintf+0x1de>
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	88 27       	eor	r24, r24
    17d0:	77 fd       	sbrc	r23, 7
    17d2:	80 95       	com	r24
    17d4:	98 2f       	mov	r25, r24
    17d6:	0e 5f       	subi	r16, 0xFE	; 254
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	2f 76       	andi	r18, 0x6F	; 111
    17dc:	b2 2e       	mov	r11, r18
    17de:	97 ff       	sbrs	r25, 7
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <vfprintf+0x1f8>
    17e2:	90 95       	com	r25
    17e4:	80 95       	com	r24
    17e6:	70 95       	com	r23
    17e8:	61 95       	neg	r22
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	8f 4f       	sbci	r24, 0xFF	; 255
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	20 68       	ori	r18, 0x80	; 128
    17f2:	b2 2e       	mov	r11, r18
    17f4:	2a e0       	ldi	r18, 0x0A	; 10
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	a4 01       	movw	r20, r8
    17fa:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__ultoa_invert>
    17fe:	a8 2e       	mov	r10, r24
    1800:	a8 18       	sub	r10, r8
    1802:	44 c0       	rjmp	.+136    	; 0x188c <vfprintf+0x290>
    1804:	85 37       	cpi	r24, 0x75	; 117
    1806:	29 f4       	brne	.+10     	; 0x1812 <vfprintf+0x216>
    1808:	2f 7e       	andi	r18, 0xEF	; 239
    180a:	b2 2e       	mov	r11, r18
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	25 c0       	rjmp	.+74     	; 0x185c <vfprintf+0x260>
    1812:	f2 2f       	mov	r31, r18
    1814:	f9 7f       	andi	r31, 0xF9	; 249
    1816:	bf 2e       	mov	r11, r31
    1818:	8f 36       	cpi	r24, 0x6F	; 111
    181a:	c1 f0       	breq	.+48     	; 0x184c <vfprintf+0x250>
    181c:	18 f4       	brcc	.+6      	; 0x1824 <vfprintf+0x228>
    181e:	88 35       	cpi	r24, 0x58	; 88
    1820:	79 f0       	breq	.+30     	; 0x1840 <vfprintf+0x244>
    1822:	b4 c0       	rjmp	.+360    	; 0x198c <vfprintf+0x390>
    1824:	80 37       	cpi	r24, 0x70	; 112
    1826:	19 f0       	breq	.+6      	; 0x182e <vfprintf+0x232>
    1828:	88 37       	cpi	r24, 0x78	; 120
    182a:	21 f0       	breq	.+8      	; 0x1834 <vfprintf+0x238>
    182c:	af c0       	rjmp	.+350    	; 0x198c <vfprintf+0x390>
    182e:	2f 2f       	mov	r18, r31
    1830:	20 61       	ori	r18, 0x10	; 16
    1832:	b2 2e       	mov	r11, r18
    1834:	b4 fe       	sbrs	r11, 4
    1836:	0d c0       	rjmp	.+26     	; 0x1852 <vfprintf+0x256>
    1838:	8b 2d       	mov	r24, r11
    183a:	84 60       	ori	r24, 0x04	; 4
    183c:	b8 2e       	mov	r11, r24
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <vfprintf+0x256>
    1840:	24 ff       	sbrs	r18, 4
    1842:	0a c0       	rjmp	.+20     	; 0x1858 <vfprintf+0x25c>
    1844:	9f 2f       	mov	r25, r31
    1846:	96 60       	ori	r25, 0x06	; 6
    1848:	b9 2e       	mov	r11, r25
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <vfprintf+0x25c>
    184c:	28 e0       	ldi	r18, 0x08	; 8
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	05 c0       	rjmp	.+10     	; 0x185c <vfprintf+0x260>
    1852:	20 e1       	ldi	r18, 0x10	; 16
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	02 c0       	rjmp	.+4      	; 0x185c <vfprintf+0x260>
    1858:	20 e1       	ldi	r18, 0x10	; 16
    185a:	32 e0       	ldi	r19, 0x02	; 2
    185c:	f8 01       	movw	r30, r16
    185e:	b7 fe       	sbrs	r11, 7
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <vfprintf+0x274>
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	0c 5f       	subi	r16, 0xFC	; 252
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	06 c0       	rjmp	.+12     	; 0x187c <vfprintf+0x280>
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 5f       	subi	r16, 0xFE	; 254
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	a4 01       	movw	r20, r8
    187e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__ultoa_invert>
    1882:	a8 2e       	mov	r10, r24
    1884:	a8 18       	sub	r10, r8
    1886:	fb 2d       	mov	r31, r11
    1888:	ff 77       	andi	r31, 0x7F	; 127
    188a:	bf 2e       	mov	r11, r31
    188c:	b6 fe       	sbrs	r11, 6
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <vfprintf+0x2aa>
    1890:	2b 2d       	mov	r18, r11
    1892:	2e 7f       	andi	r18, 0xFE	; 254
    1894:	a5 14       	cp	r10, r5
    1896:	50 f4       	brcc	.+20     	; 0x18ac <vfprintf+0x2b0>
    1898:	b4 fe       	sbrs	r11, 4
    189a:	0a c0       	rjmp	.+20     	; 0x18b0 <vfprintf+0x2b4>
    189c:	b2 fc       	sbrc	r11, 2
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <vfprintf+0x2b4>
    18a0:	2b 2d       	mov	r18, r11
    18a2:	2e 7e       	andi	r18, 0xEE	; 238
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x2b4>
    18a6:	7a 2c       	mov	r7, r10
    18a8:	2b 2d       	mov	r18, r11
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <vfprintf+0x2b6>
    18ac:	7a 2c       	mov	r7, r10
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <vfprintf+0x2b6>
    18b0:	75 2c       	mov	r7, r5
    18b2:	24 ff       	sbrs	r18, 4
    18b4:	0d c0       	rjmp	.+26     	; 0x18d0 <vfprintf+0x2d4>
    18b6:	fe 01       	movw	r30, r28
    18b8:	ea 0d       	add	r30, r10
    18ba:	f1 1d       	adc	r31, r1
    18bc:	80 81       	ld	r24, Z
    18be:	80 33       	cpi	r24, 0x30	; 48
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <vfprintf+0x2ca>
    18c2:	29 7e       	andi	r18, 0xE9	; 233
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <vfprintf+0x2dc>
    18c6:	22 ff       	sbrs	r18, 2
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <vfprintf+0x2da>
    18ca:	73 94       	inc	r7
    18cc:	73 94       	inc	r7
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <vfprintf+0x2dc>
    18d0:	82 2f       	mov	r24, r18
    18d2:	86 78       	andi	r24, 0x86	; 134
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x2dc>
    18d6:	73 94       	inc	r7
    18d8:	23 fd       	sbrc	r18, 3
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <vfprintf+0x306>
    18dc:	20 ff       	sbrs	r18, 0
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x2f0>
    18e0:	5a 2c       	mov	r5, r10
    18e2:	73 14       	cp	r7, r3
    18e4:	18 f4       	brcc	.+6      	; 0x18ec <vfprintf+0x2f0>
    18e6:	53 0c       	add	r5, r3
    18e8:	57 18       	sub	r5, r7
    18ea:	73 2c       	mov	r7, r3
    18ec:	73 14       	cp	r7, r3
    18ee:	68 f4       	brcc	.+26     	; 0x190a <vfprintf+0x30e>
    18f0:	b7 01       	movw	r22, r14
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	2c 87       	std	Y+12, r18	; 0x0c
    18f8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    18fc:	73 94       	inc	r7
    18fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1900:	f5 cf       	rjmp	.-22     	; 0x18ec <vfprintf+0x2f0>
    1902:	73 14       	cp	r7, r3
    1904:	10 f4       	brcc	.+4      	; 0x190a <vfprintf+0x30e>
    1906:	37 18       	sub	r3, r7
    1908:	01 c0       	rjmp	.+2      	; 0x190c <vfprintf+0x310>
    190a:	31 2c       	mov	r3, r1
    190c:	24 ff       	sbrs	r18, 4
    190e:	12 c0       	rjmp	.+36     	; 0x1934 <vfprintf+0x338>
    1910:	b7 01       	movw	r22, r14
    1912:	80 e3       	ldi	r24, 0x30	; 48
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	2c 87       	std	Y+12, r18	; 0x0c
    1918:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    191c:	2c 85       	ldd	r18, Y+12	; 0x0c
    191e:	22 ff       	sbrs	r18, 2
    1920:	17 c0       	rjmp	.+46     	; 0x1950 <vfprintf+0x354>
    1922:	21 ff       	sbrs	r18, 1
    1924:	03 c0       	rjmp	.+6      	; 0x192c <vfprintf+0x330>
    1926:	88 e5       	ldi	r24, 0x58	; 88
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <vfprintf+0x334>
    192c:	88 e7       	ldi	r24, 0x78	; 120
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	b7 01       	movw	r22, r14
    1932:	0c c0       	rjmp	.+24     	; 0x194c <vfprintf+0x350>
    1934:	82 2f       	mov	r24, r18
    1936:	86 78       	andi	r24, 0x86	; 134
    1938:	59 f0       	breq	.+22     	; 0x1950 <vfprintf+0x354>
    193a:	21 fd       	sbrc	r18, 1
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <vfprintf+0x346>
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <vfprintf+0x348>
    1942:	8b e2       	ldi	r24, 0x2B	; 43
    1944:	27 fd       	sbrc	r18, 7
    1946:	8d e2       	ldi	r24, 0x2D	; 45
    1948:	b7 01       	movw	r22, r14
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    1950:	a5 14       	cp	r10, r5
    1952:	38 f4       	brcc	.+14     	; 0x1962 <vfprintf+0x366>
    1954:	b7 01       	movw	r22, r14
    1956:	80 e3       	ldi	r24, 0x30	; 48
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    195e:	5a 94       	dec	r5
    1960:	f7 cf       	rjmp	.-18     	; 0x1950 <vfprintf+0x354>
    1962:	aa 94       	dec	r10
    1964:	f4 01       	movw	r30, r8
    1966:	ea 0d       	add	r30, r10
    1968:	f1 1d       	adc	r31, r1
    196a:	80 81       	ld	r24, Z
    196c:	b7 01       	movw	r22, r14
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    1974:	a1 10       	cpse	r10, r1
    1976:	f5 cf       	rjmp	.-22     	; 0x1962 <vfprintf+0x366>
    1978:	33 20       	and	r3, r3
    197a:	09 f4       	brne	.+2      	; 0x197e <vfprintf+0x382>
    197c:	51 ce       	rjmp	.-862    	; 0x1620 <vfprintf+0x24>
    197e:	b7 01       	movw	r22, r14
    1980:	80 e2       	ldi	r24, 0x20	; 32
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <fputc>
    1988:	3a 94       	dec	r3
    198a:	f6 cf       	rjmp	.-20     	; 0x1978 <vfprintf+0x37c>
    198c:	f7 01       	movw	r30, r14
    198e:	86 81       	ldd	r24, Z+6	; 0x06
    1990:	97 81       	ldd	r25, Z+7	; 0x07
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <vfprintf+0x39c>
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	9f ef       	ldi	r25, 0xFF	; 255
    1998:	2c 96       	adiw	r28, 0x0c	; 12
    199a:	e2 e1       	ldi	r30, 0x12	; 18
    199c:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__epilogue_restores__>

000019a0 <calloc>:
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	86 9f       	mul	r24, r22
    19aa:	80 01       	movw	r16, r0
    19ac:	87 9f       	mul	r24, r23
    19ae:	10 0d       	add	r17, r0
    19b0:	96 9f       	mul	r25, r22
    19b2:	10 0d       	add	r17, r0
    19b4:	11 24       	eor	r1, r1
    19b6:	c8 01       	movw	r24, r16
    19b8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <malloc>
    19bc:	ec 01       	movw	r28, r24
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	29 f0       	breq	.+10     	; 0x19cc <calloc+0x2c>
    19c2:	a8 01       	movw	r20, r16
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <memset>
    19cc:	ce 01       	movw	r24, r28
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <malloc>:
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	91 05       	cpc	r25, r1
    19e0:	10 f4       	brcc	.+4      	; 0x19e6 <malloc+0xe>
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	e0 91 02 04 	lds	r30, 0x0402
    19ea:	f0 91 03 04 	lds	r31, 0x0403
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	a0 e0       	ldi	r26, 0x00	; 0
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	39 f1       	breq	.+78     	; 0x1a48 <malloc+0x70>
    19fa:	40 81       	ld	r20, Z
    19fc:	51 81       	ldd	r21, Z+1	; 0x01
    19fe:	48 17       	cp	r20, r24
    1a00:	59 07       	cpc	r21, r25
    1a02:	b8 f0       	brcs	.+46     	; 0x1a32 <malloc+0x5a>
    1a04:	48 17       	cp	r20, r24
    1a06:	59 07       	cpc	r21, r25
    1a08:	71 f4       	brne	.+28     	; 0x1a26 <malloc+0x4e>
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	10 97       	sbiw	r26, 0x00	; 0
    1a10:	29 f0       	breq	.+10     	; 0x1a1c <malloc+0x44>
    1a12:	13 96       	adiw	r26, 0x03	; 3
    1a14:	9c 93       	st	X, r25
    1a16:	8e 93       	st	-X, r24
    1a18:	12 97       	sbiw	r26, 0x02	; 2
    1a1a:	2c c0       	rjmp	.+88     	; 0x1a74 <malloc+0x9c>
    1a1c:	90 93 03 04 	sts	0x0403, r25
    1a20:	80 93 02 04 	sts	0x0402, r24
    1a24:	27 c0       	rjmp	.+78     	; 0x1a74 <malloc+0x9c>
    1a26:	21 15       	cp	r18, r1
    1a28:	31 05       	cpc	r19, r1
    1a2a:	31 f0       	breq	.+12     	; 0x1a38 <malloc+0x60>
    1a2c:	42 17       	cp	r20, r18
    1a2e:	53 07       	cpc	r21, r19
    1a30:	18 f0       	brcs	.+6      	; 0x1a38 <malloc+0x60>
    1a32:	a9 01       	movw	r20, r18
    1a34:	db 01       	movw	r26, r22
    1a36:	01 c0       	rjmp	.+2      	; 0x1a3a <malloc+0x62>
    1a38:	ef 01       	movw	r28, r30
    1a3a:	9a 01       	movw	r18, r20
    1a3c:	bd 01       	movw	r22, r26
    1a3e:	df 01       	movw	r26, r30
    1a40:	02 80       	ldd	r0, Z+2	; 0x02
    1a42:	f3 81       	ldd	r31, Z+3	; 0x03
    1a44:	e0 2d       	mov	r30, r0
    1a46:	d7 cf       	rjmp	.-82     	; 0x19f6 <malloc+0x1e>
    1a48:	21 15       	cp	r18, r1
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	f9 f0       	breq	.+62     	; 0x1a8c <malloc+0xb4>
    1a4e:	28 1b       	sub	r18, r24
    1a50:	39 0b       	sbc	r19, r25
    1a52:	24 30       	cpi	r18, 0x04	; 4
    1a54:	31 05       	cpc	r19, r1
    1a56:	80 f4       	brcc	.+32     	; 0x1a78 <malloc+0xa0>
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	61 15       	cp	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	21 f0       	breq	.+8      	; 0x1a6a <malloc+0x92>
    1a62:	fb 01       	movw	r30, r22
    1a64:	93 83       	std	Z+3, r25	; 0x03
    1a66:	82 83       	std	Z+2, r24	; 0x02
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <malloc+0x9a>
    1a6a:	90 93 03 04 	sts	0x0403, r25
    1a6e:	80 93 02 04 	sts	0x0402, r24
    1a72:	fe 01       	movw	r30, r28
    1a74:	32 96       	adiw	r30, 0x02	; 2
    1a76:	44 c0       	rjmp	.+136    	; 0x1b00 <malloc+0x128>
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e2 0f       	add	r30, r18
    1a7c:	f3 1f       	adc	r31, r19
    1a7e:	81 93       	st	Z+, r24
    1a80:	91 93       	st	Z+, r25
    1a82:	22 50       	subi	r18, 0x02	; 2
    1a84:	31 09       	sbc	r19, r1
    1a86:	39 83       	std	Y+1, r19	; 0x01
    1a88:	28 83       	st	Y, r18
    1a8a:	3a c0       	rjmp	.+116    	; 0x1b00 <malloc+0x128>
    1a8c:	20 91 00 04 	lds	r18, 0x0400
    1a90:	30 91 01 04 	lds	r19, 0x0401
    1a94:	23 2b       	or	r18, r19
    1a96:	41 f4       	brne	.+16     	; 0x1aa8 <malloc+0xd0>
    1a98:	20 91 06 01 	lds	r18, 0x0106
    1a9c:	30 91 07 01 	lds	r19, 0x0107
    1aa0:	30 93 01 04 	sts	0x0401, r19
    1aa4:	20 93 00 04 	sts	0x0400, r18
    1aa8:	20 91 04 01 	lds	r18, 0x0104
    1aac:	30 91 05 01 	lds	r19, 0x0105
    1ab0:	21 15       	cp	r18, r1
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	41 f4       	brne	.+16     	; 0x1ac6 <malloc+0xee>
    1ab6:	2d b7       	in	r18, 0x3d	; 61
    1ab8:	3e b7       	in	r19, 0x3e	; 62
    1aba:	40 91 08 01 	lds	r20, 0x0108
    1abe:	50 91 09 01 	lds	r21, 0x0109
    1ac2:	24 1b       	sub	r18, r20
    1ac4:	35 0b       	sbc	r19, r21
    1ac6:	e0 91 00 04 	lds	r30, 0x0400
    1aca:	f0 91 01 04 	lds	r31, 0x0401
    1ace:	e2 17       	cp	r30, r18
    1ad0:	f3 07       	cpc	r31, r19
    1ad2:	a0 f4       	brcc	.+40     	; 0x1afc <malloc+0x124>
    1ad4:	2e 1b       	sub	r18, r30
    1ad6:	3f 0b       	sbc	r19, r31
    1ad8:	28 17       	cp	r18, r24
    1ada:	39 07       	cpc	r19, r25
    1adc:	78 f0       	brcs	.+30     	; 0x1afc <malloc+0x124>
    1ade:	ac 01       	movw	r20, r24
    1ae0:	4e 5f       	subi	r20, 0xFE	; 254
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	24 17       	cp	r18, r20
    1ae6:	35 07       	cpc	r19, r21
    1ae8:	48 f0       	brcs	.+18     	; 0x1afc <malloc+0x124>
    1aea:	4e 0f       	add	r20, r30
    1aec:	5f 1f       	adc	r21, r31
    1aee:	50 93 01 04 	sts	0x0401, r21
    1af2:	40 93 00 04 	sts	0x0400, r20
    1af6:	81 93       	st	Z+, r24
    1af8:	91 93       	st	Z+, r25
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <malloc+0x128>
    1afc:	e0 e0       	ldi	r30, 0x00	; 0
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	cf 01       	movw	r24, r30
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <free>:
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <free+0xa>
    1b10:	87 c0       	rjmp	.+270    	; 0x1c20 <free+0x118>
    1b12:	fc 01       	movw	r30, r24
    1b14:	32 97       	sbiw	r30, 0x02	; 2
    1b16:	13 82       	std	Z+3, r1	; 0x03
    1b18:	12 82       	std	Z+2, r1	; 0x02
    1b1a:	c0 91 02 04 	lds	r28, 0x0402
    1b1e:	d0 91 03 04 	lds	r29, 0x0403
    1b22:	20 97       	sbiw	r28, 0x00	; 0
    1b24:	81 f4       	brne	.+32     	; 0x1b46 <free+0x3e>
    1b26:	20 81       	ld	r18, Z
    1b28:	31 81       	ldd	r19, Z+1	; 0x01
    1b2a:	28 0f       	add	r18, r24
    1b2c:	39 1f       	adc	r19, r25
    1b2e:	80 91 00 04 	lds	r24, 0x0400
    1b32:	90 91 01 04 	lds	r25, 0x0401
    1b36:	82 17       	cp	r24, r18
    1b38:	93 07       	cpc	r25, r19
    1b3a:	79 f5       	brne	.+94     	; 0x1b9a <free+0x92>
    1b3c:	f0 93 01 04 	sts	0x0401, r31
    1b40:	e0 93 00 04 	sts	0x0400, r30
    1b44:	6d c0       	rjmp	.+218    	; 0x1c20 <free+0x118>
    1b46:	de 01       	movw	r26, r28
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	ae 17       	cp	r26, r30
    1b4e:	bf 07       	cpc	r27, r31
    1b50:	50 f4       	brcc	.+20     	; 0x1b66 <free+0x5e>
    1b52:	12 96       	adiw	r26, 0x02	; 2
    1b54:	4d 91       	ld	r20, X+
    1b56:	5c 91       	ld	r21, X
    1b58:	13 97       	sbiw	r26, 0x03	; 3
    1b5a:	9d 01       	movw	r18, r26
    1b5c:	41 15       	cp	r20, r1
    1b5e:	51 05       	cpc	r21, r1
    1b60:	09 f1       	breq	.+66     	; 0x1ba4 <free+0x9c>
    1b62:	da 01       	movw	r26, r20
    1b64:	f3 cf       	rjmp	.-26     	; 0x1b4c <free+0x44>
    1b66:	b3 83       	std	Z+3, r27	; 0x03
    1b68:	a2 83       	std	Z+2, r26	; 0x02
    1b6a:	40 81       	ld	r20, Z
    1b6c:	51 81       	ldd	r21, Z+1	; 0x01
    1b6e:	84 0f       	add	r24, r20
    1b70:	95 1f       	adc	r25, r21
    1b72:	8a 17       	cp	r24, r26
    1b74:	9b 07       	cpc	r25, r27
    1b76:	71 f4       	brne	.+28     	; 0x1b94 <free+0x8c>
    1b78:	8d 91       	ld	r24, X+
    1b7a:	9c 91       	ld	r25, X
    1b7c:	11 97       	sbiw	r26, 0x01	; 1
    1b7e:	84 0f       	add	r24, r20
    1b80:	95 1f       	adc	r25, r21
    1b82:	02 96       	adiw	r24, 0x02	; 2
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
    1b88:	12 96       	adiw	r26, 0x02	; 2
    1b8a:	8d 91       	ld	r24, X+
    1b8c:	9c 91       	ld	r25, X
    1b8e:	13 97       	sbiw	r26, 0x03	; 3
    1b90:	93 83       	std	Z+3, r25	; 0x03
    1b92:	82 83       	std	Z+2, r24	; 0x02
    1b94:	21 15       	cp	r18, r1
    1b96:	31 05       	cpc	r19, r1
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <free+0x9c>
    1b9a:	f0 93 03 04 	sts	0x0403, r31
    1b9e:	e0 93 02 04 	sts	0x0402, r30
    1ba2:	3e c0       	rjmp	.+124    	; 0x1c20 <free+0x118>
    1ba4:	d9 01       	movw	r26, r18
    1ba6:	13 96       	adiw	r26, 0x03	; 3
    1ba8:	fc 93       	st	X, r31
    1baa:	ee 93       	st	-X, r30
    1bac:	12 97       	sbiw	r26, 0x02	; 2
    1bae:	4d 91       	ld	r20, X+
    1bb0:	5d 91       	ld	r21, X+
    1bb2:	a4 0f       	add	r26, r20
    1bb4:	b5 1f       	adc	r27, r21
    1bb6:	ea 17       	cp	r30, r26
    1bb8:	fb 07       	cpc	r31, r27
    1bba:	79 f4       	brne	.+30     	; 0x1bda <free+0xd2>
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	84 0f       	add	r24, r20
    1bc2:	95 1f       	adc	r25, r21
    1bc4:	02 96       	adiw	r24, 0x02	; 2
    1bc6:	d9 01       	movw	r26, r18
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	9c 93       	st	X, r25
    1bcc:	8e 93       	st	-X, r24
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	13 96       	adiw	r26, 0x03	; 3
    1bd4:	9c 93       	st	X, r25
    1bd6:	8e 93       	st	-X, r24
    1bd8:	12 97       	sbiw	r26, 0x02	; 2
    1bda:	e0 e0       	ldi	r30, 0x00	; 0
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	19 f0       	breq	.+6      	; 0x1bec <free+0xe4>
    1be6:	fe 01       	movw	r30, r28
    1be8:	ec 01       	movw	r28, r24
    1bea:	f9 cf       	rjmp	.-14     	; 0x1bde <free+0xd6>
    1bec:	ce 01       	movw	r24, r28
    1bee:	02 96       	adiw	r24, 0x02	; 2
    1bf0:	28 81       	ld	r18, Y
    1bf2:	39 81       	ldd	r19, Y+1	; 0x01
    1bf4:	82 0f       	add	r24, r18
    1bf6:	93 1f       	adc	r25, r19
    1bf8:	20 91 00 04 	lds	r18, 0x0400
    1bfc:	30 91 01 04 	lds	r19, 0x0401
    1c00:	28 17       	cp	r18, r24
    1c02:	39 07       	cpc	r19, r25
    1c04:	69 f4       	brne	.+26     	; 0x1c20 <free+0x118>
    1c06:	30 97       	sbiw	r30, 0x00	; 0
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <free+0x10c>
    1c0a:	10 92 03 04 	sts	0x0403, r1
    1c0e:	10 92 02 04 	sts	0x0402, r1
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <free+0x110>
    1c14:	13 82       	std	Z+3, r1	; 0x03
    1c16:	12 82       	std	Z+2, r1	; 0x02
    1c18:	d0 93 01 04 	sts	0x0401, r29
    1c1c:	c0 93 00 04 	sts	0x0400, r28
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	08 95       	ret

00001c26 <strnlen_P>:
    1c26:	fc 01       	movw	r30, r24
    1c28:	05 90       	lpm	r0, Z+
    1c2a:	61 50       	subi	r22, 0x01	; 1
    1c2c:	70 40       	sbci	r23, 0x00	; 0
    1c2e:	01 10       	cpse	r0, r1
    1c30:	d8 f7       	brcc	.-10     	; 0x1c28 <strnlen_P+0x2>
    1c32:	80 95       	com	r24
    1c34:	90 95       	com	r25
    1c36:	8e 0f       	add	r24, r30
    1c38:	9f 1f       	adc	r25, r31
    1c3a:	08 95       	ret

00001c3c <memset>:
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <memset+0x6>
    1c40:	6d 93       	st	X+, r22
    1c42:	41 50       	subi	r20, 0x01	; 1
    1c44:	50 40       	sbci	r21, 0x00	; 0
    1c46:	e0 f7       	brcc	.-8      	; 0x1c40 <memset+0x4>
    1c48:	08 95       	ret

00001c4a <strnlen>:
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	61 50       	subi	r22, 0x01	; 1
    1c4e:	70 40       	sbci	r23, 0x00	; 0
    1c50:	01 90       	ld	r0, Z+
    1c52:	01 10       	cpse	r0, r1
    1c54:	d8 f7       	brcc	.-10     	; 0x1c4c <strnlen+0x2>
    1c56:	80 95       	com	r24
    1c58:	90 95       	com	r25
    1c5a:	8e 0f       	add	r24, r30
    1c5c:	9f 1f       	adc	r25, r31
    1c5e:	08 95       	ret

00001c60 <fputc>:
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	18 2f       	mov	r17, r24
    1c6a:	09 2f       	mov	r16, r25
    1c6c:	eb 01       	movw	r28, r22
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	81 fd       	sbrc	r24, 1
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <fputc+0x1a>
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	9f ef       	ldi	r25, 0xFF	; 255
    1c78:	20 c0       	rjmp	.+64     	; 0x1cba <fputc+0x5a>
    1c7a:	82 ff       	sbrs	r24, 2
    1c7c:	10 c0       	rjmp	.+32     	; 0x1c9e <fputc+0x3e>
    1c7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c80:	5f 81       	ldd	r21, Y+7	; 0x07
    1c82:	2c 81       	ldd	r18, Y+4	; 0x04
    1c84:	3d 81       	ldd	r19, Y+5	; 0x05
    1c86:	42 17       	cp	r20, r18
    1c88:	53 07       	cpc	r21, r19
    1c8a:	7c f4       	brge	.+30     	; 0x1caa <fputc+0x4a>
    1c8c:	e8 81       	ld	r30, Y
    1c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c90:	9f 01       	movw	r18, r30
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	39 83       	std	Y+1, r19	; 0x01
    1c98:	28 83       	st	Y, r18
    1c9a:	10 83       	st	Z, r17
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <fputc+0x4a>
    1c9e:	e8 85       	ldd	r30, Y+8	; 0x08
    1ca0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ca2:	81 2f       	mov	r24, r17
    1ca4:	09 95       	icall
    1ca6:	89 2b       	or	r24, r25
    1ca8:	29 f7       	brne	.-54     	; 0x1c74 <fputc+0x14>
    1caa:	2e 81       	ldd	r18, Y+6	; 0x06
    1cac:	3f 81       	ldd	r19, Y+7	; 0x07
    1cae:	2f 5f       	subi	r18, 0xFF	; 255
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	3f 83       	std	Y+7, r19	; 0x07
    1cb4:	2e 83       	std	Y+6, r18	; 0x06
    1cb6:	81 2f       	mov	r24, r17
    1cb8:	90 2f       	mov	r25, r16
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	08 95       	ret

00001cc4 <__ultoa_invert>:
    1cc4:	fa 01       	movw	r30, r20
    1cc6:	aa 27       	eor	r26, r26
    1cc8:	28 30       	cpi	r18, 0x08	; 8
    1cca:	51 f1       	breq	.+84     	; 0x1d20 <__ultoa_invert+0x5c>
    1ccc:	20 31       	cpi	r18, 0x10	; 16
    1cce:	81 f1       	breq	.+96     	; 0x1d30 <__ultoa_invert+0x6c>
    1cd0:	e8 94       	clt
    1cd2:	6f 93       	push	r22
    1cd4:	6e 7f       	andi	r22, 0xFE	; 254
    1cd6:	6e 5f       	subi	r22, 0xFE	; 254
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	8f 4f       	sbci	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	af 4f       	sbci	r26, 0xFF	; 255
    1ce0:	b1 e0       	ldi	r27, 0x01	; 1
    1ce2:	3e d0       	rcall	.+124    	; 0x1d60 <__ultoa_invert+0x9c>
    1ce4:	b4 e0       	ldi	r27, 0x04	; 4
    1ce6:	3c d0       	rcall	.+120    	; 0x1d60 <__ultoa_invert+0x9c>
    1ce8:	67 0f       	add	r22, r23
    1cea:	78 1f       	adc	r23, r24
    1cec:	89 1f       	adc	r24, r25
    1cee:	9a 1f       	adc	r25, r26
    1cf0:	a1 1d       	adc	r26, r1
    1cf2:	68 0f       	add	r22, r24
    1cf4:	79 1f       	adc	r23, r25
    1cf6:	8a 1f       	adc	r24, r26
    1cf8:	91 1d       	adc	r25, r1
    1cfa:	a1 1d       	adc	r26, r1
    1cfc:	6a 0f       	add	r22, r26
    1cfe:	71 1d       	adc	r23, r1
    1d00:	81 1d       	adc	r24, r1
    1d02:	91 1d       	adc	r25, r1
    1d04:	a1 1d       	adc	r26, r1
    1d06:	20 d0       	rcall	.+64     	; 0x1d48 <__ultoa_invert+0x84>
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <__ultoa_invert+0x48>
    1d0a:	68 94       	set
    1d0c:	3f 91       	pop	r19
    1d0e:	2a e0       	ldi	r18, 0x0A	; 10
    1d10:	26 9f       	mul	r18, r22
    1d12:	11 24       	eor	r1, r1
    1d14:	30 19       	sub	r19, r0
    1d16:	30 5d       	subi	r19, 0xD0	; 208
    1d18:	31 93       	st	Z+, r19
    1d1a:	de f6       	brtc	.-74     	; 0x1cd2 <__ultoa_invert+0xe>
    1d1c:	cf 01       	movw	r24, r30
    1d1e:	08 95       	ret
    1d20:	46 2f       	mov	r20, r22
    1d22:	47 70       	andi	r20, 0x07	; 7
    1d24:	40 5d       	subi	r20, 0xD0	; 208
    1d26:	41 93       	st	Z+, r20
    1d28:	b3 e0       	ldi	r27, 0x03	; 3
    1d2a:	0f d0       	rcall	.+30     	; 0x1d4a <__ultoa_invert+0x86>
    1d2c:	c9 f7       	brne	.-14     	; 0x1d20 <__ultoa_invert+0x5c>
    1d2e:	f6 cf       	rjmp	.-20     	; 0x1d1c <__ultoa_invert+0x58>
    1d30:	46 2f       	mov	r20, r22
    1d32:	4f 70       	andi	r20, 0x0F	; 15
    1d34:	40 5d       	subi	r20, 0xD0	; 208
    1d36:	4a 33       	cpi	r20, 0x3A	; 58
    1d38:	18 f0       	brcs	.+6      	; 0x1d40 <__ultoa_invert+0x7c>
    1d3a:	49 5d       	subi	r20, 0xD9	; 217
    1d3c:	31 fd       	sbrc	r19, 1
    1d3e:	40 52       	subi	r20, 0x20	; 32
    1d40:	41 93       	st	Z+, r20
    1d42:	02 d0       	rcall	.+4      	; 0x1d48 <__ultoa_invert+0x84>
    1d44:	a9 f7       	brne	.-22     	; 0x1d30 <__ultoa_invert+0x6c>
    1d46:	ea cf       	rjmp	.-44     	; 0x1d1c <__ultoa_invert+0x58>
    1d48:	b4 e0       	ldi	r27, 0x04	; 4
    1d4a:	a6 95       	lsr	r26
    1d4c:	97 95       	ror	r25
    1d4e:	87 95       	ror	r24
    1d50:	77 95       	ror	r23
    1d52:	67 95       	ror	r22
    1d54:	ba 95       	dec	r27
    1d56:	c9 f7       	brne	.-14     	; 0x1d4a <__ultoa_invert+0x86>
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	61 05       	cpc	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	08 95       	ret
    1d60:	9b 01       	movw	r18, r22
    1d62:	ac 01       	movw	r20, r24
    1d64:	0a 2e       	mov	r0, r26
    1d66:	06 94       	lsr	r0
    1d68:	57 95       	ror	r21
    1d6a:	47 95       	ror	r20
    1d6c:	37 95       	ror	r19
    1d6e:	27 95       	ror	r18
    1d70:	ba 95       	dec	r27
    1d72:	c9 f7       	brne	.-14     	; 0x1d66 <__ultoa_invert+0xa2>
    1d74:	62 0f       	add	r22, r18
    1d76:	73 1f       	adc	r23, r19
    1d78:	84 1f       	adc	r24, r20
    1d7a:	95 1f       	adc	r25, r21
    1d7c:	a0 1d       	adc	r26, r0
    1d7e:	08 95       	ret

00001d80 <__divmodsi4>:
    1d80:	05 2e       	mov	r0, r21
    1d82:	97 fb       	bst	r25, 7
    1d84:	1e f4       	brtc	.+6      	; 0x1d8c <__divmodsi4+0xc>
    1d86:	00 94       	com	r0
    1d88:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__negsi2>
    1d8c:	57 fd       	sbrc	r21, 7
    1d8e:	07 d0       	rcall	.+14     	; 0x1d9e <__divmodsi4_neg2>
    1d90:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__udivmodsi4>
    1d94:	07 fc       	sbrc	r0, 7
    1d96:	03 d0       	rcall	.+6      	; 0x1d9e <__divmodsi4_neg2>
    1d98:	4e f4       	brtc	.+18     	; 0x1dac <__divmodsi4_exit>
    1d9a:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__negsi2>

00001d9e <__divmodsi4_neg2>:
    1d9e:	50 95       	com	r21
    1da0:	40 95       	com	r20
    1da2:	30 95       	com	r19
    1da4:	21 95       	neg	r18
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	4f 4f       	sbci	r20, 0xFF	; 255
    1daa:	5f 4f       	sbci	r21, 0xFF	; 255

00001dac <__divmodsi4_exit>:
    1dac:	08 95       	ret

00001dae <__negsi2>:
    1dae:	90 95       	com	r25
    1db0:	80 95       	com	r24
    1db2:	70 95       	com	r23
    1db4:	61 95       	neg	r22
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	08 95       	ret

00001dbe <__muluhisi3>:
    1dbe:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__umulhisi3>
    1dc2:	a5 9f       	mul	r26, r21
    1dc4:	90 0d       	add	r25, r0
    1dc6:	b4 9f       	mul	r27, r20
    1dc8:	90 0d       	add	r25, r0
    1dca:	a4 9f       	mul	r26, r20
    1dcc:	80 0d       	add	r24, r0
    1dce:	91 1d       	adc	r25, r1
    1dd0:	11 24       	eor	r1, r1
    1dd2:	08 95       	ret

00001dd4 <__mulshisi3>:
    1dd4:	b7 ff       	sbrs	r27, 7
    1dd6:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__muluhisi3>

00001dda <__mulohisi3>:
    1dda:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__muluhisi3>
    1dde:	82 1b       	sub	r24, r18
    1de0:	93 0b       	sbc	r25, r19
    1de2:	08 95       	ret

00001de4 <__prologue_saves__>:
    1de4:	2f 92       	push	r2
    1de6:	3f 92       	push	r3
    1de8:	4f 92       	push	r4
    1dea:	5f 92       	push	r5
    1dec:	6f 92       	push	r6
    1dee:	7f 92       	push	r7
    1df0:	8f 92       	push	r8
    1df2:	9f 92       	push	r9
    1df4:	af 92       	push	r10
    1df6:	bf 92       	push	r11
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	ca 1b       	sub	r28, r26
    1e0e:	db 0b       	sbc	r29, r27
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	09 94       	ijmp

00001e1c <__epilogue_restores__>:
    1e1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1e1e:	39 88       	ldd	r3, Y+17	; 0x11
    1e20:	48 88       	ldd	r4, Y+16	; 0x10
    1e22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1e30:	c8 84       	ldd	r12, Y+8	; 0x08
    1e32:	df 80       	ldd	r13, Y+7	; 0x07
    1e34:	ee 80       	ldd	r14, Y+6	; 0x06
    1e36:	fd 80       	ldd	r15, Y+5	; 0x05
    1e38:	0c 81       	ldd	r16, Y+4	; 0x04
    1e3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1e3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e40:	ce 0f       	add	r28, r30
    1e42:	d1 1d       	adc	r29, r1
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	ed 01       	movw	r28, r26
    1e50:	08 95       	ret

00001e52 <__udivmodsi4>:
    1e52:	a1 e2       	ldi	r26, 0x21	; 33
    1e54:	1a 2e       	mov	r1, r26
    1e56:	aa 1b       	sub	r26, r26
    1e58:	bb 1b       	sub	r27, r27
    1e5a:	fd 01       	movw	r30, r26
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <__udivmodsi4_ep>

00001e5e <__udivmodsi4_loop>:
    1e5e:	aa 1f       	adc	r26, r26
    1e60:	bb 1f       	adc	r27, r27
    1e62:	ee 1f       	adc	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	a2 17       	cp	r26, r18
    1e68:	b3 07       	cpc	r27, r19
    1e6a:	e4 07       	cpc	r30, r20
    1e6c:	f5 07       	cpc	r31, r21
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <__udivmodsi4_ep>
    1e70:	a2 1b       	sub	r26, r18
    1e72:	b3 0b       	sbc	r27, r19
    1e74:	e4 0b       	sbc	r30, r20
    1e76:	f5 0b       	sbc	r31, r21

00001e78 <__udivmodsi4_ep>:
    1e78:	66 1f       	adc	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	1a 94       	dec	r1
    1e82:	69 f7       	brne	.-38     	; 0x1e5e <__udivmodsi4_loop>
    1e84:	60 95       	com	r22
    1e86:	70 95       	com	r23
    1e88:	80 95       	com	r24
    1e8a:	90 95       	com	r25
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	bd 01       	movw	r22, r26
    1e92:	cf 01       	movw	r24, r30
    1e94:	08 95       	ret

00001e96 <__umulhisi3>:
    1e96:	a2 9f       	mul	r26, r18
    1e98:	b0 01       	movw	r22, r0
    1e9a:	b3 9f       	mul	r27, r19
    1e9c:	c0 01       	movw	r24, r0
    1e9e:	a3 9f       	mul	r26, r19
    1ea0:	70 0d       	add	r23, r0
    1ea2:	81 1d       	adc	r24, r1
    1ea4:	11 24       	eor	r1, r1
    1ea6:	91 1d       	adc	r25, r1
    1ea8:	b2 9f       	mul	r27, r18
    1eaa:	70 0d       	add	r23, r0
    1eac:	81 1d       	adc	r24, r1
    1eae:	11 24       	eor	r1, r1
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	08 95       	ret

00001eb4 <_exit>:
    1eb4:	f8 94       	cli

00001eb6 <__stop_program>:
    1eb6:	ff cf       	rjmp	.-2      	; 0x1eb6 <__stop_program>
