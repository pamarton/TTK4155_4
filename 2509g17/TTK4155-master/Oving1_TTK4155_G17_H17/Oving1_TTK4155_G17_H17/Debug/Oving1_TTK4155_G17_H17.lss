
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000031a  00800100  00002208  0000229c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080041a  0080041a  000025b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000238e  00000000  00000000  000027b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009aa  00000000  00000000  00004b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a44  00000000  00000000  000054ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000560  00000000  00000000  00005f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c7  00000000  00000000  00006490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001adb  00000000  00000000  00006c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00008732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__ctors_end>
       4:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_1>
       8:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_2>
       c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      14:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      18:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      1c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      20:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      24:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      28:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      2c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      30:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      34:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      38:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      3c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      40:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      44:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      48:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      4c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      50:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      54:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      58:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      5c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      60:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      64:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      68:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      6c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	43 6f       	ori	r20, 0xF3	; 243
      72:	6e 74       	andi	r22, 0x4E	; 78
      74:	72 61       	ori	r23, 0x12	; 18
      76:	73 74       	andi	r23, 0x43	; 67
	...

00000079 <option_n2>:
      79:	6f 70 74 32 00                                      opt2.

0000007e <option_n1>:
      7e:	6f 70 74 31 00                                      opt1.

00000083 <option_n0>:
      83:	6f 70 74 30 00                                      opt0.

00000088 <leaderboard_n7>:
      88:	37 00                                               7.

0000008a <leaderboard_n6>:
      8a:	36 00                                               6.

0000008c <leaderboard_n5>:
      8c:	35 00                                               5.

0000008e <leaderboard_n4>:
      8e:	34 00                                               4.

00000090 <leaderboard_n3>:
      90:	33 00                                               3.

00000092 <leaderboard_n2>:
      92:	32 00                                               2.

00000094 <leaderboard_n1>:
      94:	31 00                                               1.

00000096 <leaderboard_n0>:
      96:	30 00                                               0.

00000098 <mainmenu_n3>:
      98:	44 65 62 75 67 00                                   Debug.

0000009e <mainmenu_n2>:
      9e:	4f 70 74 69 6f 6e 73 00                             Options.

000000a6 <mainmenu_n1>:
      a6:	4c 65 61 64 65 72 62 6f 61 72 64 00                 Leaderboard.

000000b2 <mainmenu_n0>:
      b2:	53 74 61 72 74 00                                   Start.

000000b8 <font>:
	...
      c0:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      d0:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
      e0:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
      f0:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     100:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     110:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     120:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     130:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     140:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     150:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     160:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     170:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     180:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     190:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1a0:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1b0:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1c0:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1d0:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1e0:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     1f0:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     200:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     210:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     220:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     230:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     240:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     250:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     260:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     270:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     280:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     290:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2a0:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2b0:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2c0:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2d0:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2e0:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     2f0:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     300:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     310:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     320:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     330:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     340:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     350:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     360:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     370:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     380:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     390:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3a0:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3b0:	66 86 b0 70 70 b0 86 66 ff 81 81 81 81 81 81 ff     f..pp..f........
     3c0:	ff 81 91 a1 99 85 81 ff                             ........

000003c8 <__ctors_end>:
     3c8:	11 24       	eor	r1, r1
     3ca:	1f be       	out	0x3f, r1	; 63
     3cc:	cf ef       	ldi	r28, 0xFF	; 255
     3ce:	d4 e0       	ldi	r29, 0x04	; 4
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	cd bf       	out	0x3d, r28	; 61

000003d4 <__do_copy_data>:
     3d4:	14 e0       	ldi	r17, 0x04	; 4
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	e8 e0       	ldi	r30, 0x08	; 8
     3dc:	f2 e2       	ldi	r31, 0x22	; 34
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__do_copy_data+0x10>
     3e0:	05 90       	lpm	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	aa 31       	cpi	r26, 0x1A	; 26
     3e6:	b1 07       	cpc	r27, r17
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <__do_copy_data+0xc>

000003ea <__do_clear_bss>:
     3ea:	24 e0       	ldi	r18, 0x04	; 4
     3ec:	aa e1       	ldi	r26, 0x1A	; 26
     3ee:	b4 e0       	ldi	r27, 0x04	; 4
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <.do_clear_bss_start>

000003f2 <.do_clear_bss_loop>:
     3f2:	1d 92       	st	X+, r1

000003f4 <.do_clear_bss_start>:
     3f4:	aa 34       	cpi	r26, 0x4A	; 74
     3f6:	b2 07       	cpc	r27, r18
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <.do_clear_bss_loop>
     3fa:	0e 94 87 05 	call	0xb0e	; 0xb0e <main>
     3fe:	0c 94 02 11 	jmp	0x2204	; 0x2204 <_exit>

00000402 <__bad_interrupt>:
     402:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000406 <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	91 05       	cpc	r25, r1
     40a:	71 f0       	breq	.+28     	; 0x428 <readADC+0x22>
     40c:	1c f4       	brge	.+6      	; 0x414 <readADC+0xe>
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	39 f0       	breq	.+14     	; 0x420 <readADC+0x1a>
     412:	1c c0       	rjmp	.+56     	; 0x44c <readADC+0x46>
     414:	83 30       	cpi	r24, 0x03	; 3
     416:	91 05       	cpc	r25, r1
     418:	59 f0       	breq	.+22     	; 0x430 <readADC+0x2a>
     41a:	04 97       	sbiw	r24, 0x04	; 4
     41c:	69 f0       	breq	.+26     	; 0x438 <readADC+0x32>
     41e:	16 c0       	rjmp	.+44     	; 0x44c <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
     420:	84 e1       	ldi	r24, 0x14	; 20
     422:	80 93 00 14 	sts	0x1400, r24
     426:	0b c0       	rjmp	.+22     	; 0x43e <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
     428:	85 e1       	ldi	r24, 0x15	; 21
     42a:	80 93 00 14 	sts	0x1400, r24
     42e:	07 c0       	rjmp	.+14     	; 0x43e <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
     430:	86 e1       	ldi	r24, 0x16	; 22
     432:	80 93 00 14 	sts	0x1400, r24
     436:	03 c0       	rjmp	.+6      	; 0x43e <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
     438:	87 e1       	ldi	r24, 0x17	; 23
     43a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43e:	82 e5       	ldi	r24, 0x52	; 82
     440:	8a 95       	dec	r24
     442:	f1 f7       	brne	.-4      	; 0x440 <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
     444:	80 91 00 14 	lds	r24, 0x1400
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
     450:	08 95       	ret

00000452 <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     452:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     454:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     456:	85 b7       	in	r24, 0x35	; 53
     458:	81 60       	ori	r24, 0x01	; 1
     45a:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	82 60       	ori	r24, 0x02	; 2
     460:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     462:	85 b7       	in	r24, 0x35	; 53
     464:	84 60       	ori	r24, 0x04	; 4
     466:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     468:	85 b7       	in	r24, 0x35	; 53
     46a:	88 60       	ori	r24, 0x08	; 8
     46c:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     46e:	8b b7       	in	r24, 0x3b	; 59
     470:	80 64       	ori	r24, 0x40	; 64
     472:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     474:	8b b7       	in	r24, 0x3b	; 59
     476:	80 68       	ori	r24, 0x80	; 128
     478:	8b bf       	out	0x3b, r24	; 59
	sei();//enabling interrupts globaly
     47a:	78 94       	sei
     47c:	08 95       	ret

0000047e <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4ac:	8e e0       	ldi	r24, 0x0E	; 14
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     4b8:	82 e5       	ldi	r24, 0x52	; 82
     4ba:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     4be:	f8 2e       	mov	r15, r24
     4c0:	e9 2e       	mov	r14, r25
     4c2:	8c e4       	ldi	r24, 0x4C	; 76
     4c4:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     4c8:	18 2f       	mov	r17, r24
     4ca:	09 2f       	mov	r16, r25
     4cc:	89 e5       	ldi	r24, 0x59	; 89
     4ce:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     4d2:	c8 2f       	mov	r28, r24
     4d4:	d9 2f       	mov	r29, r25
     4d6:	88 e5       	ldi	r24, 0x58	; 88
     4d8:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	9f 93       	push	r25
     4ea:	8f 93       	push	r24
     4ec:	87 e3       	ldi	r24, 0x37	; 55
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
     4f8:	8d b7       	in	r24, 0x3d	; 61
     4fa:	9e b7       	in	r25, 0x3e	; 62
     4fc:	0c 96       	adiw	r24, 0x0c	; 12
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	9e bf       	out	0x3e, r25	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	8d bf       	out	0x3d, r24	; 61
}
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	printf("Left Button Pressed\n");
     558:	80 e5       	ldi	r24, 0x50	; 80
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	4f 91       	pop	r20
     574:	3f 91       	pop	r19
     576:	2f 91       	pop	r18
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	c4 e6       	ldi	r28, 0x64	; 100
     58c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     58e:	00 91 24 04 	lds	r16, 0x0424
     592:	10 91 25 04 	lds	r17, 0x0425
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 03 02 	call	0x406	; 0x406 <readADC>
     59e:	01 58       	subi	r16, 0x81	; 129
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	08 1b       	sub	r16, r24
     5a4:	19 0b       	sbc	r17, r25
     5a6:	10 93 25 04 	sts	0x0425, r17
     5aa:	00 93 24 04 	sts	0x0424, r16
		calibrate_y += 127 - readADC(2);
     5ae:	00 91 22 04 	lds	r16, 0x0422
     5b2:	10 91 23 04 	lds	r17, 0x0423
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 03 02 	call	0x406	; 0x406 <readADC>
     5be:	01 58       	subi	r16, 0x81	; 129
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	08 1b       	sub	r16, r24
     5c4:	19 0b       	sbc	r17, r25
     5c6:	10 93 23 04 	sts	0x0423, r17
     5ca:	00 93 22 04 	sts	0x0422, r16
     5ce:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     5d0:	20 97       	sbiw	r28, 0x00	; 0
     5d2:	e9 f6       	brne	.-70     	; 0x58e <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     5d4:	80 91 24 04 	lds	r24, 0x0424
     5d8:	90 91 25 04 	lds	r25, 0x0425
     5dc:	24 e6       	ldi	r18, 0x64	; 100
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 8d 0b 	call	0x171a	; 0x171a <__divmodhi4>
     5e6:	70 93 25 04 	sts	0x0425, r23
     5ea:	60 93 24 04 	sts	0x0424, r22
	calibrate_y /= CALIBRATE_READINGS;
     5ee:	80 91 22 04 	lds	r24, 0x0422
     5f2:	90 91 23 04 	lds	r25, 0x0423
     5f6:	b9 01       	movw	r22, r18
     5f8:	0e 94 8d 0b 	call	0x171a	; 0x171a <__divmodhi4>
     5fc:	70 93 23 04 	sts	0x0423, r23
     600:	60 93 22 04 	sts	0x0422, r22
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	08 95       	ret

0000060e <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int referance, int step){
     60e:	2f 92       	push	r2
     610:	3f 92       	push	r3
     612:	4f 92       	push	r4
     614:	5f 92       	push	r5
     616:	6f 92       	push	r6
     618:	7f 92       	push	r7
     61a:	8f 92       	push	r8
     61c:	9f 92       	push	r9
     61e:	af 92       	push	r10
     620:	bf 92       	push	r11
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	00 d0       	rcall	.+0      	; 0x634 <signal_to_range+0x26>
     634:	00 d0       	rcall	.+0      	; 0x636 <signal_to_range+0x28>
     636:	00 d0       	rcall	.+0      	; 0x638 <signal_to_range+0x2a>
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	3c 01       	movw	r6, r24
     63e:	7a 83       	std	Y+2, r23	; 0x02
     640:	69 83       	std	Y+1, r22	; 0x01
     642:	5c 83       	std	Y+4, r21	; 0x04
     644:	4b 83       	std	Y+3, r20	; 0x03
     646:	3e 83       	std	Y+6, r19	; 0x06
     648:	2d 83       	std	Y+5, r18	; 0x05
     64a:	18 01       	movw	r2, r16
     64c:	85 01       	movw	r16, r10
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     64e:	b9 01       	movw	r22, r18
     650:	88 27       	eor	r24, r24
     652:	77 fd       	sbrc	r23, 7
     654:	80 95       	com	r24
     656:	98 2f       	mov	r25, r24
     658:	0e 94 9e 0a 	call	0x153c	; 0x153c <__floatsisf>
     65c:	4b 01       	movw	r8, r22
     65e:	5c 01       	movw	r10, r24
     660:	b3 01       	movw	r22, r6
     662:	6e 0d       	add	r22, r14
     664:	7f 1d       	adc	r23, r15
     666:	29 81       	ldd	r18, Y+1	; 0x01
     668:	3a 81       	ldd	r19, Y+2	; 0x02
     66a:	62 1b       	sub	r22, r18
     66c:	73 0b       	sbc	r23, r19
     66e:	88 27       	eor	r24, r24
     670:	77 fd       	sbrc	r23, 7
     672:	80 95       	com	r24
     674:	98 2f       	mov	r25, r24
     676:	0e 94 9e 0a 	call	0x153c	; 0x153c <__floatsisf>
     67a:	2b 01       	movw	r4, r22
     67c:	3c 01       	movw	r6, r24
     67e:	b1 01       	movw	r22, r2
     680:	8d 81       	ldd	r24, Y+5	; 0x05
     682:	9e 81       	ldd	r25, Y+6	; 0x06
     684:	68 1b       	sub	r22, r24
     686:	79 0b       	sbc	r23, r25
     688:	88 27       	eor	r24, r24
     68a:	77 fd       	sbrc	r23, 7
     68c:	80 95       	com	r24
     68e:	98 2f       	mov	r25, r24
     690:	0e 94 9e 0a 	call	0x153c	; 0x153c <__floatsisf>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
     698:	c3 01       	movw	r24, r6
     69a:	b2 01       	movw	r22, r4
     69c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__mulsf3>
     6a0:	2b 01       	movw	r4, r22
     6a2:	3c 01       	movw	r6, r24
     6a4:	6b 81       	ldd	r22, Y+3	; 0x03
     6a6:	7c 81       	ldd	r23, Y+4	; 0x04
     6a8:	e9 81       	ldd	r30, Y+1	; 0x01
     6aa:	fa 81       	ldd	r31, Y+2	; 0x02
     6ac:	6e 1b       	sub	r22, r30
     6ae:	7f 0b       	sbc	r23, r31
     6b0:	88 27       	eor	r24, r24
     6b2:	77 fd       	sbrc	r23, 7
     6b4:	80 95       	com	r24
     6b6:	98 2f       	mov	r25, r24
     6b8:	0e 94 9e 0a 	call	0x153c	; 0x153c <__floatsisf>
     6bc:	9b 01       	movw	r18, r22
     6be:	ac 01       	movw	r20, r24
     6c0:	c3 01       	movw	r24, r6
     6c2:	b2 01       	movw	r22, r4
     6c4:	0e 94 03 0a 	call	0x1406	; 0x1406 <__divsf3>
     6c8:	9b 01       	movw	r18, r22
     6ca:	ac 01       	movw	r20, r24
     6cc:	c5 01       	movw	r24, r10
     6ce:	b4 01       	movw	r22, r8
     6d0:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     6d4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fixsfsi>
	
		
	if (new_signal >= output_max - step){
     6d8:	c1 01       	movw	r24, r2
     6da:	80 1b       	sub	r24, r16
     6dc:	91 0b       	sbc	r25, r17
     6de:	68 17       	cp	r22, r24
     6e0:	79 07       	cpc	r23, r25
     6e2:	74 f5       	brge	.+92     	; 0x740 <signal_to_range+0x132>
		referance = output_max;
	}else if(new_signal <= output_min + step){
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	9e 81       	ldd	r25, Y+6	; 0x06
     6e8:	80 0f       	add	r24, r16
     6ea:	91 1f       	adc	r25, r17
     6ec:	86 17       	cp	r24, r22
     6ee:	97 07       	cpc	r25, r23
     6f0:	4c f5       	brge	.+82     	; 0x744 <signal_to_range+0x136>
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
			if((new_signal >= referance + step/2)){
     6f2:	f8 01       	movw	r30, r16
     6f4:	11 23       	and	r17, r17
     6f6:	0c f4       	brge	.+2      	; 0x6fa <signal_to_range+0xec>
     6f8:	31 96       	adiw	r30, 0x01	; 1
     6fa:	f5 95       	asr	r31
     6fc:	e7 95       	ror	r30
     6fe:	d8 01       	movw	r26, r16
     700:	12 c0       	rjmp	.+36     	; 0x726 <signal_to_range+0x118>
     702:	8a 0f       	add	r24, r26
     704:	9b 1f       	adc	r25, r27
     706:	ac 01       	movw	r20, r24
     708:	4e 0f       	add	r20, r30
     70a:	5f 1f       	adc	r21, r31
     70c:	64 17       	cp	r22, r20
     70e:	75 07       	cpc	r23, r21
     710:	14 f0       	brlt	.+4      	; 0x716 <signal_to_range+0x108>
				referance += step;
     712:	69 01       	movw	r12, r18
     714:	0b c0       	rjmp	.+22     	; 0x72c <signal_to_range+0x11e>
			}
			else if (new_signal <= referance - step/2){
     716:	c6 01       	movw	r24, r12
     718:	8e 1b       	sub	r24, r30
     71a:	9f 0b       	sbc	r25, r31
     71c:	86 17       	cp	r24, r22
     71e:	97 07       	cpc	r25, r23
     720:	14 f0       	brlt	.+4      	; 0x726 <signal_to_range+0x118>
				referance -= step;
     722:	c0 1a       	sub	r12, r16
     724:	d1 0a       	sbc	r13, r17
     726:	c6 01       	movw	r24, r12
     728:	80 1b       	sub	r24, r16
     72a:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		referance = output_max;
	}else if(new_signal <= output_min + step){
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
     72c:	96 01       	movw	r18, r12
     72e:	20 0f       	add	r18, r16
     730:	31 1f       	adc	r19, r17
     732:	62 17       	cp	r22, r18
     734:	73 07       	cpc	r23, r19
     736:	2c f7       	brge	.-54     	; 0x702 <signal_to_range+0xf4>
     738:	86 17       	cp	r24, r22
     73a:	97 07       	cpc	r25, r23
     73c:	14 f7       	brge	.-60     	; 0x702 <signal_to_range+0xf4>
     73e:	04 c0       	rjmp	.+8      	; 0x748 <signal_to_range+0x13a>
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	if (new_signal >= output_max - step){
		referance = output_max;
     740:	61 01       	movw	r12, r2
     742:	02 c0       	rjmp	.+4      	; 0x748 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		referance = output_min;
     744:	cd 80       	ldd	r12, Y+5	; 0x05
     746:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, referance);
	return referance;
}
     748:	c6 01       	movw	r24, r12
     74a:	26 96       	adiw	r28, 0x06	; 6
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	3f 90       	pop	r3
     778:	2f 90       	pop	r2
     77a:	08 95       	ret

0000077c <read_control_input>:
	}
	calibrate_x /= CALIBRATE_READINGS;
	calibrate_y /= CALIBRATE_READINGS;
}

int read_control_input(char channel){
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
	switch(channel){
     78c:	82 35       	cpi	r24, 0x52	; 82
     78e:	09 f4       	brne	.+2      	; 0x792 <read_control_input+0x16>
     790:	74 c0       	rjmp	.+232    	; 0x87a <read_control_input+0xfe>
     792:	20 f4       	brcc	.+8      	; 0x79c <read_control_input+0x20>
     794:	8c 34       	cpi	r24, 0x4C	; 76
     796:	09 f4       	brne	.+2      	; 0x79a <read_control_input+0x1e>
     798:	4e c0       	rjmp	.+156    	; 0x836 <read_control_input+0xba>
     79a:	91 c0       	rjmp	.+290    	; 0x8be <read_control_input+0x142>
     79c:	88 35       	cpi	r24, 0x58	; 88
     79e:	19 f0       	breq	.+6      	; 0x7a6 <read_control_input+0x2a>
     7a0:	89 35       	cpi	r24, 0x59	; 89
     7a2:	29 f1       	breq	.+74     	; 0x7ee <read_control_input+0x72>
     7a4:	8c c0       	rjmp	.+280    	; 0x8be <read_control_input+0x142>
		case 'X': 
			ref_X = signal_to_range(readADC(1), 0, 255, -100, 100, calibrate_x, ref_X, 10); 
     7a6:	c0 90 20 04 	lds	r12, 0x0420
     7aa:	d0 90 21 04 	lds	r13, 0x0421
     7ae:	e0 90 24 04 	lds	r14, 0x0424
     7b2:	f0 90 25 04 	lds	r15, 0x0425
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 03 02 	call	0x406	; 0x406 <readADC>
     7be:	0f 2e       	mov	r0, r31
     7c0:	fa e0       	ldi	r31, 0x0A	; 10
     7c2:	af 2e       	mov	r10, r31
     7c4:	b1 2c       	mov	r11, r1
     7c6:	f0 2d       	mov	r31, r0
     7c8:	04 e6       	ldi	r16, 0x64	; 100
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	2c e9       	ldi	r18, 0x9C	; 156
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	0e 94 07 03 	call	0x60e	; 0x60e <signal_to_range>
     7dc:	90 93 21 04 	sts	0x0421, r25
     7e0:	80 93 20 04 	sts	0x0420, r24
			return ref_X;
     7e4:	80 91 20 04 	lds	r24, 0x0420
     7e8:	90 91 21 04 	lds	r25, 0x0421
     7ec:	6a c0       	rjmp	.+212    	; 0x8c2 <read_control_input+0x146>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), 0, 255, -100, 100, calibrate_y, ref_Y, 10);
     7ee:	c0 90 1e 04 	lds	r12, 0x041E
     7f2:	d0 90 1f 04 	lds	r13, 0x041F
     7f6:	e0 90 22 04 	lds	r14, 0x0422
     7fa:	f0 90 23 04 	lds	r15, 0x0423
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 03 02 	call	0x406	; 0x406 <readADC>
     806:	0f 2e       	mov	r0, r31
     808:	fa e0       	ldi	r31, 0x0A	; 10
     80a:	af 2e       	mov	r10, r31
     80c:	b1 2c       	mov	r11, r1
     80e:	f0 2d       	mov	r31, r0
     810:	04 e6       	ldi	r16, 0x64	; 100
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	2c e9       	ldi	r18, 0x9C	; 156
     816:	3f ef       	ldi	r19, 0xFF	; 255
     818:	4f ef       	ldi	r20, 0xFF	; 255
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	0e 94 07 03 	call	0x60e	; 0x60e <signal_to_range>
     824:	90 93 1f 04 	sts	0x041F, r25
     828:	80 93 1e 04 	sts	0x041E, r24
			return ref_Y;
     82c:	80 91 1e 04 	lds	r24, 0x041E
     830:	90 91 1f 04 	lds	r25, 0x041F
     834:	46 c0       	rjmp	.+140    	; 0x8c2 <read_control_input+0x146>
		case 'L':
		ref_L = signal_to_range(readADC(3), 0, 255, 0, 100, 0, ref_L, 10);
     836:	c0 90 1c 04 	lds	r12, 0x041C
     83a:	d0 90 1d 04 	lds	r13, 0x041D
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 03 02 	call	0x406	; 0x406 <readADC>
     846:	0f 2e       	mov	r0, r31
     848:	fa e0       	ldi	r31, 0x0A	; 10
     84a:	af 2e       	mov	r10, r31
     84c:	b1 2c       	mov	r11, r1
     84e:	f0 2d       	mov	r31, r0
     850:	e1 2c       	mov	r14, r1
     852:	f1 2c       	mov	r15, r1
     854:	04 e6       	ldi	r16, 0x64	; 100
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	4f ef       	ldi	r20, 0xFF	; 255
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	0e 94 07 03 	call	0x60e	; 0x60e <signal_to_range>
     868:	90 93 1d 04 	sts	0x041D, r25
     86c:	80 93 1c 04 	sts	0x041C, r24
		return ref_L;
     870:	80 91 1c 04 	lds	r24, 0x041C
     874:	90 91 1d 04 	lds	r25, 0x041D
     878:	24 c0       	rjmp	.+72     	; 0x8c2 <read_control_input+0x146>
		case 'R': 
			ref_R = signal_to_range(readADC(4), 0, 255, 0, 100, 0, ref_R, 10);
     87a:	c0 90 1a 04 	lds	r12, 0x041A
     87e:	d0 90 1b 04 	lds	r13, 0x041B
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 03 02 	call	0x406	; 0x406 <readADC>
     88a:	0f 2e       	mov	r0, r31
     88c:	fa e0       	ldi	r31, 0x0A	; 10
     88e:	af 2e       	mov	r10, r31
     890:	b1 2c       	mov	r11, r1
     892:	f0 2d       	mov	r31, r0
     894:	e1 2c       	mov	r14, r1
     896:	f1 2c       	mov	r15, r1
     898:	04 e6       	ldi	r16, 0x64	; 100
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	4f ef       	ldi	r20, 0xFF	; 255
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	0e 94 07 03 	call	0x60e	; 0x60e <signal_to_range>
     8ac:	90 93 1b 04 	sts	0x041B, r25
     8b0:	80 93 1a 04 	sts	0x041A, r24
			return ref_R;
     8b4:	80 91 1a 04 	lds	r24, 0x041A
     8b8:	90 91 1b 04 	lds	r25, 0x041B
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <read_control_input+0x146>
	}
	return 0;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
}
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	08 95       	ret

000008d4 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     8d4:	0e 94 c1 02 	call	0x582	; 0x582 <calibrate_joystick>
	ref_X = read_control_input('X');
     8d8:	88 e5       	ldi	r24, 0x58	; 88
     8da:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     8de:	90 93 21 04 	sts	0x0421, r25
     8e2:	80 93 20 04 	sts	0x0420, r24
	ref_Y = read_control_input('Y');
     8e6:	89 e5       	ldi	r24, 0x59	; 89
     8e8:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     8ec:	90 93 1f 04 	sts	0x041F, r25
     8f0:	80 93 1e 04 	sts	0x041E, r24
	ref_L = read_control_input('L');
     8f4:	8c e4       	ldi	r24, 0x4C	; 76
     8f6:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     8fa:	90 93 1d 04 	sts	0x041D, r25
     8fe:	80 93 1c 04 	sts	0x041C, r24
	ref_R = read_control_input('R');
     902:	82 e5       	ldi	r24, 0x52	; 82
     904:	0e 94 be 03 	call	0x77c	; 0x77c <read_control_input>
     908:	90 93 1b 04 	sts	0x041B, r25
     90c:	80 93 1a 04 	sts	0x041A, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     910:	20 91 22 04 	lds	r18, 0x0422
     914:	30 91 23 04 	lds	r19, 0x0423
     918:	80 91 24 04 	lds	r24, 0x0424
     91c:	90 91 25 04 	lds	r25, 0x0425
     920:	3f 93       	push	r19
     922:	2f 93       	push	r18
     924:	9f 93       	push	r25
     926:	8f 93       	push	r24
     928:	84 e6       	ldi	r24, 0x64	; 100
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     934:	60 91 1a 04 	lds	r22, 0x041A
     938:	70 91 1b 04 	lds	r23, 0x041B
     93c:	40 91 1c 04 	lds	r20, 0x041C
     940:	50 91 1d 04 	lds	r21, 0x041D
     944:	20 91 1e 04 	lds	r18, 0x041E
     948:	30 91 1f 04 	lds	r19, 0x041F
     94c:	80 91 20 04 	lds	r24, 0x0420
     950:	90 91 21 04 	lds	r25, 0x0421
     954:	7f 93       	push	r23
     956:	6f 93       	push	r22
     958:	5f 93       	push	r21
     95a:	4f 93       	push	r20
     95c:	3f 93       	push	r19
     95e:	2f 93       	push	r18
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	8d e8       	ldi	r24, 0x8D	; 141
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
     970:	8d b7       	in	r24, 0x3d	; 61
     972:	9e b7       	in	r25, 0x3e	; 62
     974:	40 96       	adiw	r24, 0x10	; 16
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	9e bf       	out	0x3e, r25	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	8d bf       	out	0x3d, r24	; 61
     980:	08 95       	ret

00000982 <SRAM_test>:
	printf("\nINITIALIZATION COMPLETE\n");
}

#include <stdlib.h>
void SRAM_test(void)
{
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     992:	86 eb       	ldi	r24, 0xB6	; 182
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     99a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <rand>
     99e:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9a0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9a4:	c0 e0       	ldi	r28, 0x00	; 0
     9a6:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9a8:	00 e0       	ldi	r16, 0x00	; 0
     9aa:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9ac:	0f 2e       	mov	r0, r31
     9ae:	fc ec       	ldi	r31, 0xCC	; 204
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	ff 2e       	mov	r15, r31
     9b6:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9b8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <rand>
     9bc:	fe 01       	movw	r30, r28
     9be:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9c0:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9c2:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9c4:	28 17       	cp	r18, r24
     9c6:	a9 f0       	breq	.+42     	; 0x9f2 <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9c8:	99 27       	eor	r25, r25
     9ca:	9f 93       	push	r25
     9cc:	8f 93       	push	r24
     9ce:	1f 92       	push	r1
     9d0:	2f 93       	push	r18
     9d2:	df 93       	push	r29
     9d4:	cf 93       	push	r28
     9d6:	ff 92       	push	r15
     9d8:	ef 92       	push	r14
     9da:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
			write_errors++;
     9de:	0f 5f       	subi	r16, 0xFF	; 255
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	8d b7       	in	r24, 0x3d	; 61
     9e4:	9e b7       	in	r25, 0x3e	; 62
     9e6:	08 96       	adiw	r24, 0x08	; 8
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	9e bf       	out	0x3e, r25	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9f2:	21 96       	adiw	r28, 0x01	; 1
     9f4:	c1 15       	cp	r28, r1
     9f6:	98 e0       	ldi	r25, 0x08	; 8
     9f8:	d9 07       	cpc	r29, r25
     9fa:	f1 f6       	brne	.-68     	; 0x9b8 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     9fc:	c6 01       	movw	r24, r12
     9fe:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a02:	c0 e0       	ldi	r28, 0x00	; 0
     a04:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a06:	e1 2c       	mov	r14, r1
     a08:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a0a:	0f 2e       	mov	r0, r31
     a0c:	f5 e0       	ldi	r31, 0x05	; 5
     a0e:	cf 2e       	mov	r12, r31
     a10:	f2 e0       	ldi	r31, 0x02	; 2
     a12:	df 2e       	mov	r13, r31
     a14:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a16:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <rand>
     a1a:	fe 01       	movw	r30, r28
     a1c:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a1e:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a20:	28 17       	cp	r18, r24
     a22:	b1 f0       	breq	.+44     	; 0xa50 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a24:	99 27       	eor	r25, r25
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	1f 92       	push	r1
     a2c:	2f 93       	push	r18
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	df 92       	push	r13
     a34:	cf 92       	push	r12
     a36:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
			retrieval_errors++;
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	e8 1a       	sub	r14, r24
     a3e:	f8 0a       	sbc	r15, r24
     a40:	8d b7       	in	r24, 0x3d	; 61
     a42:	9e b7       	in	r25, 0x3e	; 62
     a44:	08 96       	adiw	r24, 0x08	; 8
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	9e bf       	out	0x3e, r25	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a50:	21 96       	adiw	r28, 0x01	; 1
     a52:	c1 15       	cp	r28, r1
     a54:	98 e0       	ldi	r25, 0x08	; 8
     a56:	d9 07       	cpc	r29, r25
     a58:	f1 f6       	brne	.-68     	; 0xa16 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     a5a:	ff 92       	push	r15
     a5c:	ef 92       	push	r14
     a5e:	1f 93       	push	r17
     a60:	0f 93       	push	r16
     a62:	82 e4       	ldi	r24, 0x42	; 66
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	08 95       	ret

00000a8c <initalize>:



void initalize(void){
	
	init_UART(UBBR);
     a8c:	8f e1       	ldi	r24, 0x1F	; 31
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 93 09 	call	0x1326	; 0x1326 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     a94:	89 e9       	ldi	r24, 0x99	; 153
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	82 ea       	ldi	r24, 0xA2	; 162
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	9f 93       	push	r25
     aa2:	8f 93       	push	r24
     aa4:	8e ea       	ldi	r24, 0xAE	; 174
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	9f 93       	push	r25
     aaa:	8f 93       	push	r24
     aac:	83 eb       	ldi	r24, 0xB3	; 179
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     ab8:	85 b7       	in	r24, 0x35	; 53
     aba:	80 68       	ori	r24, 0x80	; 128
     abc:	85 bf       	out	0x35, r24	; 53
	
	
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     abe:	80 b7       	in	r24, 0x30	; 48
     ac0:	80 62       	ori	r24, 0x20	; 32
     ac2:	80 bf       	out	0x30, r24	; 48
	
	initialize_menu();
     ac4:	0e 94 96 05 	call	0xb2c	; 0xb2c <initialize_menu>
	
	initialize_control_input();
     ac8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <initialize_control_input>
	printf("control input successfully initialized\n\n");
     acc:	89 ef       	ldi	r24, 0xF9	; 249
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
	SRAM_test();
     ad4:	0e 94 c1 04 	call	0x982	; 0x982 <SRAM_test>
	printf("SRAM successfully initialized\n");
     ad8:	81 e2       	ldi	r24, 0x21	; 33
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
	initalize_interrupts();
     ae0:	0e 94 29 02 	call	0x452	; 0x452 <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     ae4:	8f e3       	ldi	r24, 0x3F	; 63
     ae6:	93 e0       	ldi	r25, 0x03	; 3
     ae8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
	printf("Interrupts activated\n");
     aec:	83 e6       	ldi	r24, 0x63	; 99
     aee:	93 e0       	ldi	r25, 0x03	; 3
     af0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     af4:	88 e7       	ldi	r24, 0x78	; 120
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
     afc:	8d b7       	in	r24, 0x3d	; 61
     afe:	9e b7       	in	r25, 0x3e	; 62
     b00:	08 96       	adiw	r24, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	9e bf       	out	0x3e, r25	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	8d bf       	out	0x3d, r24	; 61
     b0c:	08 95       	ret

00000b0e <main>:
#include "menu.h"

int main(void)
{
	
	initalize();	
     b0e:	0e 94 46 05 	call	0xa8c	; 0xa8c <initalize>
	oled_ini();
     b12:	0e 94 60 08 	call	0x10c0	; 0x10c0 <oled_ini>
	oled_reset();
     b16:	0e 94 4b 09 	call	0x1296	; 0x1296 <oled_reset>
	oled_print_char(129);
	//char * abc = "penis\0";
	//oled_print(abc);
	*/
	
	initialize_menu();
     b1a:	0e 94 96 05 	call	0xb2c	; 0xb2c <initialize_menu>
	oled_print(__TIME__);
     b1e:	89 e9       	ldi	r24, 0x99	; 153
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	0e 94 7f 09 	call	0x12fe	; 0x12fe <oled_print>
	while(1){
		menu_update();
     b26:	0e 94 23 08 	call	0x1046	; 0x1046 <menu_update>
     b2a:	fd cf       	rjmp	.-6      	; 0xb26 <main+0x18>

00000b2c <initialize_menu>:


char temp[16];
int counter;

void initialize_menu(void){
     b2c:	2f 92       	push	r2
     b2e:	3f 92       	push	r3
     b30:	4f 92       	push	r4
     b32:	5f 92       	push	r5
     b34:	6f 92       	push	r6
     b36:	7f 92       	push	r7
     b38:	8f 92       	push	r8
     b3a:	9f 92       	push	r9
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	68 97       	sbiw	r28, 0x18	; 24
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	menu* leaderboard_0 = malloc(sizeof(menu));
     b60:	8c e0       	ldi	r24, 0x0C	; 12
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     b68:	6c 01       	movw	r12, r24
	menu* leaderboard_1 = malloc(sizeof(menu));
     b6a:	8c e0       	ldi	r24, 0x0C	; 12
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     b72:	4c 01       	movw	r8, r24
	menu* leaderboard_2 = malloc(sizeof(menu));
     b74:	8c e0       	ldi	r24, 0x0C	; 12
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     b7c:	5c 01       	movw	r10, r24
	menu* leaderboard_3 = malloc(sizeof(menu));
     b7e:	8c e0       	ldi	r24, 0x0C	; 12
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
	menu* leaderboard_4 = malloc(sizeof(menu));
     b8a:	8c e0       	ldi	r24, 0x0C	; 12
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
	menu* leaderboard_5 = malloc(sizeof(menu));
     b96:	8c e0       	ldi	r24, 0x0C	; 12
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     b9e:	3c 01       	movw	r6, r24
	menu* leaderboard_6 = malloc(sizeof(menu));
     ba0:	8c e0       	ldi	r24, 0x0C	; 12
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     ba8:	1c 01       	movw	r2, r24
	menu* leaderboard_7 = malloc(sizeof(menu));
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     bb2:	9e 83       	std	Y+6, r25	; 0x06
     bb4:	8d 83       	std	Y+5, r24	; 0x05
	menu* option_0 = malloc(sizeof(menu));
     bb6:	8c e0       	ldi	r24, 0x0C	; 12
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     bbe:	7c 01       	movw	r14, r24
	menu* option_1 = malloc(sizeof(menu));
     bc0:	8c e0       	ldi	r24, 0x0C	; 12
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     bc8:	98 87       	std	Y+8, r25	; 0x08
     bca:	8f 83       	std	Y+7, r24	; 0x07
	menu* option_2 = malloc(sizeof(menu));
     bcc:	8c e0       	ldi	r24, 0x0C	; 12
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     bd4:	9a 87       	std	Y+10, r25	; 0x0a
     bd6:	89 87       	std	Y+9, r24	; 0x09
	menu* option_3 = malloc(sizeof(menu));
     bd8:	8c e0       	ldi	r24, 0x0C	; 12
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     be0:	9c 87       	std	Y+12, r25	; 0x0c
     be2:	8b 87       	std	Y+11, r24	; 0x0b
	menu* debug_0 = malloc(sizeof(menu));
     be4:	8c e0       	ldi	r24, 0x0C	; 12
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     bec:	2c 01       	movw	r4, r24
	menu* debug_1 = malloc(sizeof(menu));
     bee:	8c e0       	ldi	r24, 0x0C	; 12
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     bf6:	9e 87       	std	Y+14, r25	; 0x0e
     bf8:	8d 87       	std	Y+13, r24	; 0x0d
	menu* debug_2 = malloc(sizeof(menu));
     bfa:	8c e0       	ldi	r24, 0x0C	; 12
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     c02:	98 8b       	std	Y+16, r25	; 0x10
     c04:	8f 87       	std	Y+15, r24	; 0x0f
	menu* debug_3 = malloc(sizeof(menu));
     c06:	8c e0       	ldi	r24, 0x0C	; 12
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     c0e:	9a 8b       	std	Y+18, r25	; 0x12
     c10:	89 8b       	std	Y+17, r24	; 0x11
	menu* mainmenu_0 = malloc(sizeof(menu));
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     c1a:	9c 8b       	std	Y+20, r25	; 0x14
     c1c:	8b 8b       	std	Y+19, r24	; 0x13
	menu* mainmenu_1 = malloc(sizeof(menu));
     c1e:	8c e0       	ldi	r24, 0x0C	; 12
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     c26:	9e 8b       	std	Y+22, r25	; 0x16
     c28:	8d 8b       	std	Y+21, r24	; 0x15
	menu* mainmenu_2 = malloc(sizeof(menu));
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     c32:	8c 01       	movw	r16, r24
	menu* mainmenu_3 = malloc(sizeof(menu));
     c34:	8c e0       	ldi	r24, 0x0C	; 12
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
     c3c:	98 8f       	std	Y+24, r25	; 0x18
     c3e:	8f 8b       	std	Y+23, r24	; 0x17

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     c40:	86 e9       	ldi	r24, 0x96	; 150
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	d6 01       	movw	r26, r12
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	9c 93       	st	X, r25
     c4a:	8e 93       	st	-X, r24
	new_menu->ptr_up = ptr_up;
     c4c:	ed 81       	ldd	r30, Y+5	; 0x05
     c4e:	fe 81       	ldd	r31, Y+6	; 0x06
     c50:	15 96       	adiw	r26, 0x05	; 5
     c52:	fc 93       	st	X, r31
     c54:	ee 93       	st	-X, r30
     c56:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     c58:	17 96       	adiw	r26, 0x07	; 7
     c5a:	9c 92       	st	X, r9
     c5c:	8e 92       	st	-X, r8
     c5e:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     c60:	19 96       	adiw	r26, 0x09	; 9
     c62:	1c 92       	st	X, r1
     c64:	1e 92       	st	-X, r1
     c66:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     c68:	2d 89       	ldd	r18, Y+21	; 0x15
     c6a:	3e 89       	ldd	r19, Y+22	; 0x16
     c6c:	1b 96       	adiw	r26, 0x0b	; 11
     c6e:	3c 93       	st	X, r19
     c70:	2e 93       	st	-X, r18
     c72:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     c74:	88 e0       	ldi	r24, 0x08	; 8
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	13 96       	adiw	r26, 0x03	; 3
     c7a:	9c 93       	st	X, r25
     c7c:	8e 93       	st	-X, r24
     c7e:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     c80:	24 e9       	ldi	r18, 0x94	; 148
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	d4 01       	movw	r26, r8
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	3c 93       	st	X, r19
     c8a:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     c8c:	15 96       	adiw	r26, 0x05	; 5
     c8e:	dc 92       	st	X, r13
     c90:	ce 92       	st	-X, r12
     c92:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     c94:	17 96       	adiw	r26, 0x07	; 7
     c96:	bc 92       	st	X, r11
     c98:	ae 92       	st	-X, r10
     c9a:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     c9c:	19 96       	adiw	r26, 0x09	; 9
     c9e:	1c 92       	st	X, r1
     ca0:	1e 92       	st	-X, r1
     ca2:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     ca4:	ed 89       	ldd	r30, Y+21	; 0x15
     ca6:	fe 89       	ldd	r31, Y+22	; 0x16
     ca8:	1b 96       	adiw	r26, 0x0b	; 11
     caa:	fc 93       	st	X, r31
     cac:	ee 93       	st	-X, r30
     cae:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     cb0:	13 96       	adiw	r26, 0x03	; 3
     cb2:	9c 93       	st	X, r25
     cb4:	8e 93       	st	-X, r24
     cb6:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     cb8:	22 e9       	ldi	r18, 0x92	; 146
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	d5 01       	movw	r26, r10
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	3c 93       	st	X, r19
     cc2:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     cc4:	15 96       	adiw	r26, 0x05	; 5
     cc6:	9c 92       	st	X, r9
     cc8:	8e 92       	st	-X, r8
     cca:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     ccc:	e9 81       	ldd	r30, Y+1	; 0x01
     cce:	fa 81       	ldd	r31, Y+2	; 0x02
     cd0:	17 96       	adiw	r26, 0x07	; 7
     cd2:	fc 93       	st	X, r31
     cd4:	ee 93       	st	-X, r30
     cd6:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     cd8:	19 96       	adiw	r26, 0x09	; 9
     cda:	1c 92       	st	X, r1
     cdc:	1e 92       	st	-X, r1
     cde:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     ce0:	2d 89       	ldd	r18, Y+21	; 0x15
     ce2:	3e 89       	ldd	r19, Y+22	; 0x16
     ce4:	1b 96       	adiw	r26, 0x0b	; 11
     ce6:	3c 93       	st	X, r19
     ce8:	2e 93       	st	-X, r18
     cea:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     cf4:	20 e9       	ldi	r18, 0x90	; 144
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	31 83       	std	Z+1, r19	; 0x01
     cfa:	20 83       	st	Z, r18
	new_menu->ptr_up = ptr_up;
     cfc:	b5 82       	std	Z+5, r11	; 0x05
     cfe:	a4 82       	std	Z+4, r10	; 0x04
	new_menu->ptr_down = ptr_down;
     d00:	ab 80       	ldd	r10, Y+3	; 0x03
     d02:	bc 80       	ldd	r11, Y+4	; 0x04
     d04:	b7 82       	std	Z+7, r11	; 0x07
     d06:	a6 82       	std	Z+6, r10	; 0x06
	new_menu->ptr_next = ptr_next;
     d08:	11 86       	std	Z+9, r1	; 0x09
     d0a:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     d0c:	ad 88       	ldd	r10, Y+21	; 0x15
     d0e:	be 88       	ldd	r11, Y+22	; 0x16
     d10:	b3 86       	std	Z+11, r11	; 0x0b
     d12:	a2 86       	std	Z+10, r10	; 0x0a
	new_menu->n_siblings = n_siblings;
     d14:	93 83       	std	Z+3, r25	; 0x03
     d16:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     d18:	2e e8       	ldi	r18, 0x8E	; 142
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	ab 81       	ldd	r26, Y+3	; 0x03
     d1e:	bc 81       	ldd	r27, Y+4	; 0x04
     d20:	11 96       	adiw	r26, 0x01	; 1
     d22:	3c 93       	st	X, r19
     d24:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     d26:	15 96       	adiw	r26, 0x05	; 5
     d28:	fc 93       	st	X, r31
     d2a:	ee 93       	st	-X, r30
     d2c:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     d2e:	17 96       	adiw	r26, 0x07	; 7
     d30:	7c 92       	st	X, r7
     d32:	6e 92       	st	-X, r6
     d34:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     d36:	19 96       	adiw	r26, 0x09	; 9
     d38:	1c 92       	st	X, r1
     d3a:	1e 92       	st	-X, r1
     d3c:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     d3e:	1b 96       	adiw	r26, 0x0b	; 11
     d40:	bc 92       	st	X, r11
     d42:	ae 92       	st	-X, r10
     d44:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     d46:	13 96       	adiw	r26, 0x03	; 3
     d48:	9c 93       	st	X, r25
     d4a:	8e 93       	st	-X, r24
     d4c:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     d4e:	2c e8       	ldi	r18, 0x8C	; 140
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	f3 01       	movw	r30, r6
     d54:	31 83       	std	Z+1, r19	; 0x01
     d56:	20 83       	st	Z, r18
	new_menu->ptr_up = ptr_up;
     d58:	b5 83       	std	Z+5, r27	; 0x05
     d5a:	a4 83       	std	Z+4, r26	; 0x04
	new_menu->ptr_down = ptr_down;
     d5c:	37 82       	std	Z+7, r3	; 0x07
     d5e:	26 82       	std	Z+6, r2	; 0x06
	new_menu->ptr_next = ptr_next;
     d60:	11 86       	std	Z+9, r1	; 0x09
     d62:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     d64:	b3 86       	std	Z+11, r11	; 0x0b
     d66:	a2 86       	std	Z+10, r10	; 0x0a
	new_menu->n_siblings = n_siblings;
     d68:	93 83       	std	Z+3, r25	; 0x03
     d6a:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     d6c:	2a e8       	ldi	r18, 0x8A	; 138
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	d1 01       	movw	r26, r2
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	3c 93       	st	X, r19
     d76:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     d78:	15 96       	adiw	r26, 0x05	; 5
     d7a:	7c 92       	st	X, r7
     d7c:	6e 92       	st	-X, r6
     d7e:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     d80:	ad 80       	ldd	r10, Y+5	; 0x05
     d82:	be 80       	ldd	r11, Y+6	; 0x06
     d84:	17 96       	adiw	r26, 0x07	; 7
     d86:	bc 92       	st	X, r11
     d88:	ae 92       	st	-X, r10
     d8a:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     d8c:	19 96       	adiw	r26, 0x09	; 9
     d8e:	1c 92       	st	X, r1
     d90:	1e 92       	st	-X, r1
     d92:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     d94:	ad 88       	ldd	r10, Y+21	; 0x15
     d96:	be 88       	ldd	r11, Y+22	; 0x16
     d98:	1b 96       	adiw	r26, 0x0b	; 11
     d9a:	bc 92       	st	X, r11
     d9c:	ae 92       	st	-X, r10
     d9e:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     da0:	13 96       	adiw	r26, 0x03	; 3
     da2:	9c 93       	st	X, r25
     da4:	8e 93       	st	-X, r24
     da6:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     da8:	28 e8       	ldi	r18, 0x88	; 136
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	ad 81       	ldd	r26, Y+5	; 0x05
     dae:	be 81       	ldd	r27, Y+6	; 0x06
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	3c 93       	st	X, r19
     db4:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     db6:	15 96       	adiw	r26, 0x05	; 5
     db8:	3c 92       	st	X, r3
     dba:	2e 92       	st	-X, r2
     dbc:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     dbe:	17 96       	adiw	r26, 0x07	; 7
     dc0:	dc 92       	st	X, r13
     dc2:	ce 92       	st	-X, r12
     dc4:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     dc6:	19 96       	adiw	r26, 0x09	; 9
     dc8:	1c 92       	st	X, r1
     dca:	1e 92       	st	-X, r1
     dcc:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     dce:	1b 96       	adiw	r26, 0x0b	; 11
     dd0:	bc 92       	st	X, r11
     dd2:	ae 92       	st	-X, r10
     dd4:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     dd6:	13 96       	adiw	r26, 0x03	; 3
     dd8:	9c 93       	st	X, r25
     dda:	8e 93       	st	-X, r24
     ddc:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     dde:	63 e8       	ldi	r22, 0x83	; 131
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	f7 01       	movw	r30, r14
     de4:	71 83       	std	Z+1, r23	; 0x01
     de6:	60 83       	st	Z, r22
	new_menu->ptr_up = ptr_up;
     de8:	ab 84       	ldd	r10, Y+11	; 0x0b
     dea:	bc 84       	ldd	r11, Y+12	; 0x0c
     dec:	b5 82       	std	Z+5, r11	; 0x05
     dee:	a4 82       	std	Z+4, r10	; 0x04
	new_menu->ptr_down = ptr_down;
     df0:	af 80       	ldd	r10, Y+7	; 0x07
     df2:	b8 84       	ldd	r11, Y+8	; 0x08
     df4:	b7 82       	std	Z+7, r11	; 0x07
     df6:	a6 82       	std	Z+6, r10	; 0x06
	new_menu->ptr_next = ptr_next;
     df8:	11 86       	std	Z+9, r1	; 0x09
     dfa:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     dfc:	13 87       	std	Z+11, r17	; 0x0b
     dfe:	02 87       	std	Z+10, r16	; 0x0a
	new_menu->n_siblings = n_siblings;
     e00:	84 e0       	ldi	r24, 0x04	; 4
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	93 83       	std	Z+3, r25	; 0x03
     e06:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     e08:	4e e7       	ldi	r20, 0x7E	; 126
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	d5 01       	movw	r26, r10
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	5c 93       	st	X, r21
     e12:	4e 93       	st	-X, r20
	new_menu->ptr_up = ptr_up;
     e14:	15 96       	adiw	r26, 0x05	; 5
     e16:	fc 92       	st	X, r15
     e18:	ee 92       	st	-X, r14
     e1a:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     e1c:	a9 84       	ldd	r10, Y+9	; 0x09
     e1e:	ba 84       	ldd	r11, Y+10	; 0x0a
     e20:	17 96       	adiw	r26, 0x07	; 7
     e22:	bc 92       	st	X, r11
     e24:	ae 92       	st	-X, r10
     e26:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     e28:	19 96       	adiw	r26, 0x09	; 9
     e2a:	1c 92       	st	X, r1
     e2c:	1e 92       	st	-X, r1
     e2e:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     e30:	1b 96       	adiw	r26, 0x0b	; 11
     e32:	1c 93       	st	X, r17
     e34:	0e 93       	st	-X, r16
     e36:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     e38:	13 96       	adiw	r26, 0x03	; 3
     e3a:	9c 93       	st	X, r25
     e3c:	8e 93       	st	-X, r24
     e3e:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     e40:	29 e7       	ldi	r18, 0x79	; 121
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	d5 01       	movw	r26, r10
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	3c 93       	st	X, r19
     e4a:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     e4c:	af 80       	ldd	r10, Y+7	; 0x07
     e4e:	b8 84       	ldd	r11, Y+8	; 0x08
     e50:	15 96       	adiw	r26, 0x05	; 5
     e52:	bc 92       	st	X, r11
     e54:	ae 92       	st	-X, r10
     e56:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     e58:	ab 84       	ldd	r10, Y+11	; 0x0b
     e5a:	bc 84       	ldd	r11, Y+12	; 0x0c
     e5c:	17 96       	adiw	r26, 0x07	; 7
     e5e:	bc 92       	st	X, r11
     e60:	ae 92       	st	-X, r10
     e62:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     e64:	19 96       	adiw	r26, 0x09	; 9
     e66:	1c 92       	st	X, r1
     e68:	1e 92       	st	-X, r1
     e6a:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     e6c:	1b 96       	adiw	r26, 0x0b	; 11
     e6e:	1c 93       	st	X, r17
     e70:	0e 93       	st	-X, r16
     e72:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	9c 93       	st	X, r25
     e78:	8e 93       	st	-X, r24
     e7a:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     e7c:	a0 e7       	ldi	r26, 0x70	; 112
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	f5 01       	movw	r30, r10
     e82:	b1 83       	std	Z+1, r27	; 0x01
     e84:	a0 83       	st	Z, r26
	new_menu->ptr_up = ptr_up;
     e86:	a9 84       	ldd	r10, Y+9	; 0x09
     e88:	ba 84       	ldd	r11, Y+10	; 0x0a
     e8a:	b5 82       	std	Z+5, r11	; 0x05
     e8c:	a4 82       	std	Z+4, r10	; 0x04
	new_menu->ptr_down = ptr_down;
     e8e:	f7 82       	std	Z+7, r15	; 0x07
     e90:	e6 82       	std	Z+6, r14	; 0x06
	new_menu->ptr_next = ptr_next;
     e92:	11 86       	std	Z+9, r1	; 0x09
     e94:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     e96:	13 87       	std	Z+11, r17	; 0x0b
     e98:	02 87       	std	Z+10, r16	; 0x0a
	new_menu->n_siblings = n_siblings;
     e9a:	93 83       	std	Z+3, r25	; 0x03
     e9c:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     e9e:	f2 01       	movw	r30, r4
     ea0:	71 83       	std	Z+1, r23	; 0x01
     ea2:	60 83       	st	Z, r22
	new_menu->ptr_up = ptr_up;
     ea4:	a9 88       	ldd	r10, Y+17	; 0x11
     ea6:	ba 88       	ldd	r11, Y+18	; 0x12
     ea8:	b5 82       	std	Z+5, r11	; 0x05
     eaa:	a4 82       	std	Z+4, r10	; 0x04
	new_menu->ptr_down = ptr_down;
     eac:	ad 84       	ldd	r10, Y+13	; 0x0d
     eae:	be 84       	ldd	r11, Y+14	; 0x0e
     eb0:	b7 82       	std	Z+7, r11	; 0x07
     eb2:	a6 82       	std	Z+6, r10	; 0x06
	new_menu->ptr_next = ptr_next;
     eb4:	11 86       	std	Z+9, r1	; 0x09
     eb6:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     eb8:	6f 89       	ldd	r22, Y+23	; 0x17
     eba:	78 8d       	ldd	r23, Y+24	; 0x18
     ebc:	73 87       	std	Z+11, r23	; 0x0b
     ebe:	62 87       	std	Z+10, r22	; 0x0a
	new_menu->n_siblings = n_siblings;
     ec0:	93 83       	std	Z+3, r25	; 0x03
     ec2:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     ec4:	f5 01       	movw	r30, r10
     ec6:	51 83       	std	Z+1, r21	; 0x01
     ec8:	40 83       	st	Z, r20
	new_menu->ptr_up = ptr_up;
     eca:	55 82       	std	Z+5, r5	; 0x05
     ecc:	44 82       	std	Z+4, r4	; 0x04
	new_menu->ptr_down = ptr_down;
     ece:	af 84       	ldd	r10, Y+15	; 0x0f
     ed0:	b8 88       	ldd	r11, Y+16	; 0x10
     ed2:	b7 82       	std	Z+7, r11	; 0x07
     ed4:	a6 82       	std	Z+6, r10	; 0x06
	new_menu->ptr_next = ptr_next;
     ed6:	11 86       	std	Z+9, r1	; 0x09
     ed8:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     eda:	73 87       	std	Z+11, r23	; 0x0b
     edc:	62 87       	std	Z+10, r22	; 0x0a
	new_menu->n_siblings = n_siblings;
     ede:	93 83       	std	Z+3, r25	; 0x03
     ee0:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     ee2:	f5 01       	movw	r30, r10
     ee4:	31 83       	std	Z+1, r19	; 0x01
     ee6:	20 83       	st	Z, r18
	new_menu->ptr_up = ptr_up;
     ee8:	ad 84       	ldd	r10, Y+13	; 0x0d
     eea:	be 84       	ldd	r11, Y+14	; 0x0e
     eec:	b5 82       	std	Z+5, r11	; 0x05
     eee:	a4 82       	std	Z+4, r10	; 0x04
	new_menu->ptr_down = ptr_down;
     ef0:	a9 88       	ldd	r10, Y+17	; 0x11
     ef2:	ba 88       	ldd	r11, Y+18	; 0x12
     ef4:	b7 82       	std	Z+7, r11	; 0x07
     ef6:	a6 82       	std	Z+6, r10	; 0x06
	new_menu->ptr_next = ptr_next;
     ef8:	11 86       	std	Z+9, r1	; 0x09
     efa:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     efc:	73 87       	std	Z+11, r23	; 0x0b
     efe:	62 87       	std	Z+10, r22	; 0x0a
	new_menu->n_siblings = n_siblings;
     f00:	93 83       	std	Z+3, r25	; 0x03
     f02:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     f04:	f5 01       	movw	r30, r10
     f06:	b1 83       	std	Z+1, r27	; 0x01
     f08:	a0 83       	st	Z, r26
	new_menu->ptr_up = ptr_up;
     f0a:	af 84       	ldd	r10, Y+15	; 0x0f
     f0c:	b8 88       	ldd	r11, Y+16	; 0x10
     f0e:	b5 82       	std	Z+5, r11	; 0x05
     f10:	a4 82       	std	Z+4, r10	; 0x04
	new_menu->ptr_down = ptr_down;
     f12:	57 82       	std	Z+7, r5	; 0x07
     f14:	46 82       	std	Z+6, r4	; 0x06
	new_menu->ptr_next = ptr_next;
     f16:	11 86       	std	Z+9, r1	; 0x09
     f18:	10 86       	std	Z+8, r1	; 0x08
	new_menu->ptr_prev = ptr_prev;
     f1a:	73 87       	std	Z+11, r23	; 0x0b
     f1c:	62 87       	std	Z+10, r22	; 0x0a
	new_menu->n_siblings = n_siblings;
     f1e:	93 83       	std	Z+3, r25	; 0x03
     f20:	82 83       	std	Z+2, r24	; 0x02

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     f22:	22 eb       	ldi	r18, 0xB2	; 178
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	ab 89       	ldd	r26, Y+19	; 0x13
     f28:	bc 89       	ldd	r27, Y+20	; 0x14
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	3c 93       	st	X, r19
     f2e:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     f30:	15 96       	adiw	r26, 0x05	; 5
     f32:	7c 93       	st	X, r23
     f34:	6e 93       	st	-X, r22
     f36:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     f38:	ad 88       	ldd	r10, Y+21	; 0x15
     f3a:	be 88       	ldd	r11, Y+22	; 0x16
     f3c:	17 96       	adiw	r26, 0x07	; 7
     f3e:	bc 92       	st	X, r11
     f40:	ae 92       	st	-X, r10
     f42:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     f44:	19 96       	adiw	r26, 0x09	; 9
     f46:	1c 92       	st	X, r1
     f48:	1e 92       	st	-X, r1
     f4a:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     f4c:	1b 96       	adiw	r26, 0x0b	; 11
     f4e:	1c 92       	st	X, r1
     f50:	1e 92       	st	-X, r1
     f52:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     f54:	13 96       	adiw	r26, 0x03	; 3
     f56:	9c 93       	st	X, r25
     f58:	8e 93       	st	-X, r24
     f5a:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     f5c:	26 ea       	ldi	r18, 0xA6	; 166
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	d5 01       	movw	r26, r10
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	3c 93       	st	X, r19
     f66:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     f68:	ab 88       	ldd	r10, Y+19	; 0x13
     f6a:	bc 88       	ldd	r11, Y+20	; 0x14
     f6c:	15 96       	adiw	r26, 0x05	; 5
     f6e:	bc 92       	st	X, r11
     f70:	ae 92       	st	-X, r10
     f72:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     f74:	17 96       	adiw	r26, 0x07	; 7
     f76:	1c 93       	st	X, r17
     f78:	0e 93       	st	-X, r16
     f7a:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     f7c:	19 96       	adiw	r26, 0x09	; 9
     f7e:	dc 92       	st	X, r13
     f80:	ce 92       	st	-X, r12
     f82:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     f84:	1b 96       	adiw	r26, 0x0b	; 11
     f86:	1c 92       	st	X, r1
     f88:	1e 92       	st	-X, r1
     f8a:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     f8c:	13 96       	adiw	r26, 0x03	; 3
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
     f92:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     f94:	2e e9       	ldi	r18, 0x9E	; 158
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	d8 01       	movw	r26, r16
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	3c 93       	st	X, r19
     f9e:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     fa0:	ad 88       	ldd	r10, Y+21	; 0x15
     fa2:	be 88       	ldd	r11, Y+22	; 0x16
     fa4:	15 96       	adiw	r26, 0x05	; 5
     fa6:	bc 92       	st	X, r11
     fa8:	ae 92       	st	-X, r10
     faa:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     fac:	17 96       	adiw	r26, 0x07	; 7
     fae:	7c 93       	st	X, r23
     fb0:	6e 93       	st	-X, r22
     fb2:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     fb4:	19 96       	adiw	r26, 0x09	; 9
     fb6:	fc 92       	st	X, r15
     fb8:	ee 92       	st	-X, r14
     fba:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     fbc:	1b 96       	adiw	r26, 0x0b	; 11
     fbe:	1c 92       	st	X, r1
     fc0:	1e 92       	st	-X, r1
     fc2:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     fc4:	13 96       	adiw	r26, 0x03	; 3
     fc6:	9c 93       	st	X, r25
     fc8:	8e 93       	st	-X, r24
     fca:	12 97       	sbiw	r26, 0x02	; 2

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_up, menu * ptr_down, menu * ptr_prev, menu * ptr_next,int n_siblings,PGM_P name){
	new_menu->title = name;
     fcc:	28 e9       	ldi	r18, 0x98	; 152
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	db 01       	movw	r26, r22
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	3c 93       	st	X, r19
     fd6:	2e 93       	st	-X, r18
	new_menu->ptr_up = ptr_up;
     fd8:	15 96       	adiw	r26, 0x05	; 5
     fda:	1c 93       	st	X, r17
     fdc:	0e 93       	st	-X, r16
     fde:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_down = ptr_down;
     fe0:	ab 88       	ldd	r10, Y+19	; 0x13
     fe2:	bc 88       	ldd	r11, Y+20	; 0x14
     fe4:	17 96       	adiw	r26, 0x07	; 7
     fe6:	bc 92       	st	X, r11
     fe8:	ae 92       	st	-X, r10
     fea:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_next = ptr_next;
     fec:	19 96       	adiw	r26, 0x09	; 9
     fee:	5c 92       	st	X, r5
     ff0:	4e 92       	st	-X, r4
     ff2:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->ptr_prev = ptr_prev;
     ff4:	1b 96       	adiw	r26, 0x0b	; 11
     ff6:	1c 92       	st	X, r1
     ff8:	1e 92       	st	-X, r1
     ffa:	1a 97       	sbiw	r26, 0x0a	; 10
	new_menu->n_siblings = n_siblings;
     ffc:	13 96       	adiw	r26, 0x03	; 3
     ffe:	9c 93       	st	X, r25
    1000:	8e 93       	st	-X, r24
    1002:	12 97       	sbiw	r26, 0x02	; 2
	setup_menu(mainmenu_0,mainmenu_3,mainmenu_1,NULL,NULL/*BYTT*/,4,mainmenu_n0);
	setup_menu(mainmenu_1,mainmenu_0,mainmenu_2,NULL,leaderboard_0,4,mainmenu_n1);
	setup_menu(mainmenu_2,mainmenu_1,mainmenu_3,NULL,option_0,4,mainmenu_n2);
	setup_menu(mainmenu_3,mainmenu_2,mainmenu_0,NULL,debug_0,4,mainmenu_n3);
	
	current_head = debug_0;
    1004:	50 92 27 04 	sts	0x0427, r5
    1008:	40 92 26 04 	sts	0x0426, r4
	current_selected = debug_0;
    100c:	50 92 29 04 	sts	0x0429, r5
    1010:	40 92 28 04 	sts	0x0428, r4
}
    1014:	68 96       	adiw	r28, 0x18	; 24
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	9f 90       	pop	r9
    1036:	8f 90       	pop	r8
    1038:	7f 90       	pop	r7
    103a:	6f 90       	pop	r6
    103c:	5f 90       	pop	r5
    103e:	4f 90       	pop	r4
    1040:	3f 90       	pop	r3
    1042:	2f 90       	pop	r2
    1044:	08 95       	ret

00001046 <menu_update>:
	

void menu_update(void){
	
	
	for(counter = 0 ; counter < 4; counter++){
    1046:	10 92 3b 04 	sts	0x043B, r1
    104a:	10 92 3a 04 	sts	0x043A, r1
		strcpy_P(temp,current_head->title);
    104e:	e0 91 26 04 	lds	r30, 0x0426
    1052:	f0 91 27 04 	lds	r31, 0x0427
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	8a e2       	ldi	r24, 0x2A	; 42
    105c:	94 e0       	ldi	r25, 0x04	; 4
    105e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <strcpy_P>
		
		oled_goto_line(counter);
    1062:	80 91 3a 04 	lds	r24, 0x043A
    1066:	90 91 3b 04 	lds	r25, 0x043B
    106a:	0e 94 1f 09 	call	0x123e	; 0x123e <oled_goto_line>
		oled_print(temp);
    106e:	8a e2       	ldi	r24, 0x2A	; 42
    1070:	94 e0       	ldi	r25, 0x04	; 4
    1072:	0e 94 7f 09 	call	0x12fe	; 0x12fe <oled_print>
		
		if(current_selected == current_head){
    1076:	20 91 28 04 	lds	r18, 0x0428
    107a:	30 91 29 04 	lds	r19, 0x0429
    107e:	80 91 26 04 	lds	r24, 0x0426
    1082:	90 91 27 04 	lds	r25, 0x0427
    1086:	28 17       	cp	r18, r24
    1088:	39 07       	cpc	r19, r25
    108a:	21 f4       	brne	.+8      	; 0x1094 <menu_update+0x4e>
			oled_print(" <-");
    108c:	81 e9       	ldi	r24, 0x91	; 145
    108e:	93 e0       	ldi	r25, 0x03	; 3
    1090:	0e 94 7f 09 	call	0x12fe	; 0x12fe <oled_print>
		}
		current_head = current_head->ptr_down;
    1094:	e0 91 26 04 	lds	r30, 0x0426
    1098:	f0 91 27 04 	lds	r31, 0x0427
    109c:	86 81       	ldd	r24, Z+6	; 0x06
    109e:	97 81       	ldd	r25, Z+7	; 0x07
    10a0:	90 93 27 04 	sts	0x0427, r25
    10a4:	80 93 26 04 	sts	0x0426, r24
	

void menu_update(void){
	
	
	for(counter = 0 ; counter < 4; counter++){
    10a8:	80 91 3a 04 	lds	r24, 0x043A
    10ac:	90 91 3b 04 	lds	r25, 0x043B
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	90 93 3b 04 	sts	0x043B, r25
    10b6:	80 93 3a 04 	sts	0x043A, r24
    10ba:	04 97       	sbiw	r24, 0x04	; 4
    10bc:	44 f2       	brlt	.-112    	; 0x104e <menu_update+0x8>
		if(current_selected == current_head){
			oled_print(" <-");
		}
		current_head = current_head->ptr_down;
	}
    10be:	08 95       	ret

000010c0 <oled_ini>:
}

void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    10c0:	85 b7       	in	r24, 0x35	; 53
    10c2:	80 68       	ori	r24, 0x80	; 128
    10c4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    10c6:	80 b7       	in	r24, 0x30	; 48
    10c8:	80 62       	ori	r24, 0x20	; 32
    10ca:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    10cc:	e0 91 0c 01 	lds	r30, 0x010C
    10d0:	f0 91 0d 01 	lds	r31, 0x010D
    10d4:	8e ea       	ldi	r24, 0xAE	; 174
    10d6:	80 83       	st	Z, r24
    10d8:	e0 91 0c 01 	lds	r30, 0x010C
    10dc:	f0 91 0d 01 	lds	r31, 0x010D
    10e0:	81 ea       	ldi	r24, 0xA1	; 161
    10e2:	80 83       	st	Z, r24
    10e4:	e0 91 0c 01 	lds	r30, 0x010C
    10e8:	f0 91 0d 01 	lds	r31, 0x010D
    10ec:	8a ed       	ldi	r24, 0xDA	; 218
    10ee:	80 83       	st	Z, r24
    10f0:	e0 91 0c 01 	lds	r30, 0x010C
    10f4:	f0 91 0d 01 	lds	r31, 0x010D
    10f8:	82 e1       	ldi	r24, 0x12	; 18
    10fa:	80 83       	st	Z, r24
    10fc:	e0 91 0c 01 	lds	r30, 0x010C
    1100:	f0 91 0d 01 	lds	r31, 0x010D
    1104:	88 ec       	ldi	r24, 0xC8	; 200
    1106:	80 83       	st	Z, r24
    1108:	e0 91 0c 01 	lds	r30, 0x010C
    110c:	f0 91 0d 01 	lds	r31, 0x010D
    1110:	88 ea       	ldi	r24, 0xA8	; 168
    1112:	80 83       	st	Z, r24
    1114:	e0 91 0c 01 	lds	r30, 0x010C
    1118:	f0 91 0d 01 	lds	r31, 0x010D
    111c:	8f e3       	ldi	r24, 0x3F	; 63
    111e:	80 83       	st	Z, r24
    1120:	e0 91 0c 01 	lds	r30, 0x010C
    1124:	f0 91 0d 01 	lds	r31, 0x010D
    1128:	85 ed       	ldi	r24, 0xD5	; 213
    112a:	80 83       	st	Z, r24
    112c:	e0 91 0c 01 	lds	r30, 0x010C
    1130:	f0 91 0d 01 	lds	r31, 0x010D
    1134:	80 e8       	ldi	r24, 0x80	; 128
    1136:	80 83       	st	Z, r24
    1138:	e0 91 0c 01 	lds	r30, 0x010C
    113c:	f0 91 0d 01 	lds	r31, 0x010D
    1140:	81 e8       	ldi	r24, 0x81	; 129
    1142:	80 83       	st	Z, r24
    1144:	e0 91 0c 01 	lds	r30, 0x010C
    1148:	f0 91 0d 01 	lds	r31, 0x010D
    114c:	80 e5       	ldi	r24, 0x50	; 80
    114e:	80 83       	st	Z, r24
    1150:	e0 91 0c 01 	lds	r30, 0x010C
    1154:	f0 91 0d 01 	lds	r31, 0x010D
    1158:	89 ed       	ldi	r24, 0xD9	; 217
    115a:	80 83       	st	Z, r24
    115c:	e0 91 0c 01 	lds	r30, 0x010C
    1160:	f0 91 0d 01 	lds	r31, 0x010D
    1164:	81 e2       	ldi	r24, 0x21	; 33
    1166:	80 83       	st	Z, r24
    1168:	e0 91 0c 01 	lds	r30, 0x010C
    116c:	f0 91 0d 01 	lds	r31, 0x010D
    1170:	80 e2       	ldi	r24, 0x20	; 32
    1172:	80 83       	st	Z, r24
    1174:	e0 91 0c 01 	lds	r30, 0x010C
    1178:	f0 91 0d 01 	lds	r31, 0x010D
    117c:	10 82       	st	Z, r1
    117e:	e0 91 0c 01 	lds	r30, 0x010C
    1182:	f0 91 0d 01 	lds	r31, 0x010D
    1186:	8b ed       	ldi	r24, 0xDB	; 219
    1188:	80 83       	st	Z, r24
    118a:	e0 91 0c 01 	lds	r30, 0x010C
    118e:	f0 91 0d 01 	lds	r31, 0x010D
    1192:	80 e3       	ldi	r24, 0x30	; 48
    1194:	80 83       	st	Z, r24
    1196:	e0 91 0c 01 	lds	r30, 0x010C
    119a:	f0 91 0d 01 	lds	r31, 0x010D
    119e:	8d ea       	ldi	r24, 0xAD	; 173
    11a0:	80 83       	st	Z, r24
    11a2:	e0 91 0c 01 	lds	r30, 0x010C
    11a6:	f0 91 0d 01 	lds	r31, 0x010D
    11aa:	10 82       	st	Z, r1
    11ac:	e0 91 0c 01 	lds	r30, 0x010C
    11b0:	f0 91 0d 01 	lds	r31, 0x010D
    11b4:	84 ea       	ldi	r24, 0xA4	; 164
    11b6:	80 83       	st	Z, r24
    11b8:	e0 91 0c 01 	lds	r30, 0x010C
    11bc:	f0 91 0d 01 	lds	r31, 0x010D
    11c0:	86 ea       	ldi	r24, 0xA6	; 166
    11c2:	80 83       	st	Z, r24
    11c4:	e0 91 0c 01 	lds	r30, 0x010C
    11c8:	f0 91 0d 01 	lds	r31, 0x010D
    11cc:	8f ea       	ldi	r24, 0xAF	; 175
    11ce:	80 83       	st	Z, r24
    11d0:	08 95       	ret

000011d2 <oled_home>:
	}
}

void oled_home(void)
{
	page = 0;
    11d2:	10 92 3f 04 	sts	0x043F, r1
    11d6:	10 92 3e 04 	sts	0x043E, r1
	col = 0;
    11da:	10 92 3d 04 	sts	0x043D, r1
    11de:	10 92 3c 04 	sts	0x043C, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    11e2:	e0 91 0c 01 	lds	r30, 0x010C
    11e6:	f0 91 0d 01 	lds	r31, 0x010D
    11ea:	81 e2       	ldi	r24, 0x21	; 33
    11ec:	80 83       	st	Z, r24
    11ee:	e0 91 0c 01 	lds	r30, 0x010C
    11f2:	f0 91 0d 01 	lds	r31, 0x010D
    11f6:	10 82       	st	Z, r1
    11f8:	e0 91 0c 01 	lds	r30, 0x010C
    11fc:	f0 91 0d 01 	lds	r31, 0x010D
    1200:	8f e7       	ldi	r24, 0x7F	; 127
    1202:	80 83       	st	Z, r24
    1204:	e0 91 0c 01 	lds	r30, 0x010C
    1208:	f0 91 0d 01 	lds	r31, 0x010D
    120c:	82 e2       	ldi	r24, 0x22	; 34
    120e:	80 83       	st	Z, r24
    1210:	e0 91 0c 01 	lds	r30, 0x010C
    1214:	f0 91 0d 01 	lds	r31, 0x010D
    1218:	10 82       	st	Z, r1
    121a:	e0 91 0c 01 	lds	r30, 0x010C
    121e:	f0 91 0d 01 	lds	r31, 0x010D
    1222:	87 e0       	ldi	r24, 0x07	; 7
    1224:	80 83       	st	Z, r24
    1226:	e0 91 0c 01 	lds	r30, 0x010C
    122a:	f0 91 0d 01 	lds	r31, 0x010D
    122e:	10 82       	st	Z, r1
    1230:	e0 91 0c 01 	lds	r30, 0x010C
    1234:	f0 91 0d 01 	lds	r31, 0x010D
    1238:	80 e1       	ldi	r24, 0x10	; 16
    123a:	80 83       	st	Z, r24
    123c:	08 95       	ret

0000123e <oled_goto_line>:
	write_c(0x00);
	write_c(0x10);
}

void oled_goto_line(unsigned int line){
	if(line >= 8){
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	91 05       	cpc	r25, r1
    1242:	28 f0       	brcs	.+10     	; 0x124e <oled_goto_line+0x10>
		printf("parameter too big, oled_goto_line\n");
    1244:	85 e9       	ldi	r24, 0x95	; 149
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
    124c:	08 95       	ret

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    124e:	e0 91 0c 01 	lds	r30, 0x010C
    1252:	f0 91 0d 01 	lds	r31, 0x010D
    1256:	10 82       	st	Z, r1
    1258:	e0 91 0c 01 	lds	r30, 0x010C
    125c:	f0 91 0d 01 	lds	r31, 0x010D
    1260:	90 e1       	ldi	r25, 0x10	; 16
    1262:	90 83       	st	Z, r25
	if(line >= 8){
		printf("parameter too big, oled_goto_line\n");
	}else{
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
    1264:	80 6b       	ori	r24, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1266:	e0 91 0c 01 	lds	r30, 0x010C
    126a:	f0 91 0d 01 	lds	r31, 0x010D
    126e:	80 83       	st	Z, r24
    1270:	08 95       	ret

00001272 <oled_clear_line>:
	
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
    1272:	08 97       	sbiw	r24, 0x08	; 8
    1274:	58 f4       	brcc	.+22     	; 0x128c <oled_clear_line+0x1a>
    1276:	80 e8       	ldi	r24, 0x80	; 128
    1278:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    127a:	e0 91 0a 01 	lds	r30, 0x010A
    127e:	f0 91 0b 01 	lds	r31, 0x010B
    1282:	10 82       	st	Z, r1
    1284:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	c1 f7       	brne	.-16     	; 0x127a <oled_clear_line+0x8>
    128a:	08 95       	ret
			write_d(0b00000000);
		}
	}else{
		printf("parameter too big, oled_clear_line\n");
    128c:	8b ed       	ldi	r24, 0xDB	; 219
    128e:	93 e0       	ldi	r25, 0x03	; 3
    1290:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts>
    1294:	08 95       	ret

00001296 <oled_reset>:

}


void oled_reset(void)
{	
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
	oled_home();
    129a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <oled_home>
	oled_goto_line(0);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 1f 09 	call	0x123e	; 0x123e <oled_goto_line>
	
	for(int i = 0; i < 8;i++){
    12a6:	c0 e0       	ldi	r28, 0x00	; 0
    12a8:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
    12aa:	ce 01       	movw	r24, r28
    12ac:	0e 94 39 09 	call	0x1272	; 0x1272 <oled_clear_line>
void oled_reset(void)
{	
	oled_home();
	oled_goto_line(0);
	
	for(int i = 0; i < 8;i++){
    12b0:	21 96       	adiw	r28, 0x01	; 1
    12b2:	c8 30       	cpi	r28, 0x08	; 8
    12b4:	d1 05       	cpc	r29, r1
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <oled_reset+0x14>
		oled_clear_line(i);
	}
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <oled_print_char>:
	}else{
		
	}
}
int oled_print_char(char letter){
	if(letter != '\0'){
    12be:	88 23       	and	r24, r24
    12c0:	c1 f0       	breq	.+48     	; 0x12f2 <oled_print_char+0x34>
    12c2:	e8 2f       	mov	r30, r24
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	e8 54       	subi	r30, 0x48	; 72
    12d4:	f0 40       	sbci	r31, 0x00	; 0
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
    12da:	a0 91 0a 01 	lds	r26, 0x010A
    12de:	b0 91 0b 01 	lds	r27, 0x010B
    12e2:	24 91       	lpm	r18, Z
    12e4:	2c 93       	st	X, r18
	}
}
int oled_print_char(char letter){
	if(letter != '\0'){
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	31 96       	adiw	r30, 0x01	; 1
    12ea:	88 30       	cpi	r24, 0x08	; 8
    12ec:	91 05       	cpc	r25, r1
    12ee:	a9 f7       	brne	.-22     	; 0x12da <oled_print_char+0x1c>
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <oled_print_char+0x3a>
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
	}else{
		return 0;	
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	08 95       	ret
	if(letter != '\0'){
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 0;	
	}
}
    12fc:	08 95       	ret

000012fe <oled_print>:
		return 0;
	}
}


void oled_print(char* letters){
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (oled_print_char(letters[i++])){
    1304:	89 91       	ld	r24, Y+
    1306:	0e 94 5f 09 	call	0x12be	; 0x12be <oled_print_char>
    130a:	89 2b       	or	r24, r25
    130c:	d9 f7       	brne	.-10     	; 0x1304 <oled_print+0x6>
	}
}
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <send_UART>:
    1314:	5d 9b       	sbis	0x0b, 5	; 11
    1316:	fe cf       	rjmp	.-4      	; 0x1314 <send_UART>
    1318:	8c b9       	out	0x0c, r24	; 12
    131a:	08 95       	ret

0000131c <recieve_UART>:
    131c:	5f 9b       	sbis	0x0b, 7	; 11
    131e:	fe cf       	rjmp	.-4      	; 0x131c <recieve_UART>
    1320:	8c b1       	in	r24, 0x0c	; 12
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	08 95       	ret

00001326 <init_UART>:
    1326:	90 bd       	out	0x20, r25	; 32
    1328:	89 b9       	out	0x09, r24	; 9
    132a:	88 e1       	ldi	r24, 0x18	; 24
    132c:	8a b9       	out	0x0a, r24	; 10
    132e:	6e e8       	ldi	r22, 0x8E	; 142
    1330:	79 e0       	ldi	r23, 0x09	; 9
    1332:	8a e8       	ldi	r24, 0x8A	; 138
    1334:	99 e0       	ldi	r25, 0x09	; 9
    1336:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fdevopen>
    133a:	08 95       	ret

0000133c <__subsf3>:
    133c:	50 58       	subi	r21, 0x80	; 128

0000133e <__addsf3>:
    133e:	bb 27       	eor	r27, r27
    1340:	aa 27       	eor	r26, r26
    1342:	0e d0       	rcall	.+28     	; 0x1360 <__addsf3x>
    1344:	4d c1       	rjmp	.+666    	; 0x15e0 <__fp_round>
    1346:	3e d1       	rcall	.+636    	; 0x15c4 <__fp_pscA>
    1348:	30 f0       	brcs	.+12     	; 0x1356 <__addsf3+0x18>
    134a:	43 d1       	rcall	.+646    	; 0x15d2 <__fp_pscB>
    134c:	20 f0       	brcs	.+8      	; 0x1356 <__addsf3+0x18>
    134e:	31 f4       	brne	.+12     	; 0x135c <__addsf3+0x1e>
    1350:	9f 3f       	cpi	r25, 0xFF	; 255
    1352:	11 f4       	brne	.+4      	; 0x1358 <__addsf3+0x1a>
    1354:	1e f4       	brtc	.+6      	; 0x135c <__addsf3+0x1e>
    1356:	33 c1       	rjmp	.+614    	; 0x15be <__fp_nan>
    1358:	0e f4       	brtc	.+2      	; 0x135c <__addsf3+0x1e>
    135a:	e0 95       	com	r30
    135c:	e7 fb       	bst	r30, 7
    135e:	29 c1       	rjmp	.+594    	; 0x15b2 <__fp_inf>

00001360 <__addsf3x>:
    1360:	e9 2f       	mov	r30, r25
    1362:	4f d1       	rcall	.+670    	; 0x1602 <__fp_split3>
    1364:	80 f3       	brcs	.-32     	; 0x1346 <__addsf3+0x8>
    1366:	ba 17       	cp	r27, r26
    1368:	62 07       	cpc	r22, r18
    136a:	73 07       	cpc	r23, r19
    136c:	84 07       	cpc	r24, r20
    136e:	95 07       	cpc	r25, r21
    1370:	18 f0       	brcs	.+6      	; 0x1378 <__addsf3x+0x18>
    1372:	71 f4       	brne	.+28     	; 0x1390 <__addsf3x+0x30>
    1374:	9e f5       	brtc	.+102    	; 0x13dc <__addsf3x+0x7c>
    1376:	67 c1       	rjmp	.+718    	; 0x1646 <__fp_zero>
    1378:	0e f4       	brtc	.+2      	; 0x137c <__addsf3x+0x1c>
    137a:	e0 95       	com	r30
    137c:	0b 2e       	mov	r0, r27
    137e:	ba 2f       	mov	r27, r26
    1380:	a0 2d       	mov	r26, r0
    1382:	0b 01       	movw	r0, r22
    1384:	b9 01       	movw	r22, r18
    1386:	90 01       	movw	r18, r0
    1388:	0c 01       	movw	r0, r24
    138a:	ca 01       	movw	r24, r20
    138c:	a0 01       	movw	r20, r0
    138e:	11 24       	eor	r1, r1
    1390:	ff 27       	eor	r31, r31
    1392:	59 1b       	sub	r21, r25
    1394:	99 f0       	breq	.+38     	; 0x13bc <__addsf3x+0x5c>
    1396:	59 3f       	cpi	r21, 0xF9	; 249
    1398:	50 f4       	brcc	.+20     	; 0x13ae <__addsf3x+0x4e>
    139a:	50 3e       	cpi	r21, 0xE0	; 224
    139c:	68 f1       	brcs	.+90     	; 0x13f8 <__addsf3x+0x98>
    139e:	1a 16       	cp	r1, r26
    13a0:	f0 40       	sbci	r31, 0x00	; 0
    13a2:	a2 2f       	mov	r26, r18
    13a4:	23 2f       	mov	r18, r19
    13a6:	34 2f       	mov	r19, r20
    13a8:	44 27       	eor	r20, r20
    13aa:	58 5f       	subi	r21, 0xF8	; 248
    13ac:	f3 cf       	rjmp	.-26     	; 0x1394 <__addsf3x+0x34>
    13ae:	46 95       	lsr	r20
    13b0:	37 95       	ror	r19
    13b2:	27 95       	ror	r18
    13b4:	a7 95       	ror	r26
    13b6:	f0 40       	sbci	r31, 0x00	; 0
    13b8:	53 95       	inc	r21
    13ba:	c9 f7       	brne	.-14     	; 0x13ae <__addsf3x+0x4e>
    13bc:	7e f4       	brtc	.+30     	; 0x13dc <__addsf3x+0x7c>
    13be:	1f 16       	cp	r1, r31
    13c0:	ba 0b       	sbc	r27, r26
    13c2:	62 0b       	sbc	r22, r18
    13c4:	73 0b       	sbc	r23, r19
    13c6:	84 0b       	sbc	r24, r20
    13c8:	ba f0       	brmi	.+46     	; 0x13f8 <__addsf3x+0x98>
    13ca:	91 50       	subi	r25, 0x01	; 1
    13cc:	a1 f0       	breq	.+40     	; 0x13f6 <__addsf3x+0x96>
    13ce:	ff 0f       	add	r31, r31
    13d0:	bb 1f       	adc	r27, r27
    13d2:	66 1f       	adc	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	c2 f7       	brpl	.-16     	; 0x13ca <__addsf3x+0x6a>
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <__addsf3x+0x98>
    13dc:	ba 0f       	add	r27, r26
    13de:	62 1f       	adc	r22, r18
    13e0:	73 1f       	adc	r23, r19
    13e2:	84 1f       	adc	r24, r20
    13e4:	48 f4       	brcc	.+18     	; 0x13f8 <__addsf3x+0x98>
    13e6:	87 95       	ror	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	f7 95       	ror	r31
    13f0:	9e 3f       	cpi	r25, 0xFE	; 254
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__addsf3x+0x96>
    13f4:	b3 cf       	rjmp	.-154    	; 0x135c <__addsf3+0x1e>
    13f6:	93 95       	inc	r25
    13f8:	88 0f       	add	r24, r24
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <__addsf3x+0x9e>
    13fc:	99 27       	eor	r25, r25
    13fe:	ee 0f       	add	r30, r30
    1400:	97 95       	ror	r25
    1402:	87 95       	ror	r24
    1404:	08 95       	ret

00001406 <__divsf3>:
    1406:	0c d0       	rcall	.+24     	; 0x1420 <__divsf3x>
    1408:	eb c0       	rjmp	.+470    	; 0x15e0 <__fp_round>
    140a:	e3 d0       	rcall	.+454    	; 0x15d2 <__fp_pscB>
    140c:	40 f0       	brcs	.+16     	; 0x141e <__divsf3+0x18>
    140e:	da d0       	rcall	.+436    	; 0x15c4 <__fp_pscA>
    1410:	30 f0       	brcs	.+12     	; 0x141e <__divsf3+0x18>
    1412:	21 f4       	brne	.+8      	; 0x141c <__divsf3+0x16>
    1414:	5f 3f       	cpi	r21, 0xFF	; 255
    1416:	19 f0       	breq	.+6      	; 0x141e <__divsf3+0x18>
    1418:	cc c0       	rjmp	.+408    	; 0x15b2 <__fp_inf>
    141a:	51 11       	cpse	r21, r1
    141c:	15 c1       	rjmp	.+554    	; 0x1648 <__fp_szero>
    141e:	cf c0       	rjmp	.+414    	; 0x15be <__fp_nan>

00001420 <__divsf3x>:
    1420:	f0 d0       	rcall	.+480    	; 0x1602 <__fp_split3>
    1422:	98 f3       	brcs	.-26     	; 0x140a <__divsf3+0x4>

00001424 <__divsf3_pse>:
    1424:	99 23       	and	r25, r25
    1426:	c9 f3       	breq	.-14     	; 0x141a <__divsf3+0x14>
    1428:	55 23       	and	r21, r21
    142a:	b1 f3       	breq	.-20     	; 0x1418 <__divsf3+0x12>
    142c:	95 1b       	sub	r25, r21
    142e:	55 0b       	sbc	r21, r21
    1430:	bb 27       	eor	r27, r27
    1432:	aa 27       	eor	r26, r26
    1434:	62 17       	cp	r22, r18
    1436:	73 07       	cpc	r23, r19
    1438:	84 07       	cpc	r24, r20
    143a:	38 f0       	brcs	.+14     	; 0x144a <__divsf3_pse+0x26>
    143c:	9f 5f       	subi	r25, 0xFF	; 255
    143e:	5f 4f       	sbci	r21, 0xFF	; 255
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	44 1f       	adc	r20, r20
    1446:	aa 1f       	adc	r26, r26
    1448:	a9 f3       	breq	.-22     	; 0x1434 <__divsf3_pse+0x10>
    144a:	33 d0       	rcall	.+102    	; 0x14b2 <__divsf3_pse+0x8e>
    144c:	0e 2e       	mov	r0, r30
    144e:	3a f0       	brmi	.+14     	; 0x145e <__divsf3_pse+0x3a>
    1450:	e0 e8       	ldi	r30, 0x80	; 128
    1452:	30 d0       	rcall	.+96     	; 0x14b4 <__divsf3_pse+0x90>
    1454:	91 50       	subi	r25, 0x01	; 1
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	e6 95       	lsr	r30
    145a:	00 1c       	adc	r0, r0
    145c:	ca f7       	brpl	.-14     	; 0x1450 <__divsf3_pse+0x2c>
    145e:	29 d0       	rcall	.+82     	; 0x14b2 <__divsf3_pse+0x8e>
    1460:	fe 2f       	mov	r31, r30
    1462:	27 d0       	rcall	.+78     	; 0x14b2 <__divsf3_pse+0x8e>
    1464:	66 0f       	add	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	88 1f       	adc	r24, r24
    146a:	bb 1f       	adc	r27, r27
    146c:	26 17       	cp	r18, r22
    146e:	37 07       	cpc	r19, r23
    1470:	48 07       	cpc	r20, r24
    1472:	ab 07       	cpc	r26, r27
    1474:	b0 e8       	ldi	r27, 0x80	; 128
    1476:	09 f0       	breq	.+2      	; 0x147a <__divsf3_pse+0x56>
    1478:	bb 0b       	sbc	r27, r27
    147a:	80 2d       	mov	r24, r0
    147c:	bf 01       	movw	r22, r30
    147e:	ff 27       	eor	r31, r31
    1480:	93 58       	subi	r25, 0x83	; 131
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	2a f0       	brmi	.+10     	; 0x1490 <__divsf3_pse+0x6c>
    1486:	9e 3f       	cpi	r25, 0xFE	; 254
    1488:	51 05       	cpc	r21, r1
    148a:	68 f0       	brcs	.+26     	; 0x14a6 <__divsf3_pse+0x82>
    148c:	92 c0       	rjmp	.+292    	; 0x15b2 <__fp_inf>
    148e:	dc c0       	rjmp	.+440    	; 0x1648 <__fp_szero>
    1490:	5f 3f       	cpi	r21, 0xFF	; 255
    1492:	ec f3       	brlt	.-6      	; 0x148e <__divsf3_pse+0x6a>
    1494:	98 3e       	cpi	r25, 0xE8	; 232
    1496:	dc f3       	brlt	.-10     	; 0x148e <__divsf3_pse+0x6a>
    1498:	86 95       	lsr	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f7 95       	ror	r31
    14a2:	9f 5f       	subi	r25, 0xFF	; 255
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <__divsf3_pse+0x74>
    14a6:	88 0f       	add	r24, r24
    14a8:	91 1d       	adc	r25, r1
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	97 f9       	bld	r25, 7
    14b0:	08 95       	ret
    14b2:	e1 e0       	ldi	r30, 0x01	; 1
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	bb 1f       	adc	r27, r27
    14bc:	62 17       	cp	r22, r18
    14be:	73 07       	cpc	r23, r19
    14c0:	84 07       	cpc	r24, r20
    14c2:	ba 07       	cpc	r27, r26
    14c4:	20 f0       	brcs	.+8      	; 0x14ce <__divsf3_pse+0xaa>
    14c6:	62 1b       	sub	r22, r18
    14c8:	73 0b       	sbc	r23, r19
    14ca:	84 0b       	sbc	r24, r20
    14cc:	ba 0b       	sbc	r27, r26
    14ce:	ee 1f       	adc	r30, r30
    14d0:	88 f7       	brcc	.-30     	; 0x14b4 <__divsf3_pse+0x90>
    14d2:	e0 95       	com	r30
    14d4:	08 95       	ret

000014d6 <__fixsfsi>:
    14d6:	04 d0       	rcall	.+8      	; 0x14e0 <__fixunssfsi>
    14d8:	68 94       	set
    14da:	b1 11       	cpse	r27, r1
    14dc:	b5 c0       	rjmp	.+362    	; 0x1648 <__fp_szero>
    14de:	08 95       	ret

000014e0 <__fixunssfsi>:
    14e0:	98 d0       	rcall	.+304    	; 0x1612 <__fp_splitA>
    14e2:	88 f0       	brcs	.+34     	; 0x1506 <__fixunssfsi+0x26>
    14e4:	9f 57       	subi	r25, 0x7F	; 127
    14e6:	90 f0       	brcs	.+36     	; 0x150c <__fixunssfsi+0x2c>
    14e8:	b9 2f       	mov	r27, r25
    14ea:	99 27       	eor	r25, r25
    14ec:	b7 51       	subi	r27, 0x17	; 23
    14ee:	a0 f0       	brcs	.+40     	; 0x1518 <__fixunssfsi+0x38>
    14f0:	d1 f0       	breq	.+52     	; 0x1526 <__fixunssfsi+0x46>
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	1a f0       	brmi	.+6      	; 0x1502 <__fixunssfsi+0x22>
    14fc:	ba 95       	dec	r27
    14fe:	c9 f7       	brne	.-14     	; 0x14f2 <__fixunssfsi+0x12>
    1500:	12 c0       	rjmp	.+36     	; 0x1526 <__fixunssfsi+0x46>
    1502:	b1 30       	cpi	r27, 0x01	; 1
    1504:	81 f0       	breq	.+32     	; 0x1526 <__fixunssfsi+0x46>
    1506:	9f d0       	rcall	.+318    	; 0x1646 <__fp_zero>
    1508:	b1 e0       	ldi	r27, 0x01	; 1
    150a:	08 95       	ret
    150c:	9c c0       	rjmp	.+312    	; 0x1646 <__fp_zero>
    150e:	67 2f       	mov	r22, r23
    1510:	78 2f       	mov	r23, r24
    1512:	88 27       	eor	r24, r24
    1514:	b8 5f       	subi	r27, 0xF8	; 248
    1516:	39 f0       	breq	.+14     	; 0x1526 <__fixunssfsi+0x46>
    1518:	b9 3f       	cpi	r27, 0xF9	; 249
    151a:	cc f3       	brlt	.-14     	; 0x150e <__fixunssfsi+0x2e>
    151c:	86 95       	lsr	r24
    151e:	77 95       	ror	r23
    1520:	67 95       	ror	r22
    1522:	b3 95       	inc	r27
    1524:	d9 f7       	brne	.-10     	; 0x151c <__fixunssfsi+0x3c>
    1526:	3e f4       	brtc	.+14     	; 0x1536 <__fixunssfsi+0x56>
    1528:	90 95       	com	r25
    152a:	80 95       	com	r24
    152c:	70 95       	com	r23
    152e:	61 95       	neg	r22
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	8f 4f       	sbci	r24, 0xFF	; 255
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	08 95       	ret

00001538 <__floatunsisf>:
    1538:	e8 94       	clt
    153a:	09 c0       	rjmp	.+18     	; 0x154e <__floatsisf+0x12>

0000153c <__floatsisf>:
    153c:	97 fb       	bst	r25, 7
    153e:	3e f4       	brtc	.+14     	; 0x154e <__floatsisf+0x12>
    1540:	90 95       	com	r25
    1542:	80 95       	com	r24
    1544:	70 95       	com	r23
    1546:	61 95       	neg	r22
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	99 23       	and	r25, r25
    1550:	a9 f0       	breq	.+42     	; 0x157c <__floatsisf+0x40>
    1552:	f9 2f       	mov	r31, r25
    1554:	96 e9       	ldi	r25, 0x96	; 150
    1556:	bb 27       	eor	r27, r27
    1558:	93 95       	inc	r25
    155a:	f6 95       	lsr	r31
    155c:	87 95       	ror	r24
    155e:	77 95       	ror	r23
    1560:	67 95       	ror	r22
    1562:	b7 95       	ror	r27
    1564:	f1 11       	cpse	r31, r1
    1566:	f8 cf       	rjmp	.-16     	; 0x1558 <__floatsisf+0x1c>
    1568:	fa f4       	brpl	.+62     	; 0x15a8 <__floatsisf+0x6c>
    156a:	bb 0f       	add	r27, r27
    156c:	11 f4       	brne	.+4      	; 0x1572 <__floatsisf+0x36>
    156e:	60 ff       	sbrs	r22, 0
    1570:	1b c0       	rjmp	.+54     	; 0x15a8 <__floatsisf+0x6c>
    1572:	6f 5f       	subi	r22, 0xFF	; 255
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	8f 4f       	sbci	r24, 0xFF	; 255
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	16 c0       	rjmp	.+44     	; 0x15a8 <__floatsisf+0x6c>
    157c:	88 23       	and	r24, r24
    157e:	11 f0       	breq	.+4      	; 0x1584 <__floatsisf+0x48>
    1580:	96 e9       	ldi	r25, 0x96	; 150
    1582:	11 c0       	rjmp	.+34     	; 0x15a6 <__floatsisf+0x6a>
    1584:	77 23       	and	r23, r23
    1586:	21 f0       	breq	.+8      	; 0x1590 <__floatsisf+0x54>
    1588:	9e e8       	ldi	r25, 0x8E	; 142
    158a:	87 2f       	mov	r24, r23
    158c:	76 2f       	mov	r23, r22
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__floatsisf+0x5e>
    1590:	66 23       	and	r22, r22
    1592:	71 f0       	breq	.+28     	; 0x15b0 <__floatsisf+0x74>
    1594:	96 e8       	ldi	r25, 0x86	; 134
    1596:	86 2f       	mov	r24, r22
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	2a f0       	brmi	.+10     	; 0x15a8 <__floatsisf+0x6c>
    159e:	9a 95       	dec	r25
    15a0:	66 0f       	add	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	da f7       	brpl	.-10     	; 0x159e <__floatsisf+0x62>
    15a8:	88 0f       	add	r24, r24
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	97 f9       	bld	r25, 7
    15b0:	08 95       	ret

000015b2 <__fp_inf>:
    15b2:	97 f9       	bld	r25, 7
    15b4:	9f 67       	ori	r25, 0x7F	; 127
    15b6:	80 e8       	ldi	r24, 0x80	; 128
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	08 95       	ret

000015be <__fp_nan>:
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	80 ec       	ldi	r24, 0xC0	; 192
    15c2:	08 95       	ret

000015c4 <__fp_pscA>:
    15c4:	00 24       	eor	r0, r0
    15c6:	0a 94       	dec	r0
    15c8:	16 16       	cp	r1, r22
    15ca:	17 06       	cpc	r1, r23
    15cc:	18 06       	cpc	r1, r24
    15ce:	09 06       	cpc	r0, r25
    15d0:	08 95       	ret

000015d2 <__fp_pscB>:
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	12 16       	cp	r1, r18
    15d8:	13 06       	cpc	r1, r19
    15da:	14 06       	cpc	r1, r20
    15dc:	05 06       	cpc	r0, r21
    15de:	08 95       	ret

000015e0 <__fp_round>:
    15e0:	09 2e       	mov	r0, r25
    15e2:	03 94       	inc	r0
    15e4:	00 0c       	add	r0, r0
    15e6:	11 f4       	brne	.+4      	; 0x15ec <__fp_round+0xc>
    15e8:	88 23       	and	r24, r24
    15ea:	52 f0       	brmi	.+20     	; 0x1600 <__fp_round+0x20>
    15ec:	bb 0f       	add	r27, r27
    15ee:	40 f4       	brcc	.+16     	; 0x1600 <__fp_round+0x20>
    15f0:	bf 2b       	or	r27, r31
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <__fp_round+0x18>
    15f4:	60 ff       	sbrs	r22, 0
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <__fp_round+0x20>
    15f8:	6f 5f       	subi	r22, 0xFF	; 255
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	8f 4f       	sbci	r24, 0xFF	; 255
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	08 95       	ret

00001602 <__fp_split3>:
    1602:	57 fd       	sbrc	r21, 7
    1604:	90 58       	subi	r25, 0x80	; 128
    1606:	44 0f       	add	r20, r20
    1608:	55 1f       	adc	r21, r21
    160a:	59 f0       	breq	.+22     	; 0x1622 <__fp_splitA+0x10>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	71 f0       	breq	.+28     	; 0x162c <__fp_splitA+0x1a>
    1610:	47 95       	ror	r20

00001612 <__fp_splitA>:
    1612:	88 0f       	add	r24, r24
    1614:	97 fb       	bst	r25, 7
    1616:	99 1f       	adc	r25, r25
    1618:	61 f0       	breq	.+24     	; 0x1632 <__fp_splitA+0x20>
    161a:	9f 3f       	cpi	r25, 0xFF	; 255
    161c:	79 f0       	breq	.+30     	; 0x163c <__fp_splitA+0x2a>
    161e:	87 95       	ror	r24
    1620:	08 95       	ret
    1622:	12 16       	cp	r1, r18
    1624:	13 06       	cpc	r1, r19
    1626:	14 06       	cpc	r1, r20
    1628:	55 1f       	adc	r21, r21
    162a:	f2 cf       	rjmp	.-28     	; 0x1610 <__fp_split3+0xe>
    162c:	46 95       	lsr	r20
    162e:	f1 df       	rcall	.-30     	; 0x1612 <__fp_splitA>
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <__fp_splitA+0x30>
    1632:	16 16       	cp	r1, r22
    1634:	17 06       	cpc	r1, r23
    1636:	18 06       	cpc	r1, r24
    1638:	99 1f       	adc	r25, r25
    163a:	f1 cf       	rjmp	.-30     	; 0x161e <__fp_splitA+0xc>
    163c:	86 95       	lsr	r24
    163e:	71 05       	cpc	r23, r1
    1640:	61 05       	cpc	r22, r1
    1642:	08 94       	sec
    1644:	08 95       	ret

00001646 <__fp_zero>:
    1646:	e8 94       	clt

00001648 <__fp_szero>:
    1648:	bb 27       	eor	r27, r27
    164a:	66 27       	eor	r22, r22
    164c:	77 27       	eor	r23, r23
    164e:	cb 01       	movw	r24, r22
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <__mulsf3>:
    1654:	0b d0       	rcall	.+22     	; 0x166c <__mulsf3x>
    1656:	c4 cf       	rjmp	.-120    	; 0x15e0 <__fp_round>
    1658:	b5 df       	rcall	.-150    	; 0x15c4 <__fp_pscA>
    165a:	28 f0       	brcs	.+10     	; 0x1666 <__mulsf3+0x12>
    165c:	ba df       	rcall	.-140    	; 0x15d2 <__fp_pscB>
    165e:	18 f0       	brcs	.+6      	; 0x1666 <__mulsf3+0x12>
    1660:	95 23       	and	r25, r21
    1662:	09 f0       	breq	.+2      	; 0x1666 <__mulsf3+0x12>
    1664:	a6 cf       	rjmp	.-180    	; 0x15b2 <__fp_inf>
    1666:	ab cf       	rjmp	.-170    	; 0x15be <__fp_nan>
    1668:	11 24       	eor	r1, r1
    166a:	ee cf       	rjmp	.-36     	; 0x1648 <__fp_szero>

0000166c <__mulsf3x>:
    166c:	ca df       	rcall	.-108    	; 0x1602 <__fp_split3>
    166e:	a0 f3       	brcs	.-24     	; 0x1658 <__mulsf3+0x4>

00001670 <__mulsf3_pse>:
    1670:	95 9f       	mul	r25, r21
    1672:	d1 f3       	breq	.-12     	; 0x1668 <__mulsf3+0x14>
    1674:	95 0f       	add	r25, r21
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	55 1f       	adc	r21, r21
    167a:	62 9f       	mul	r22, r18
    167c:	f0 01       	movw	r30, r0
    167e:	72 9f       	mul	r23, r18
    1680:	bb 27       	eor	r27, r27
    1682:	f0 0d       	add	r31, r0
    1684:	b1 1d       	adc	r27, r1
    1686:	63 9f       	mul	r22, r19
    1688:	aa 27       	eor	r26, r26
    168a:	f0 0d       	add	r31, r0
    168c:	b1 1d       	adc	r27, r1
    168e:	aa 1f       	adc	r26, r26
    1690:	64 9f       	mul	r22, r20
    1692:	66 27       	eor	r22, r22
    1694:	b0 0d       	add	r27, r0
    1696:	a1 1d       	adc	r26, r1
    1698:	66 1f       	adc	r22, r22
    169a:	82 9f       	mul	r24, r18
    169c:	22 27       	eor	r18, r18
    169e:	b0 0d       	add	r27, r0
    16a0:	a1 1d       	adc	r26, r1
    16a2:	62 1f       	adc	r22, r18
    16a4:	73 9f       	mul	r23, r19
    16a6:	b0 0d       	add	r27, r0
    16a8:	a1 1d       	adc	r26, r1
    16aa:	62 1f       	adc	r22, r18
    16ac:	83 9f       	mul	r24, r19
    16ae:	a0 0d       	add	r26, r0
    16b0:	61 1d       	adc	r22, r1
    16b2:	22 1f       	adc	r18, r18
    16b4:	74 9f       	mul	r23, r20
    16b6:	33 27       	eor	r19, r19
    16b8:	a0 0d       	add	r26, r0
    16ba:	61 1d       	adc	r22, r1
    16bc:	23 1f       	adc	r18, r19
    16be:	84 9f       	mul	r24, r20
    16c0:	60 0d       	add	r22, r0
    16c2:	21 1d       	adc	r18, r1
    16c4:	82 2f       	mov	r24, r18
    16c6:	76 2f       	mov	r23, r22
    16c8:	6a 2f       	mov	r22, r26
    16ca:	11 24       	eor	r1, r1
    16cc:	9f 57       	subi	r25, 0x7F	; 127
    16ce:	50 40       	sbci	r21, 0x00	; 0
    16d0:	8a f0       	brmi	.+34     	; 0x16f4 <__mulsf3_pse+0x84>
    16d2:	e1 f0       	breq	.+56     	; 0x170c <__mulsf3_pse+0x9c>
    16d4:	88 23       	and	r24, r24
    16d6:	4a f0       	brmi	.+18     	; 0x16ea <__mulsf3_pse+0x7a>
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	bb 1f       	adc	r27, r27
    16de:	66 1f       	adc	r22, r22
    16e0:	77 1f       	adc	r23, r23
    16e2:	88 1f       	adc	r24, r24
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	50 40       	sbci	r21, 0x00	; 0
    16e8:	a9 f7       	brne	.-22     	; 0x16d4 <__mulsf3_pse+0x64>
    16ea:	9e 3f       	cpi	r25, 0xFE	; 254
    16ec:	51 05       	cpc	r21, r1
    16ee:	70 f0       	brcs	.+28     	; 0x170c <__mulsf3_pse+0x9c>
    16f0:	60 cf       	rjmp	.-320    	; 0x15b2 <__fp_inf>
    16f2:	aa cf       	rjmp	.-172    	; 0x1648 <__fp_szero>
    16f4:	5f 3f       	cpi	r21, 0xFF	; 255
    16f6:	ec f3       	brlt	.-6      	; 0x16f2 <__mulsf3_pse+0x82>
    16f8:	98 3e       	cpi	r25, 0xE8	; 232
    16fa:	dc f3       	brlt	.-10     	; 0x16f2 <__mulsf3_pse+0x82>
    16fc:	86 95       	lsr	r24
    16fe:	77 95       	ror	r23
    1700:	67 95       	ror	r22
    1702:	b7 95       	ror	r27
    1704:	f7 95       	ror	r31
    1706:	e7 95       	ror	r30
    1708:	9f 5f       	subi	r25, 0xFF	; 255
    170a:	c1 f7       	brne	.-16     	; 0x16fc <__mulsf3_pse+0x8c>
    170c:	fe 2b       	or	r31, r30
    170e:	88 0f       	add	r24, r24
    1710:	91 1d       	adc	r25, r1
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	97 f9       	bld	r25, 7
    1718:	08 95       	ret

0000171a <__divmodhi4>:
    171a:	97 fb       	bst	r25, 7
    171c:	07 2e       	mov	r0, r23
    171e:	16 f4       	brtc	.+4      	; 0x1724 <__divmodhi4+0xa>
    1720:	00 94       	com	r0
    1722:	07 d0       	rcall	.+14     	; 0x1732 <__divmodhi4_neg1>
    1724:	77 fd       	sbrc	r23, 7
    1726:	09 d0       	rcall	.+18     	; 0x173a <__divmodhi4_neg2>
    1728:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__udivmodhi4>
    172c:	07 fc       	sbrc	r0, 7
    172e:	05 d0       	rcall	.+10     	; 0x173a <__divmodhi4_neg2>
    1730:	3e f4       	brtc	.+14     	; 0x1740 <__divmodhi4_exit>

00001732 <__divmodhi4_neg1>:
    1732:	90 95       	com	r25
    1734:	81 95       	neg	r24
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	08 95       	ret

0000173a <__divmodhi4_neg2>:
    173a:	70 95       	com	r23
    173c:	61 95       	neg	r22
    173e:	7f 4f       	sbci	r23, 0xFF	; 255

00001740 <__divmodhi4_exit>:
    1740:	08 95       	ret

00001742 <__udivmodhi4>:
    1742:	aa 1b       	sub	r26, r26
    1744:	bb 1b       	sub	r27, r27
    1746:	51 e1       	ldi	r21, 0x11	; 17
    1748:	07 c0       	rjmp	.+14     	; 0x1758 <__udivmodhi4_ep>

0000174a <__udivmodhi4_loop>:
    174a:	aa 1f       	adc	r26, r26
    174c:	bb 1f       	adc	r27, r27
    174e:	a6 17       	cp	r26, r22
    1750:	b7 07       	cpc	r27, r23
    1752:	10 f0       	brcs	.+4      	; 0x1758 <__udivmodhi4_ep>
    1754:	a6 1b       	sub	r26, r22
    1756:	b7 0b       	sbc	r27, r23

00001758 <__udivmodhi4_ep>:
    1758:	88 1f       	adc	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	5a 95       	dec	r21
    175e:	a9 f7       	brne	.-22     	; 0x174a <__udivmodhi4_loop>
    1760:	80 95       	com	r24
    1762:	90 95       	com	r25
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	08 95       	ret

0000176a <malloc>:
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	91 05       	cpc	r25, r1
    1772:	10 f4       	brcc	.+4      	; 0x1778 <malloc+0xe>
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	e0 91 42 04 	lds	r30, 0x0442
    177c:	f0 91 43 04 	lds	r31, 0x0443
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	a0 e0       	ldi	r26, 0x00	; 0
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	30 97       	sbiw	r30, 0x00	; 0
    178a:	39 f1       	breq	.+78     	; 0x17da <malloc+0x70>
    178c:	40 81       	ld	r20, Z
    178e:	51 81       	ldd	r21, Z+1	; 0x01
    1790:	48 17       	cp	r20, r24
    1792:	59 07       	cpc	r21, r25
    1794:	b8 f0       	brcs	.+46     	; 0x17c4 <malloc+0x5a>
    1796:	48 17       	cp	r20, r24
    1798:	59 07       	cpc	r21, r25
    179a:	71 f4       	brne	.+28     	; 0x17b8 <malloc+0x4e>
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	10 97       	sbiw	r26, 0x00	; 0
    17a2:	29 f0       	breq	.+10     	; 0x17ae <malloc+0x44>
    17a4:	13 96       	adiw	r26, 0x03	; 3
    17a6:	9c 93       	st	X, r25
    17a8:	8e 93       	st	-X, r24
    17aa:	12 97       	sbiw	r26, 0x02	; 2
    17ac:	2c c0       	rjmp	.+88     	; 0x1806 <malloc+0x9c>
    17ae:	90 93 43 04 	sts	0x0443, r25
    17b2:	80 93 42 04 	sts	0x0442, r24
    17b6:	27 c0       	rjmp	.+78     	; 0x1806 <malloc+0x9c>
    17b8:	21 15       	cp	r18, r1
    17ba:	31 05       	cpc	r19, r1
    17bc:	31 f0       	breq	.+12     	; 0x17ca <malloc+0x60>
    17be:	42 17       	cp	r20, r18
    17c0:	53 07       	cpc	r21, r19
    17c2:	18 f0       	brcs	.+6      	; 0x17ca <malloc+0x60>
    17c4:	a9 01       	movw	r20, r18
    17c6:	db 01       	movw	r26, r22
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <malloc+0x62>
    17ca:	ef 01       	movw	r28, r30
    17cc:	9a 01       	movw	r18, r20
    17ce:	bd 01       	movw	r22, r26
    17d0:	df 01       	movw	r26, r30
    17d2:	02 80       	ldd	r0, Z+2	; 0x02
    17d4:	f3 81       	ldd	r31, Z+3	; 0x03
    17d6:	e0 2d       	mov	r30, r0
    17d8:	d7 cf       	rjmp	.-82     	; 0x1788 <malloc+0x1e>
    17da:	21 15       	cp	r18, r1
    17dc:	31 05       	cpc	r19, r1
    17de:	f9 f0       	breq	.+62     	; 0x181e <malloc+0xb4>
    17e0:	28 1b       	sub	r18, r24
    17e2:	39 0b       	sbc	r19, r25
    17e4:	24 30       	cpi	r18, 0x04	; 4
    17e6:	31 05       	cpc	r19, r1
    17e8:	80 f4       	brcc	.+32     	; 0x180a <malloc+0xa0>
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	9b 81       	ldd	r25, Y+3	; 0x03
    17ee:	61 15       	cp	r22, r1
    17f0:	71 05       	cpc	r23, r1
    17f2:	21 f0       	breq	.+8      	; 0x17fc <malloc+0x92>
    17f4:	fb 01       	movw	r30, r22
    17f6:	93 83       	std	Z+3, r25	; 0x03
    17f8:	82 83       	std	Z+2, r24	; 0x02
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <malloc+0x9a>
    17fc:	90 93 43 04 	sts	0x0443, r25
    1800:	80 93 42 04 	sts	0x0442, r24
    1804:	fe 01       	movw	r30, r28
    1806:	32 96       	adiw	r30, 0x02	; 2
    1808:	44 c0       	rjmp	.+136    	; 0x1892 <malloc+0x128>
    180a:	fe 01       	movw	r30, r28
    180c:	e2 0f       	add	r30, r18
    180e:	f3 1f       	adc	r31, r19
    1810:	81 93       	st	Z+, r24
    1812:	91 93       	st	Z+, r25
    1814:	22 50       	subi	r18, 0x02	; 2
    1816:	31 09       	sbc	r19, r1
    1818:	39 83       	std	Y+1, r19	; 0x01
    181a:	28 83       	st	Y, r18
    181c:	3a c0       	rjmp	.+116    	; 0x1892 <malloc+0x128>
    181e:	20 91 40 04 	lds	r18, 0x0440
    1822:	30 91 41 04 	lds	r19, 0x0441
    1826:	23 2b       	or	r18, r19
    1828:	41 f4       	brne	.+16     	; 0x183a <malloc+0xd0>
    182a:	20 91 02 01 	lds	r18, 0x0102
    182e:	30 91 03 01 	lds	r19, 0x0103
    1832:	30 93 41 04 	sts	0x0441, r19
    1836:	20 93 40 04 	sts	0x0440, r18
    183a:	20 91 00 01 	lds	r18, 0x0100
    183e:	30 91 01 01 	lds	r19, 0x0101
    1842:	21 15       	cp	r18, r1
    1844:	31 05       	cpc	r19, r1
    1846:	41 f4       	brne	.+16     	; 0x1858 <malloc+0xee>
    1848:	2d b7       	in	r18, 0x3d	; 61
    184a:	3e b7       	in	r19, 0x3e	; 62
    184c:	40 91 04 01 	lds	r20, 0x0104
    1850:	50 91 05 01 	lds	r21, 0x0105
    1854:	24 1b       	sub	r18, r20
    1856:	35 0b       	sbc	r19, r21
    1858:	e0 91 40 04 	lds	r30, 0x0440
    185c:	f0 91 41 04 	lds	r31, 0x0441
    1860:	e2 17       	cp	r30, r18
    1862:	f3 07       	cpc	r31, r19
    1864:	a0 f4       	brcc	.+40     	; 0x188e <malloc+0x124>
    1866:	2e 1b       	sub	r18, r30
    1868:	3f 0b       	sbc	r19, r31
    186a:	28 17       	cp	r18, r24
    186c:	39 07       	cpc	r19, r25
    186e:	78 f0       	brcs	.+30     	; 0x188e <malloc+0x124>
    1870:	ac 01       	movw	r20, r24
    1872:	4e 5f       	subi	r20, 0xFE	; 254
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	24 17       	cp	r18, r20
    1878:	35 07       	cpc	r19, r21
    187a:	48 f0       	brcs	.+18     	; 0x188e <malloc+0x124>
    187c:	4e 0f       	add	r20, r30
    187e:	5f 1f       	adc	r21, r31
    1880:	50 93 41 04 	sts	0x0441, r21
    1884:	40 93 40 04 	sts	0x0440, r20
    1888:	81 93       	st	Z+, r24
    188a:	91 93       	st	Z+, r25
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <malloc+0x128>
    188e:	e0 e0       	ldi	r30, 0x00	; 0
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	cf 01       	movw	r24, r30
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <free>:
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <free+0xa>
    18a2:	87 c0       	rjmp	.+270    	; 0x19b2 <free+0x118>
    18a4:	fc 01       	movw	r30, r24
    18a6:	32 97       	sbiw	r30, 0x02	; 2
    18a8:	13 82       	std	Z+3, r1	; 0x03
    18aa:	12 82       	std	Z+2, r1	; 0x02
    18ac:	c0 91 42 04 	lds	r28, 0x0442
    18b0:	d0 91 43 04 	lds	r29, 0x0443
    18b4:	20 97       	sbiw	r28, 0x00	; 0
    18b6:	81 f4       	brne	.+32     	; 0x18d8 <free+0x3e>
    18b8:	20 81       	ld	r18, Z
    18ba:	31 81       	ldd	r19, Z+1	; 0x01
    18bc:	28 0f       	add	r18, r24
    18be:	39 1f       	adc	r19, r25
    18c0:	80 91 40 04 	lds	r24, 0x0440
    18c4:	90 91 41 04 	lds	r25, 0x0441
    18c8:	82 17       	cp	r24, r18
    18ca:	93 07       	cpc	r25, r19
    18cc:	79 f5       	brne	.+94     	; 0x192c <free+0x92>
    18ce:	f0 93 41 04 	sts	0x0441, r31
    18d2:	e0 93 40 04 	sts	0x0440, r30
    18d6:	6d c0       	rjmp	.+218    	; 0x19b2 <free+0x118>
    18d8:	de 01       	movw	r26, r28
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	ae 17       	cp	r26, r30
    18e0:	bf 07       	cpc	r27, r31
    18e2:	50 f4       	brcc	.+20     	; 0x18f8 <free+0x5e>
    18e4:	12 96       	adiw	r26, 0x02	; 2
    18e6:	4d 91       	ld	r20, X+
    18e8:	5c 91       	ld	r21, X
    18ea:	13 97       	sbiw	r26, 0x03	; 3
    18ec:	9d 01       	movw	r18, r26
    18ee:	41 15       	cp	r20, r1
    18f0:	51 05       	cpc	r21, r1
    18f2:	09 f1       	breq	.+66     	; 0x1936 <free+0x9c>
    18f4:	da 01       	movw	r26, r20
    18f6:	f3 cf       	rjmp	.-26     	; 0x18de <free+0x44>
    18f8:	b3 83       	std	Z+3, r27	; 0x03
    18fa:	a2 83       	std	Z+2, r26	; 0x02
    18fc:	40 81       	ld	r20, Z
    18fe:	51 81       	ldd	r21, Z+1	; 0x01
    1900:	84 0f       	add	r24, r20
    1902:	95 1f       	adc	r25, r21
    1904:	8a 17       	cp	r24, r26
    1906:	9b 07       	cpc	r25, r27
    1908:	71 f4       	brne	.+28     	; 0x1926 <free+0x8c>
    190a:	8d 91       	ld	r24, X+
    190c:	9c 91       	ld	r25, X
    190e:	11 97       	sbiw	r26, 0x01	; 1
    1910:	84 0f       	add	r24, r20
    1912:	95 1f       	adc	r25, r21
    1914:	02 96       	adiw	r24, 0x02	; 2
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	12 96       	adiw	r26, 0x02	; 2
    191c:	8d 91       	ld	r24, X+
    191e:	9c 91       	ld	r25, X
    1920:	13 97       	sbiw	r26, 0x03	; 3
    1922:	93 83       	std	Z+3, r25	; 0x03
    1924:	82 83       	std	Z+2, r24	; 0x02
    1926:	21 15       	cp	r18, r1
    1928:	31 05       	cpc	r19, r1
    192a:	29 f4       	brne	.+10     	; 0x1936 <free+0x9c>
    192c:	f0 93 43 04 	sts	0x0443, r31
    1930:	e0 93 42 04 	sts	0x0442, r30
    1934:	3e c0       	rjmp	.+124    	; 0x19b2 <free+0x118>
    1936:	d9 01       	movw	r26, r18
    1938:	13 96       	adiw	r26, 0x03	; 3
    193a:	fc 93       	st	X, r31
    193c:	ee 93       	st	-X, r30
    193e:	12 97       	sbiw	r26, 0x02	; 2
    1940:	4d 91       	ld	r20, X+
    1942:	5d 91       	ld	r21, X+
    1944:	a4 0f       	add	r26, r20
    1946:	b5 1f       	adc	r27, r21
    1948:	ea 17       	cp	r30, r26
    194a:	fb 07       	cpc	r31, r27
    194c:	79 f4       	brne	.+30     	; 0x196c <free+0xd2>
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	84 0f       	add	r24, r20
    1954:	95 1f       	adc	r25, r21
    1956:	02 96       	adiw	r24, 0x02	; 2
    1958:	d9 01       	movw	r26, r18
    195a:	11 96       	adiw	r26, 0x01	; 1
    195c:	9c 93       	st	X, r25
    195e:	8e 93       	st	-X, r24
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	13 96       	adiw	r26, 0x03	; 3
    1966:	9c 93       	st	X, r25
    1968:	8e 93       	st	-X, r24
    196a:	12 97       	sbiw	r26, 0x02	; 2
    196c:	e0 e0       	ldi	r30, 0x00	; 0
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	19 f0       	breq	.+6      	; 0x197e <free+0xe4>
    1978:	fe 01       	movw	r30, r28
    197a:	ec 01       	movw	r28, r24
    197c:	f9 cf       	rjmp	.-14     	; 0x1970 <free+0xd6>
    197e:	ce 01       	movw	r24, r28
    1980:	02 96       	adiw	r24, 0x02	; 2
    1982:	28 81       	ld	r18, Y
    1984:	39 81       	ldd	r19, Y+1	; 0x01
    1986:	82 0f       	add	r24, r18
    1988:	93 1f       	adc	r25, r19
    198a:	20 91 40 04 	lds	r18, 0x0440
    198e:	30 91 41 04 	lds	r19, 0x0441
    1992:	28 17       	cp	r18, r24
    1994:	39 07       	cpc	r19, r25
    1996:	69 f4       	brne	.+26     	; 0x19b2 <free+0x118>
    1998:	30 97       	sbiw	r30, 0x00	; 0
    199a:	29 f4       	brne	.+10     	; 0x19a6 <free+0x10c>
    199c:	10 92 43 04 	sts	0x0443, r1
    19a0:	10 92 42 04 	sts	0x0442, r1
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <free+0x110>
    19a6:	13 82       	std	Z+3, r1	; 0x03
    19a8:	12 82       	std	Z+2, r1	; 0x02
    19aa:	d0 93 41 04 	sts	0x0441, r29
    19ae:	c0 93 40 04 	sts	0x0440, r28
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	08 95       	ret

000019b8 <do_rand>:
    19b8:	8f 92       	push	r8
    19ba:	9f 92       	push	r9
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
    19ce:	68 81       	ld	r22, Y
    19d0:	79 81       	ldd	r23, Y+1	; 0x01
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	9b 81       	ldd	r25, Y+3	; 0x03
    19d6:	61 15       	cp	r22, r1
    19d8:	71 05       	cpc	r23, r1
    19da:	81 05       	cpc	r24, r1
    19dc:	91 05       	cpc	r25, r1
    19de:	21 f4       	brne	.+8      	; 0x19e8 <do_rand+0x30>
    19e0:	64 e2       	ldi	r22, 0x24	; 36
    19e2:	79 ed       	ldi	r23, 0xD9	; 217
    19e4:	8b e5       	ldi	r24, 0x5B	; 91
    19e6:	97 e0       	ldi	r25, 0x07	; 7
    19e8:	2d e1       	ldi	r18, 0x1D	; 29
    19ea:	33 ef       	ldi	r19, 0xF3	; 243
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__divmodsi4>
    19f4:	49 01       	movw	r8, r18
    19f6:	5a 01       	movw	r10, r20
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	a7 ea       	ldi	r26, 0xA7	; 167
    19fe:	b1 e4       	ldi	r27, 0x41	; 65
    1a00:	0e 94 87 10 	call	0x210e	; 0x210e <__muluhisi3>
    1a04:	6b 01       	movw	r12, r22
    1a06:	7c 01       	movw	r14, r24
    1a08:	ac ee       	ldi	r26, 0xEC	; 236
    1a0a:	b4 ef       	ldi	r27, 0xF4	; 244
    1a0c:	a5 01       	movw	r20, r10
    1a0e:	94 01       	movw	r18, r8
    1a10:	0e 94 95 10 	call	0x212a	; 0x212a <__mulohisi3>
    1a14:	c6 0e       	add	r12, r22
    1a16:	d7 1e       	adc	r13, r23
    1a18:	e8 1e       	adc	r14, r24
    1a1a:	f9 1e       	adc	r15, r25
    1a1c:	f7 fe       	sbrs	r15, 7
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <do_rand+0x74>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	c8 1a       	sub	r12, r24
    1a24:	d1 08       	sbc	r13, r1
    1a26:	e1 08       	sbc	r14, r1
    1a28:	80 e8       	ldi	r24, 0x80	; 128
    1a2a:	f8 0a       	sbc	r15, r24
    1a2c:	c8 82       	st	Y, r12
    1a2e:	d9 82       	std	Y+1, r13	; 0x01
    1a30:	ea 82       	std	Y+2, r14	; 0x02
    1a32:	fb 82       	std	Y+3, r15	; 0x03
    1a34:	c6 01       	movw	r24, r12
    1a36:	9f 77       	andi	r25, 0x7F	; 127
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	bf 90       	pop	r11
    1a46:	af 90       	pop	r10
    1a48:	9f 90       	pop	r9
    1a4a:	8f 90       	pop	r8
    1a4c:	08 95       	ret

00001a4e <rand_r>:
    1a4e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <do_rand>
    1a52:	08 95       	ret

00001a54 <rand>:
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <do_rand>
    1a5c:	08 95       	ret

00001a5e <srand>:
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	80 93 06 01 	sts	0x0106, r24
    1a66:	90 93 07 01 	sts	0x0107, r25
    1a6a:	a0 93 08 01 	sts	0x0108, r26
    1a6e:	b0 93 09 01 	sts	0x0109, r27
    1a72:	08 95       	ret

00001a74 <strcpy_P>:
    1a74:	fb 01       	movw	r30, r22
    1a76:	dc 01       	movw	r26, r24
    1a78:	05 90       	lpm	r0, Z+
    1a7a:	0d 92       	st	X+, r0
    1a7c:	00 20       	and	r0, r0
    1a7e:	e1 f7       	brne	.-8      	; 0x1a78 <strcpy_P+0x4>
    1a80:	08 95       	ret

00001a82 <fdevopen>:
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	ec 01       	movw	r28, r24
    1a8c:	8b 01       	movw	r16, r22
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	31 f4       	brne	.+12     	; 0x1a9e <fdevopen+0x1c>
    1a92:	61 15       	cp	r22, r1
    1a94:	71 05       	cpc	r23, r1
    1a96:	19 f4       	brne	.+6      	; 0x1a9e <fdevopen+0x1c>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	38 c0       	rjmp	.+112    	; 0x1b0e <fdevopen+0x8c>
    1a9e:	6e e0       	ldi	r22, 0x0E	; 14
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <calloc>
    1aaa:	fc 01       	movw	r30, r24
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	a1 f3       	breq	.-24     	; 0x1a98 <fdevopen+0x16>
    1ab0:	80 e8       	ldi	r24, 0x80	; 128
    1ab2:	83 83       	std	Z+3, r24	; 0x03
    1ab4:	01 15       	cp	r16, r1
    1ab6:	11 05       	cpc	r17, r1
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <fdevopen+0x54>
    1aba:	13 87       	std	Z+11, r17	; 0x0b
    1abc:	02 87       	std	Z+10, r16	; 0x0a
    1abe:	81 e8       	ldi	r24, 0x81	; 129
    1ac0:	83 83       	std	Z+3, r24	; 0x03
    1ac2:	80 91 44 04 	lds	r24, 0x0444
    1ac6:	90 91 45 04 	lds	r25, 0x0445
    1aca:	89 2b       	or	r24, r25
    1acc:	21 f4       	brne	.+8      	; 0x1ad6 <fdevopen+0x54>
    1ace:	f0 93 45 04 	sts	0x0445, r31
    1ad2:	e0 93 44 04 	sts	0x0444, r30
    1ad6:	20 97       	sbiw	r28, 0x00	; 0
    1ad8:	c9 f0       	breq	.+50     	; 0x1b0c <fdevopen+0x8a>
    1ada:	d1 87       	std	Z+9, r29	; 0x09
    1adc:	c0 87       	std	Z+8, r28	; 0x08
    1ade:	83 81       	ldd	r24, Z+3	; 0x03
    1ae0:	82 60       	ori	r24, 0x02	; 2
    1ae2:	83 83       	std	Z+3, r24	; 0x03
    1ae4:	80 91 46 04 	lds	r24, 0x0446
    1ae8:	90 91 47 04 	lds	r25, 0x0447
    1aec:	89 2b       	or	r24, r25
    1aee:	71 f4       	brne	.+28     	; 0x1b0c <fdevopen+0x8a>
    1af0:	f0 93 47 04 	sts	0x0447, r31
    1af4:	e0 93 46 04 	sts	0x0446, r30
    1af8:	80 91 48 04 	lds	r24, 0x0448
    1afc:	90 91 49 04 	lds	r25, 0x0449
    1b00:	89 2b       	or	r24, r25
    1b02:	21 f4       	brne	.+8      	; 0x1b0c <fdevopen+0x8a>
    1b04:	f0 93 49 04 	sts	0x0449, r31
    1b08:	e0 93 48 04 	sts	0x0448, r30
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	08 95       	ret

00001b18 <printf>:
    1b18:	a0 e0       	ldi	r26, 0x00	; 0
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e2 e9       	ldi	r30, 0x92	; 146
    1b1e:	fd e0       	ldi	r31, 0x0D	; 13
    1b20:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__+0x20>
    1b24:	fe 01       	movw	r30, r28
    1b26:	35 96       	adiw	r30, 0x05	; 5
    1b28:	61 91       	ld	r22, Z+
    1b2a:	71 91       	ld	r23, Z+
    1b2c:	af 01       	movw	r20, r30
    1b2e:	80 91 46 04 	lds	r24, 0x0446
    1b32:	90 91 47 04 	lds	r25, 0x0447
    1b36:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <vfprintf>
    1b3a:	e2 e0       	ldi	r30, 0x02	; 2
    1b3c:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__+0x20>

00001b40 <puts>:
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	e0 91 46 04 	lds	r30, 0x0446
    1b4c:	f0 91 47 04 	lds	r31, 0x0447
    1b50:	23 81       	ldd	r18, Z+3	; 0x03
    1b52:	21 ff       	sbrs	r18, 1
    1b54:	1b c0       	rjmp	.+54     	; 0x1b8c <puts+0x4c>
    1b56:	ec 01       	movw	r28, r24
    1b58:	00 e0       	ldi	r16, 0x00	; 0
    1b5a:	10 e0       	ldi	r17, 0x00	; 0
    1b5c:	89 91       	ld	r24, Y+
    1b5e:	60 91 46 04 	lds	r22, 0x0446
    1b62:	70 91 47 04 	lds	r23, 0x0447
    1b66:	db 01       	movw	r26, r22
    1b68:	18 96       	adiw	r26, 0x08	; 8
    1b6a:	ed 91       	ld	r30, X+
    1b6c:	fc 91       	ld	r31, X
    1b6e:	19 97       	sbiw	r26, 0x09	; 9
    1b70:	88 23       	and	r24, r24
    1b72:	31 f0       	breq	.+12     	; 0x1b80 <puts+0x40>
    1b74:	09 95       	icall
    1b76:	89 2b       	or	r24, r25
    1b78:	89 f3       	breq	.-30     	; 0x1b5c <puts+0x1c>
    1b7a:	0f ef       	ldi	r16, 0xFF	; 255
    1b7c:	1f ef       	ldi	r17, 0xFF	; 255
    1b7e:	ee cf       	rjmp	.-36     	; 0x1b5c <puts+0x1c>
    1b80:	8a e0       	ldi	r24, 0x0A	; 10
    1b82:	09 95       	icall
    1b84:	89 2b       	or	r24, r25
    1b86:	11 f4       	brne	.+4      	; 0x1b8c <puts+0x4c>
    1b88:	c8 01       	movw	r24, r16
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <puts+0x50>
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	9f ef       	ldi	r25, 0xFF	; 255
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <vfprintf>:
    1b9a:	ac e0       	ldi	r26, 0x0C	; 12
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1ba0:	fd e0       	ldi	r31, 0x0D	; 13
    1ba2:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__prologue_saves__>
    1ba6:	7c 01       	movw	r14, r24
    1ba8:	6b 01       	movw	r12, r22
    1baa:	8a 01       	movw	r16, r20
    1bac:	fc 01       	movw	r30, r24
    1bae:	17 82       	std	Z+7, r1	; 0x07
    1bb0:	16 82       	std	Z+6, r1	; 0x06
    1bb2:	83 81       	ldd	r24, Z+3	; 0x03
    1bb4:	81 ff       	sbrs	r24, 1
    1bb6:	bd c1       	rjmp	.+890    	; 0x1f32 <vfprintf+0x398>
    1bb8:	ce 01       	movw	r24, r28
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	4c 01       	movw	r8, r24
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	93 fd       	sbrc	r25, 3
    1bc6:	85 91       	lpm	r24, Z+
    1bc8:	93 ff       	sbrs	r25, 3
    1bca:	81 91       	ld	r24, Z+
    1bcc:	6f 01       	movw	r12, r30
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <vfprintf+0x3a>
    1bd2:	ab c1       	rjmp	.+854    	; 0x1f2a <vfprintf+0x390>
    1bd4:	85 32       	cpi	r24, 0x25	; 37
    1bd6:	39 f4       	brne	.+14     	; 0x1be6 <vfprintf+0x4c>
    1bd8:	93 fd       	sbrc	r25, 3
    1bda:	85 91       	lpm	r24, Z+
    1bdc:	93 ff       	sbrs	r25, 3
    1bde:	81 91       	ld	r24, Z+
    1be0:	6f 01       	movw	r12, r30
    1be2:	85 32       	cpi	r24, 0x25	; 37
    1be4:	29 f4       	brne	.+10     	; 0x1bf0 <vfprintf+0x56>
    1be6:	b7 01       	movw	r22, r14
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1bee:	e7 cf       	rjmp	.-50     	; 0x1bbe <vfprintf+0x24>
    1bf0:	51 2c       	mov	r5, r1
    1bf2:	31 2c       	mov	r3, r1
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	20 32       	cpi	r18, 0x20	; 32
    1bf8:	a0 f4       	brcc	.+40     	; 0x1c22 <vfprintf+0x88>
    1bfa:	8b 32       	cpi	r24, 0x2B	; 43
    1bfc:	69 f0       	breq	.+26     	; 0x1c18 <vfprintf+0x7e>
    1bfe:	30 f4       	brcc	.+12     	; 0x1c0c <vfprintf+0x72>
    1c00:	80 32       	cpi	r24, 0x20	; 32
    1c02:	59 f0       	breq	.+22     	; 0x1c1a <vfprintf+0x80>
    1c04:	83 32       	cpi	r24, 0x23	; 35
    1c06:	69 f4       	brne	.+26     	; 0x1c22 <vfprintf+0x88>
    1c08:	20 61       	ori	r18, 0x10	; 16
    1c0a:	2c c0       	rjmp	.+88     	; 0x1c64 <vfprintf+0xca>
    1c0c:	8d 32       	cpi	r24, 0x2D	; 45
    1c0e:	39 f0       	breq	.+14     	; 0x1c1e <vfprintf+0x84>
    1c10:	80 33       	cpi	r24, 0x30	; 48
    1c12:	39 f4       	brne	.+14     	; 0x1c22 <vfprintf+0x88>
    1c14:	21 60       	ori	r18, 0x01	; 1
    1c16:	26 c0       	rjmp	.+76     	; 0x1c64 <vfprintf+0xca>
    1c18:	22 60       	ori	r18, 0x02	; 2
    1c1a:	24 60       	ori	r18, 0x04	; 4
    1c1c:	23 c0       	rjmp	.+70     	; 0x1c64 <vfprintf+0xca>
    1c1e:	28 60       	ori	r18, 0x08	; 8
    1c20:	21 c0       	rjmp	.+66     	; 0x1c64 <vfprintf+0xca>
    1c22:	27 fd       	sbrc	r18, 7
    1c24:	27 c0       	rjmp	.+78     	; 0x1c74 <vfprintf+0xda>
    1c26:	30 ed       	ldi	r19, 0xD0	; 208
    1c28:	38 0f       	add	r19, r24
    1c2a:	3a 30       	cpi	r19, 0x0A	; 10
    1c2c:	78 f4       	brcc	.+30     	; 0x1c4c <vfprintf+0xb2>
    1c2e:	26 ff       	sbrs	r18, 6
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <vfprintf+0xa4>
    1c32:	fa e0       	ldi	r31, 0x0A	; 10
    1c34:	5f 9e       	mul	r5, r31
    1c36:	30 0d       	add	r19, r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	53 2e       	mov	r5, r19
    1c3c:	13 c0       	rjmp	.+38     	; 0x1c64 <vfprintf+0xca>
    1c3e:	8a e0       	ldi	r24, 0x0A	; 10
    1c40:	38 9e       	mul	r3, r24
    1c42:	30 0d       	add	r19, r0
    1c44:	11 24       	eor	r1, r1
    1c46:	33 2e       	mov	r3, r19
    1c48:	20 62       	ori	r18, 0x20	; 32
    1c4a:	0c c0       	rjmp	.+24     	; 0x1c64 <vfprintf+0xca>
    1c4c:	8e 32       	cpi	r24, 0x2E	; 46
    1c4e:	21 f4       	brne	.+8      	; 0x1c58 <vfprintf+0xbe>
    1c50:	26 fd       	sbrc	r18, 6
    1c52:	6b c1       	rjmp	.+726    	; 0x1f2a <vfprintf+0x390>
    1c54:	20 64       	ori	r18, 0x40	; 64
    1c56:	06 c0       	rjmp	.+12     	; 0x1c64 <vfprintf+0xca>
    1c58:	8c 36       	cpi	r24, 0x6C	; 108
    1c5a:	11 f4       	brne	.+4      	; 0x1c60 <vfprintf+0xc6>
    1c5c:	20 68       	ori	r18, 0x80	; 128
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <vfprintf+0xca>
    1c60:	88 36       	cpi	r24, 0x68	; 104
    1c62:	41 f4       	brne	.+16     	; 0x1c74 <vfprintf+0xda>
    1c64:	f6 01       	movw	r30, r12
    1c66:	93 fd       	sbrc	r25, 3
    1c68:	85 91       	lpm	r24, Z+
    1c6a:	93 ff       	sbrs	r25, 3
    1c6c:	81 91       	ld	r24, Z+
    1c6e:	6f 01       	movw	r12, r30
    1c70:	81 11       	cpse	r24, r1
    1c72:	c1 cf       	rjmp	.-126    	; 0x1bf6 <vfprintf+0x5c>
    1c74:	98 2f       	mov	r25, r24
    1c76:	9f 7d       	andi	r25, 0xDF	; 223
    1c78:	95 54       	subi	r25, 0x45	; 69
    1c7a:	93 30       	cpi	r25, 0x03	; 3
    1c7c:	28 f4       	brcc	.+10     	; 0x1c88 <vfprintf+0xee>
    1c7e:	0c 5f       	subi	r16, 0xFC	; 252
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	ff e3       	ldi	r31, 0x3F	; 63
    1c84:	f9 83       	std	Y+1, r31	; 0x01
    1c86:	0d c0       	rjmp	.+26     	; 0x1ca2 <vfprintf+0x108>
    1c88:	83 36       	cpi	r24, 0x63	; 99
    1c8a:	31 f0       	breq	.+12     	; 0x1c98 <vfprintf+0xfe>
    1c8c:	83 37       	cpi	r24, 0x73	; 115
    1c8e:	71 f0       	breq	.+28     	; 0x1cac <vfprintf+0x112>
    1c90:	83 35       	cpi	r24, 0x53	; 83
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <vfprintf+0xfc>
    1c94:	5b c0       	rjmp	.+182    	; 0x1d4c <vfprintf+0x1b2>
    1c96:	22 c0       	rjmp	.+68     	; 0x1cdc <vfprintf+0x142>
    1c98:	f8 01       	movw	r30, r16
    1c9a:	80 81       	ld	r24, Z
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca2:	44 24       	eor	r4, r4
    1ca4:	43 94       	inc	r4
    1ca6:	51 2c       	mov	r5, r1
    1ca8:	54 01       	movw	r10, r8
    1caa:	15 c0       	rjmp	.+42     	; 0x1cd6 <vfprintf+0x13c>
    1cac:	38 01       	movw	r6, r16
    1cae:	f2 e0       	ldi	r31, 0x02	; 2
    1cb0:	6f 0e       	add	r6, r31
    1cb2:	71 1c       	adc	r7, r1
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	a0 80       	ld	r10, Z
    1cb8:	b1 80       	ldd	r11, Z+1	; 0x01
    1cba:	26 ff       	sbrs	r18, 6
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <vfprintf+0x12a>
    1cbe:	65 2d       	mov	r22, r5
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <vfprintf+0x12e>
    1cc4:	6f ef       	ldi	r22, 0xFF	; 255
    1cc6:	7f ef       	ldi	r23, 0xFF	; 255
    1cc8:	c5 01       	movw	r24, r10
    1cca:	2c 87       	std	Y+12, r18	; 0x0c
    1ccc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <strnlen>
    1cd0:	2c 01       	movw	r4, r24
    1cd2:	83 01       	movw	r16, r6
    1cd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cd6:	2f 77       	andi	r18, 0x7F	; 127
    1cd8:	22 2e       	mov	r2, r18
    1cda:	17 c0       	rjmp	.+46     	; 0x1d0a <vfprintf+0x170>
    1cdc:	38 01       	movw	r6, r16
    1cde:	f2 e0       	ldi	r31, 0x02	; 2
    1ce0:	6f 0e       	add	r6, r31
    1ce2:	71 1c       	adc	r7, r1
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	a0 80       	ld	r10, Z
    1ce8:	b1 80       	ldd	r11, Z+1	; 0x01
    1cea:	26 ff       	sbrs	r18, 6
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <vfprintf+0x15a>
    1cee:	65 2d       	mov	r22, r5
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <vfprintf+0x15e>
    1cf4:	6f ef       	ldi	r22, 0xFF	; 255
    1cf6:	7f ef       	ldi	r23, 0xFF	; 255
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	2c 87       	std	Y+12, r18	; 0x0c
    1cfc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <strnlen_P>
    1d00:	2c 01       	movw	r4, r24
    1d02:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d04:	20 68       	ori	r18, 0x80	; 128
    1d06:	22 2e       	mov	r2, r18
    1d08:	83 01       	movw	r16, r6
    1d0a:	23 fc       	sbrc	r2, 3
    1d0c:	1b c0       	rjmp	.+54     	; 0x1d44 <vfprintf+0x1aa>
    1d0e:	83 2d       	mov	r24, r3
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	48 16       	cp	r4, r24
    1d14:	59 06       	cpc	r5, r25
    1d16:	b0 f4       	brcc	.+44     	; 0x1d44 <vfprintf+0x1aa>
    1d18:	b7 01       	movw	r22, r14
    1d1a:	80 e2       	ldi	r24, 0x20	; 32
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1d22:	3a 94       	dec	r3
    1d24:	f4 cf       	rjmp	.-24     	; 0x1d0e <vfprintf+0x174>
    1d26:	f5 01       	movw	r30, r10
    1d28:	27 fc       	sbrc	r2, 7
    1d2a:	85 91       	lpm	r24, Z+
    1d2c:	27 fe       	sbrs	r2, 7
    1d2e:	81 91       	ld	r24, Z+
    1d30:	5f 01       	movw	r10, r30
    1d32:	b7 01       	movw	r22, r14
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1d3a:	31 10       	cpse	r3, r1
    1d3c:	3a 94       	dec	r3
    1d3e:	f1 e0       	ldi	r31, 0x01	; 1
    1d40:	4f 1a       	sub	r4, r31
    1d42:	51 08       	sbc	r5, r1
    1d44:	41 14       	cp	r4, r1
    1d46:	51 04       	cpc	r5, r1
    1d48:	71 f7       	brne	.-36     	; 0x1d26 <vfprintf+0x18c>
    1d4a:	e5 c0       	rjmp	.+458    	; 0x1f16 <vfprintf+0x37c>
    1d4c:	84 36       	cpi	r24, 0x64	; 100
    1d4e:	11 f0       	breq	.+4      	; 0x1d54 <vfprintf+0x1ba>
    1d50:	89 36       	cpi	r24, 0x69	; 105
    1d52:	39 f5       	brne	.+78     	; 0x1da2 <vfprintf+0x208>
    1d54:	f8 01       	movw	r30, r16
    1d56:	27 ff       	sbrs	r18, 7
    1d58:	07 c0       	rjmp	.+14     	; 0x1d68 <vfprintf+0x1ce>
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	0c 5f       	subi	r16, 0xFC	; 252
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	08 c0       	rjmp	.+16     	; 0x1d78 <vfprintf+0x1de>
    1d68:	60 81       	ld	r22, Z
    1d6a:	71 81       	ldd	r23, Z+1	; 0x01
    1d6c:	88 27       	eor	r24, r24
    1d6e:	77 fd       	sbrc	r23, 7
    1d70:	80 95       	com	r24
    1d72:	98 2f       	mov	r25, r24
    1d74:	0e 5f       	subi	r16, 0xFE	; 254
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	2f 76       	andi	r18, 0x6F	; 111
    1d7a:	b2 2e       	mov	r11, r18
    1d7c:	97 ff       	sbrs	r25, 7
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <vfprintf+0x1f8>
    1d80:	90 95       	com	r25
    1d82:	80 95       	com	r24
    1d84:	70 95       	com	r23
    1d86:	61 95       	neg	r22
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8e:	20 68       	ori	r18, 0x80	; 128
    1d90:	b2 2e       	mov	r11, r18
    1d92:	2a e0       	ldi	r18, 0x0A	; 10
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	a4 01       	movw	r20, r8
    1d98:	0e 94 0a 10 	call	0x2014	; 0x2014 <__ultoa_invert>
    1d9c:	a8 2e       	mov	r10, r24
    1d9e:	a8 18       	sub	r10, r8
    1da0:	44 c0       	rjmp	.+136    	; 0x1e2a <vfprintf+0x290>
    1da2:	85 37       	cpi	r24, 0x75	; 117
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <vfprintf+0x216>
    1da6:	2f 7e       	andi	r18, 0xEF	; 239
    1da8:	b2 2e       	mov	r11, r18
    1daa:	2a e0       	ldi	r18, 0x0A	; 10
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	25 c0       	rjmp	.+74     	; 0x1dfa <vfprintf+0x260>
    1db0:	f2 2f       	mov	r31, r18
    1db2:	f9 7f       	andi	r31, 0xF9	; 249
    1db4:	bf 2e       	mov	r11, r31
    1db6:	8f 36       	cpi	r24, 0x6F	; 111
    1db8:	c1 f0       	breq	.+48     	; 0x1dea <vfprintf+0x250>
    1dba:	18 f4       	brcc	.+6      	; 0x1dc2 <vfprintf+0x228>
    1dbc:	88 35       	cpi	r24, 0x58	; 88
    1dbe:	79 f0       	breq	.+30     	; 0x1dde <vfprintf+0x244>
    1dc0:	b4 c0       	rjmp	.+360    	; 0x1f2a <vfprintf+0x390>
    1dc2:	80 37       	cpi	r24, 0x70	; 112
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <vfprintf+0x232>
    1dc6:	88 37       	cpi	r24, 0x78	; 120
    1dc8:	21 f0       	breq	.+8      	; 0x1dd2 <vfprintf+0x238>
    1dca:	af c0       	rjmp	.+350    	; 0x1f2a <vfprintf+0x390>
    1dcc:	2f 2f       	mov	r18, r31
    1dce:	20 61       	ori	r18, 0x10	; 16
    1dd0:	b2 2e       	mov	r11, r18
    1dd2:	b4 fe       	sbrs	r11, 4
    1dd4:	0d c0       	rjmp	.+26     	; 0x1df0 <vfprintf+0x256>
    1dd6:	8b 2d       	mov	r24, r11
    1dd8:	84 60       	ori	r24, 0x04	; 4
    1dda:	b8 2e       	mov	r11, r24
    1ddc:	09 c0       	rjmp	.+18     	; 0x1df0 <vfprintf+0x256>
    1dde:	24 ff       	sbrs	r18, 4
    1de0:	0a c0       	rjmp	.+20     	; 0x1df6 <vfprintf+0x25c>
    1de2:	9f 2f       	mov	r25, r31
    1de4:	96 60       	ori	r25, 0x06	; 6
    1de6:	b9 2e       	mov	r11, r25
    1de8:	06 c0       	rjmp	.+12     	; 0x1df6 <vfprintf+0x25c>
    1dea:	28 e0       	ldi	r18, 0x08	; 8
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <vfprintf+0x260>
    1df0:	20 e1       	ldi	r18, 0x10	; 16
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <vfprintf+0x260>
    1df6:	20 e1       	ldi	r18, 0x10	; 16
    1df8:	32 e0       	ldi	r19, 0x02	; 2
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	b7 fe       	sbrs	r11, 7
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <vfprintf+0x274>
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	0c 5f       	subi	r16, 0xFC	; 252
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	06 c0       	rjmp	.+12     	; 0x1e1a <vfprintf+0x280>
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 5f       	subi	r16, 0xFE	; 254
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	a4 01       	movw	r20, r8
    1e1c:	0e 94 0a 10 	call	0x2014	; 0x2014 <__ultoa_invert>
    1e20:	a8 2e       	mov	r10, r24
    1e22:	a8 18       	sub	r10, r8
    1e24:	fb 2d       	mov	r31, r11
    1e26:	ff 77       	andi	r31, 0x7F	; 127
    1e28:	bf 2e       	mov	r11, r31
    1e2a:	b6 fe       	sbrs	r11, 6
    1e2c:	0b c0       	rjmp	.+22     	; 0x1e44 <vfprintf+0x2aa>
    1e2e:	2b 2d       	mov	r18, r11
    1e30:	2e 7f       	andi	r18, 0xFE	; 254
    1e32:	a5 14       	cp	r10, r5
    1e34:	50 f4       	brcc	.+20     	; 0x1e4a <vfprintf+0x2b0>
    1e36:	b4 fe       	sbrs	r11, 4
    1e38:	0a c0       	rjmp	.+20     	; 0x1e4e <vfprintf+0x2b4>
    1e3a:	b2 fc       	sbrc	r11, 2
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <vfprintf+0x2b4>
    1e3e:	2b 2d       	mov	r18, r11
    1e40:	2e 7e       	andi	r18, 0xEE	; 238
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <vfprintf+0x2b4>
    1e44:	7a 2c       	mov	r7, r10
    1e46:	2b 2d       	mov	r18, r11
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <vfprintf+0x2b6>
    1e4a:	7a 2c       	mov	r7, r10
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <vfprintf+0x2b6>
    1e4e:	75 2c       	mov	r7, r5
    1e50:	24 ff       	sbrs	r18, 4
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <vfprintf+0x2d4>
    1e54:	fe 01       	movw	r30, r28
    1e56:	ea 0d       	add	r30, r10
    1e58:	f1 1d       	adc	r31, r1
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 33       	cpi	r24, 0x30	; 48
    1e5e:	11 f4       	brne	.+4      	; 0x1e64 <vfprintf+0x2ca>
    1e60:	29 7e       	andi	r18, 0xE9	; 233
    1e62:	09 c0       	rjmp	.+18     	; 0x1e76 <vfprintf+0x2dc>
    1e64:	22 ff       	sbrs	r18, 2
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <vfprintf+0x2da>
    1e68:	73 94       	inc	r7
    1e6a:	73 94       	inc	r7
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <vfprintf+0x2dc>
    1e6e:	82 2f       	mov	r24, r18
    1e70:	86 78       	andi	r24, 0x86	; 134
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <vfprintf+0x2dc>
    1e74:	73 94       	inc	r7
    1e76:	23 fd       	sbrc	r18, 3
    1e78:	13 c0       	rjmp	.+38     	; 0x1ea0 <vfprintf+0x306>
    1e7a:	20 ff       	sbrs	r18, 0
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <vfprintf+0x2f0>
    1e7e:	5a 2c       	mov	r5, r10
    1e80:	73 14       	cp	r7, r3
    1e82:	18 f4       	brcc	.+6      	; 0x1e8a <vfprintf+0x2f0>
    1e84:	53 0c       	add	r5, r3
    1e86:	57 18       	sub	r5, r7
    1e88:	73 2c       	mov	r7, r3
    1e8a:	73 14       	cp	r7, r3
    1e8c:	68 f4       	brcc	.+26     	; 0x1ea8 <vfprintf+0x30e>
    1e8e:	b7 01       	movw	r22, r14
    1e90:	80 e2       	ldi	r24, 0x20	; 32
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	2c 87       	std	Y+12, r18	; 0x0c
    1e96:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1e9a:	73 94       	inc	r7
    1e9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e9e:	f5 cf       	rjmp	.-22     	; 0x1e8a <vfprintf+0x2f0>
    1ea0:	73 14       	cp	r7, r3
    1ea2:	10 f4       	brcc	.+4      	; 0x1ea8 <vfprintf+0x30e>
    1ea4:	37 18       	sub	r3, r7
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <vfprintf+0x310>
    1ea8:	31 2c       	mov	r3, r1
    1eaa:	24 ff       	sbrs	r18, 4
    1eac:	12 c0       	rjmp	.+36     	; 0x1ed2 <vfprintf+0x338>
    1eae:	b7 01       	movw	r22, r14
    1eb0:	80 e3       	ldi	r24, 0x30	; 48
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	2c 87       	std	Y+12, r18	; 0x0c
    1eb6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1eba:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ebc:	22 ff       	sbrs	r18, 2
    1ebe:	17 c0       	rjmp	.+46     	; 0x1eee <vfprintf+0x354>
    1ec0:	21 ff       	sbrs	r18, 1
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <vfprintf+0x330>
    1ec4:	88 e5       	ldi	r24, 0x58	; 88
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <vfprintf+0x334>
    1eca:	88 e7       	ldi	r24, 0x78	; 120
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	b7 01       	movw	r22, r14
    1ed0:	0c c0       	rjmp	.+24     	; 0x1eea <vfprintf+0x350>
    1ed2:	82 2f       	mov	r24, r18
    1ed4:	86 78       	andi	r24, 0x86	; 134
    1ed6:	59 f0       	breq	.+22     	; 0x1eee <vfprintf+0x354>
    1ed8:	21 fd       	sbrc	r18, 1
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <vfprintf+0x346>
    1edc:	80 e2       	ldi	r24, 0x20	; 32
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <vfprintf+0x348>
    1ee0:	8b e2       	ldi	r24, 0x2B	; 43
    1ee2:	27 fd       	sbrc	r18, 7
    1ee4:	8d e2       	ldi	r24, 0x2D	; 45
    1ee6:	b7 01       	movw	r22, r14
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1eee:	a5 14       	cp	r10, r5
    1ef0:	38 f4       	brcc	.+14     	; 0x1f00 <vfprintf+0x366>
    1ef2:	b7 01       	movw	r22, r14
    1ef4:	80 e3       	ldi	r24, 0x30	; 48
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1efc:	5a 94       	dec	r5
    1efe:	f7 cf       	rjmp	.-18     	; 0x1eee <vfprintf+0x354>
    1f00:	aa 94       	dec	r10
    1f02:	f4 01       	movw	r30, r8
    1f04:	ea 0d       	add	r30, r10
    1f06:	f1 1d       	adc	r31, r1
    1f08:	80 81       	ld	r24, Z
    1f0a:	b7 01       	movw	r22, r14
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1f12:	a1 10       	cpse	r10, r1
    1f14:	f5 cf       	rjmp	.-22     	; 0x1f00 <vfprintf+0x366>
    1f16:	33 20       	and	r3, r3
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <vfprintf+0x382>
    1f1a:	51 ce       	rjmp	.-862    	; 0x1bbe <vfprintf+0x24>
    1f1c:	b7 01       	movw	r22, r14
    1f1e:	80 e2       	ldi	r24, 0x20	; 32
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fputc>
    1f26:	3a 94       	dec	r3
    1f28:	f6 cf       	rjmp	.-20     	; 0x1f16 <vfprintf+0x37c>
    1f2a:	f7 01       	movw	r30, r14
    1f2c:	86 81       	ldd	r24, Z+6	; 0x06
    1f2e:	97 81       	ldd	r25, Z+7	; 0x07
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <vfprintf+0x39c>
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	9f ef       	ldi	r25, 0xFF	; 255
    1f36:	2c 96       	adiw	r28, 0x0c	; 12
    1f38:	e2 e1       	ldi	r30, 0x12	; 18
    1f3a:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__epilogue_restores__>

00001f3e <calloc>:
    1f3e:	0f 93       	push	r16
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	86 9f       	mul	r24, r22
    1f48:	80 01       	movw	r16, r0
    1f4a:	87 9f       	mul	r24, r23
    1f4c:	10 0d       	add	r17, r0
    1f4e:	96 9f       	mul	r25, r22
    1f50:	10 0d       	add	r17, r0
    1f52:	11 24       	eor	r1, r1
    1f54:	c8 01       	movw	r24, r16
    1f56:	0e 94 b5 0b 	call	0x176a	; 0x176a <malloc>
    1f5a:	ec 01       	movw	r28, r24
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	29 f0       	breq	.+10     	; 0x1f6a <calloc+0x2c>
    1f60:	a8 01       	movw	r20, r16
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <memset>
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <strnlen_P>:
    1f76:	fc 01       	movw	r30, r24
    1f78:	05 90       	lpm	r0, Z+
    1f7a:	61 50       	subi	r22, 0x01	; 1
    1f7c:	70 40       	sbci	r23, 0x00	; 0
    1f7e:	01 10       	cpse	r0, r1
    1f80:	d8 f7       	brcc	.-10     	; 0x1f78 <strnlen_P+0x2>
    1f82:	80 95       	com	r24
    1f84:	90 95       	com	r25
    1f86:	8e 0f       	add	r24, r30
    1f88:	9f 1f       	adc	r25, r31
    1f8a:	08 95       	ret

00001f8c <memset>:
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <memset+0x6>
    1f90:	6d 93       	st	X+, r22
    1f92:	41 50       	subi	r20, 0x01	; 1
    1f94:	50 40       	sbci	r21, 0x00	; 0
    1f96:	e0 f7       	brcc	.-8      	; 0x1f90 <memset+0x4>
    1f98:	08 95       	ret

00001f9a <strnlen>:
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	61 50       	subi	r22, 0x01	; 1
    1f9e:	70 40       	sbci	r23, 0x00	; 0
    1fa0:	01 90       	ld	r0, Z+
    1fa2:	01 10       	cpse	r0, r1
    1fa4:	d8 f7       	brcc	.-10     	; 0x1f9c <strnlen+0x2>
    1fa6:	80 95       	com	r24
    1fa8:	90 95       	com	r25
    1faa:	8e 0f       	add	r24, r30
    1fac:	9f 1f       	adc	r25, r31
    1fae:	08 95       	ret

00001fb0 <fputc>:
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	18 2f       	mov	r17, r24
    1fba:	09 2f       	mov	r16, r25
    1fbc:	eb 01       	movw	r28, r22
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	81 fd       	sbrc	r24, 1
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <fputc+0x1a>
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	9f ef       	ldi	r25, 0xFF	; 255
    1fc8:	20 c0       	rjmp	.+64     	; 0x200a <fputc+0x5a>
    1fca:	82 ff       	sbrs	r24, 2
    1fcc:	10 c0       	rjmp	.+32     	; 0x1fee <fputc+0x3e>
    1fce:	4e 81       	ldd	r20, Y+6	; 0x06
    1fd0:	5f 81       	ldd	r21, Y+7	; 0x07
    1fd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd6:	42 17       	cp	r20, r18
    1fd8:	53 07       	cpc	r21, r19
    1fda:	7c f4       	brge	.+30     	; 0x1ffa <fputc+0x4a>
    1fdc:	e8 81       	ld	r30, Y
    1fde:	f9 81       	ldd	r31, Y+1	; 0x01
    1fe0:	9f 01       	movw	r18, r30
    1fe2:	2f 5f       	subi	r18, 0xFF	; 255
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	39 83       	std	Y+1, r19	; 0x01
    1fe8:	28 83       	st	Y, r18
    1fea:	10 83       	st	Z, r17
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <fputc+0x4a>
    1fee:	e8 85       	ldd	r30, Y+8	; 0x08
    1ff0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ff2:	81 2f       	mov	r24, r17
    1ff4:	09 95       	icall
    1ff6:	89 2b       	or	r24, r25
    1ff8:	29 f7       	brne	.-54     	; 0x1fc4 <fputc+0x14>
    1ffa:	2e 81       	ldd	r18, Y+6	; 0x06
    1ffc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ffe:	2f 5f       	subi	r18, 0xFF	; 255
    2000:	3f 4f       	sbci	r19, 0xFF	; 255
    2002:	3f 83       	std	Y+7, r19	; 0x07
    2004:	2e 83       	std	Y+6, r18	; 0x06
    2006:	81 2f       	mov	r24, r17
    2008:	90 2f       	mov	r25, r16
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	08 95       	ret

00002014 <__ultoa_invert>:
    2014:	fa 01       	movw	r30, r20
    2016:	aa 27       	eor	r26, r26
    2018:	28 30       	cpi	r18, 0x08	; 8
    201a:	51 f1       	breq	.+84     	; 0x2070 <__ultoa_invert+0x5c>
    201c:	20 31       	cpi	r18, 0x10	; 16
    201e:	81 f1       	breq	.+96     	; 0x2080 <__ultoa_invert+0x6c>
    2020:	e8 94       	clt
    2022:	6f 93       	push	r22
    2024:	6e 7f       	andi	r22, 0xFE	; 254
    2026:	6e 5f       	subi	r22, 0xFE	; 254
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	8f 4f       	sbci	r24, 0xFF	; 255
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	af 4f       	sbci	r26, 0xFF	; 255
    2030:	b1 e0       	ldi	r27, 0x01	; 1
    2032:	3e d0       	rcall	.+124    	; 0x20b0 <__ultoa_invert+0x9c>
    2034:	b4 e0       	ldi	r27, 0x04	; 4
    2036:	3c d0       	rcall	.+120    	; 0x20b0 <__ultoa_invert+0x9c>
    2038:	67 0f       	add	r22, r23
    203a:	78 1f       	adc	r23, r24
    203c:	89 1f       	adc	r24, r25
    203e:	9a 1f       	adc	r25, r26
    2040:	a1 1d       	adc	r26, r1
    2042:	68 0f       	add	r22, r24
    2044:	79 1f       	adc	r23, r25
    2046:	8a 1f       	adc	r24, r26
    2048:	91 1d       	adc	r25, r1
    204a:	a1 1d       	adc	r26, r1
    204c:	6a 0f       	add	r22, r26
    204e:	71 1d       	adc	r23, r1
    2050:	81 1d       	adc	r24, r1
    2052:	91 1d       	adc	r25, r1
    2054:	a1 1d       	adc	r26, r1
    2056:	20 d0       	rcall	.+64     	; 0x2098 <__ultoa_invert+0x84>
    2058:	09 f4       	brne	.+2      	; 0x205c <__ultoa_invert+0x48>
    205a:	68 94       	set
    205c:	3f 91       	pop	r19
    205e:	2a e0       	ldi	r18, 0x0A	; 10
    2060:	26 9f       	mul	r18, r22
    2062:	11 24       	eor	r1, r1
    2064:	30 19       	sub	r19, r0
    2066:	30 5d       	subi	r19, 0xD0	; 208
    2068:	31 93       	st	Z+, r19
    206a:	de f6       	brtc	.-74     	; 0x2022 <__ultoa_invert+0xe>
    206c:	cf 01       	movw	r24, r30
    206e:	08 95       	ret
    2070:	46 2f       	mov	r20, r22
    2072:	47 70       	andi	r20, 0x07	; 7
    2074:	40 5d       	subi	r20, 0xD0	; 208
    2076:	41 93       	st	Z+, r20
    2078:	b3 e0       	ldi	r27, 0x03	; 3
    207a:	0f d0       	rcall	.+30     	; 0x209a <__ultoa_invert+0x86>
    207c:	c9 f7       	brne	.-14     	; 0x2070 <__ultoa_invert+0x5c>
    207e:	f6 cf       	rjmp	.-20     	; 0x206c <__ultoa_invert+0x58>
    2080:	46 2f       	mov	r20, r22
    2082:	4f 70       	andi	r20, 0x0F	; 15
    2084:	40 5d       	subi	r20, 0xD0	; 208
    2086:	4a 33       	cpi	r20, 0x3A	; 58
    2088:	18 f0       	brcs	.+6      	; 0x2090 <__ultoa_invert+0x7c>
    208a:	49 5d       	subi	r20, 0xD9	; 217
    208c:	31 fd       	sbrc	r19, 1
    208e:	40 52       	subi	r20, 0x20	; 32
    2090:	41 93       	st	Z+, r20
    2092:	02 d0       	rcall	.+4      	; 0x2098 <__ultoa_invert+0x84>
    2094:	a9 f7       	brne	.-22     	; 0x2080 <__ultoa_invert+0x6c>
    2096:	ea cf       	rjmp	.-44     	; 0x206c <__ultoa_invert+0x58>
    2098:	b4 e0       	ldi	r27, 0x04	; 4
    209a:	a6 95       	lsr	r26
    209c:	97 95       	ror	r25
    209e:	87 95       	ror	r24
    20a0:	77 95       	ror	r23
    20a2:	67 95       	ror	r22
    20a4:	ba 95       	dec	r27
    20a6:	c9 f7       	brne	.-14     	; 0x209a <__ultoa_invert+0x86>
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	61 05       	cpc	r22, r1
    20ac:	71 05       	cpc	r23, r1
    20ae:	08 95       	ret
    20b0:	9b 01       	movw	r18, r22
    20b2:	ac 01       	movw	r20, r24
    20b4:	0a 2e       	mov	r0, r26
    20b6:	06 94       	lsr	r0
    20b8:	57 95       	ror	r21
    20ba:	47 95       	ror	r20
    20bc:	37 95       	ror	r19
    20be:	27 95       	ror	r18
    20c0:	ba 95       	dec	r27
    20c2:	c9 f7       	brne	.-14     	; 0x20b6 <__ultoa_invert+0xa2>
    20c4:	62 0f       	add	r22, r18
    20c6:	73 1f       	adc	r23, r19
    20c8:	84 1f       	adc	r24, r20
    20ca:	95 1f       	adc	r25, r21
    20cc:	a0 1d       	adc	r26, r0
    20ce:	08 95       	ret

000020d0 <__divmodsi4>:
    20d0:	05 2e       	mov	r0, r21
    20d2:	97 fb       	bst	r25, 7
    20d4:	1e f4       	brtc	.+6      	; 0x20dc <__divmodsi4+0xc>
    20d6:	00 94       	com	r0
    20d8:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__negsi2>
    20dc:	57 fd       	sbrc	r21, 7
    20de:	07 d0       	rcall	.+14     	; 0x20ee <__divmodsi4_neg2>
    20e0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__udivmodsi4>
    20e4:	07 fc       	sbrc	r0, 7
    20e6:	03 d0       	rcall	.+6      	; 0x20ee <__divmodsi4_neg2>
    20e8:	4e f4       	brtc	.+18     	; 0x20fc <__divmodsi4_exit>
    20ea:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__negsi2>

000020ee <__divmodsi4_neg2>:
    20ee:	50 95       	com	r21
    20f0:	40 95       	com	r20
    20f2:	30 95       	com	r19
    20f4:	21 95       	neg	r18
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	4f 4f       	sbci	r20, 0xFF	; 255
    20fa:	5f 4f       	sbci	r21, 0xFF	; 255

000020fc <__divmodsi4_exit>:
    20fc:	08 95       	ret

000020fe <__negsi2>:
    20fe:	90 95       	com	r25
    2100:	80 95       	com	r24
    2102:	70 95       	com	r23
    2104:	61 95       	neg	r22
    2106:	7f 4f       	sbci	r23, 0xFF	; 255
    2108:	8f 4f       	sbci	r24, 0xFF	; 255
    210a:	9f 4f       	sbci	r25, 0xFF	; 255
    210c:	08 95       	ret

0000210e <__muluhisi3>:
    210e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__umulhisi3>
    2112:	a5 9f       	mul	r26, r21
    2114:	90 0d       	add	r25, r0
    2116:	b4 9f       	mul	r27, r20
    2118:	90 0d       	add	r25, r0
    211a:	a4 9f       	mul	r26, r20
    211c:	80 0d       	add	r24, r0
    211e:	91 1d       	adc	r25, r1
    2120:	11 24       	eor	r1, r1
    2122:	08 95       	ret

00002124 <__mulshisi3>:
    2124:	b7 ff       	sbrs	r27, 7
    2126:	0c 94 87 10 	jmp	0x210e	; 0x210e <__muluhisi3>

0000212a <__mulohisi3>:
    212a:	0e 94 87 10 	call	0x210e	; 0x210e <__muluhisi3>
    212e:	82 1b       	sub	r24, r18
    2130:	93 0b       	sbc	r25, r19
    2132:	08 95       	ret

00002134 <__prologue_saves__>:
    2134:	2f 92       	push	r2
    2136:	3f 92       	push	r3
    2138:	4f 92       	push	r4
    213a:	5f 92       	push	r5
    213c:	6f 92       	push	r6
    213e:	7f 92       	push	r7
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	ca 1b       	sub	r28, r26
    215e:	db 0b       	sbc	r29, r27
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	09 94       	ijmp

0000216c <__epilogue_restores__>:
    216c:	2a 88       	ldd	r2, Y+18	; 0x12
    216e:	39 88       	ldd	r3, Y+17	; 0x11
    2170:	48 88       	ldd	r4, Y+16	; 0x10
    2172:	5f 84       	ldd	r5, Y+15	; 0x0f
    2174:	6e 84       	ldd	r6, Y+14	; 0x0e
    2176:	7d 84       	ldd	r7, Y+13	; 0x0d
    2178:	8c 84       	ldd	r8, Y+12	; 0x0c
    217a:	9b 84       	ldd	r9, Y+11	; 0x0b
    217c:	aa 84       	ldd	r10, Y+10	; 0x0a
    217e:	b9 84       	ldd	r11, Y+9	; 0x09
    2180:	c8 84       	ldd	r12, Y+8	; 0x08
    2182:	df 80       	ldd	r13, Y+7	; 0x07
    2184:	ee 80       	ldd	r14, Y+6	; 0x06
    2186:	fd 80       	ldd	r15, Y+5	; 0x05
    2188:	0c 81       	ldd	r16, Y+4	; 0x04
    218a:	1b 81       	ldd	r17, Y+3	; 0x03
    218c:	aa 81       	ldd	r26, Y+2	; 0x02
    218e:	b9 81       	ldd	r27, Y+1	; 0x01
    2190:	ce 0f       	add	r28, r30
    2192:	d1 1d       	adc	r29, r1
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	ed 01       	movw	r28, r26
    21a0:	08 95       	ret

000021a2 <__udivmodsi4>:
    21a2:	a1 e2       	ldi	r26, 0x21	; 33
    21a4:	1a 2e       	mov	r1, r26
    21a6:	aa 1b       	sub	r26, r26
    21a8:	bb 1b       	sub	r27, r27
    21aa:	fd 01       	movw	r30, r26
    21ac:	0d c0       	rjmp	.+26     	; 0x21c8 <__udivmodsi4_ep>

000021ae <__udivmodsi4_loop>:
    21ae:	aa 1f       	adc	r26, r26
    21b0:	bb 1f       	adc	r27, r27
    21b2:	ee 1f       	adc	r30, r30
    21b4:	ff 1f       	adc	r31, r31
    21b6:	a2 17       	cp	r26, r18
    21b8:	b3 07       	cpc	r27, r19
    21ba:	e4 07       	cpc	r30, r20
    21bc:	f5 07       	cpc	r31, r21
    21be:	20 f0       	brcs	.+8      	; 0x21c8 <__udivmodsi4_ep>
    21c0:	a2 1b       	sub	r26, r18
    21c2:	b3 0b       	sbc	r27, r19
    21c4:	e4 0b       	sbc	r30, r20
    21c6:	f5 0b       	sbc	r31, r21

000021c8 <__udivmodsi4_ep>:
    21c8:	66 1f       	adc	r22, r22
    21ca:	77 1f       	adc	r23, r23
    21cc:	88 1f       	adc	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	1a 94       	dec	r1
    21d2:	69 f7       	brne	.-38     	; 0x21ae <__udivmodsi4_loop>
    21d4:	60 95       	com	r22
    21d6:	70 95       	com	r23
    21d8:	80 95       	com	r24
    21da:	90 95       	com	r25
    21dc:	9b 01       	movw	r18, r22
    21de:	ac 01       	movw	r20, r24
    21e0:	bd 01       	movw	r22, r26
    21e2:	cf 01       	movw	r24, r30
    21e4:	08 95       	ret

000021e6 <__umulhisi3>:
    21e6:	a2 9f       	mul	r26, r18
    21e8:	b0 01       	movw	r22, r0
    21ea:	b3 9f       	mul	r27, r19
    21ec:	c0 01       	movw	r24, r0
    21ee:	a3 9f       	mul	r26, r19
    21f0:	70 0d       	add	r23, r0
    21f2:	81 1d       	adc	r24, r1
    21f4:	11 24       	eor	r1, r1
    21f6:	91 1d       	adc	r25, r1
    21f8:	b2 9f       	mul	r27, r18
    21fa:	70 0d       	add	r23, r0
    21fc:	81 1d       	adc	r24, r1
    21fe:	11 24       	eor	r1, r1
    2200:	91 1d       	adc	r25, r1
    2202:	08 95       	ret

00002204 <_exit>:
    2204:	f8 94       	cli

00002206 <__stop_program>:
    2206:	ff cf       	rjmp	.-2      	; 0x2206 <__stop_program>
