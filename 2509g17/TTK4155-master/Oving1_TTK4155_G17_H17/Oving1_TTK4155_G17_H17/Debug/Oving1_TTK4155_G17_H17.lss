
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b2  00800100  0000207a  0000210e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000207a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  008003b2  008003b2  000023c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d7b  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a01  00000000  00000000  0000433f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a10  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000054c  00000000  00000000  00005750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000798  00000000  00000000  00005c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000121f  00000000  00000000  00006434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00007653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__ctors_end>
       4:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_1>
       8:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_2>
       c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      10:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      14:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      18:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      1c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      20:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      24:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      28:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      2c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      30:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      34:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      38:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      3c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      40:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      44:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      48:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      4c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      50:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      54:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      58:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      5c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      60:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      64:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      68:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      6c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	43 61       	ori	r20, 0x13	; 19
      72:	6c 69       	ori	r22, 0x9C	; 156
      74:	62 72       	andi	r22, 0x22	; 34
      76:	61 74       	andi	r22, 0x41	; 65
      78:	65 00       	.word	0x0065	; ????
	...

0000007c <debug_entry_0>:
      7c:	52 65 73 65 74 00 00 00 00 00 00 00                 Reset.......

00000088 <option_entry_1>:
      88:	43 6f 6e 74 72 61 73 74 00 00 00 00                 Contrast....

00000094 <option_entry_0>:
      94:	4d 75 73 69 63 00 00 00 00 00 00 00                 Music.......

000000a0 <mainmenu_entry_3>:
      a0:	4f 70 74 69 6f 6e 73 00 00 00 00 00                 Options.....

000000ac <mainmenu_entry_2>:
      ac:	44 65 62 75 67 00 00 00 00 00 00 00                 Debug.......

000000b8 <mainmenu_entry_1>:
      b8:	48 69 67 68 73 63 6f 72 65 00 00 00                 Highscore...

000000c4 <font>:
	...
      cc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      dc:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
      ec:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
      fc:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     10c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     11c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     12c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     13c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     14c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     15c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     16c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     17c:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     18c:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     19c:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1ac:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1bc:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1cc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1dc:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1ec:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     1fc:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     20c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     21c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     22c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     23c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     24c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     25c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     26c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     27c:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     28c:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     29c:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2ac:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2bc:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2cc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2dc:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2ec:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     2fc:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     30c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     31c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     32c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     33c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     34c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     35c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     36c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     37c:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     38c:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     39c:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3ac:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3bc:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3cc:	00 7e 7e 7e 7e 7e 7e 00                             .~~~~~~.

000003d4 <__ctors_end>:
     3d4:	11 24       	eor	r1, r1
     3d6:	1f be       	out	0x3f, r1	; 63
     3d8:	cf ef       	ldi	r28, 0xFF	; 255
     3da:	d4 e0       	ldi	r29, 0x04	; 4
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	cd bf       	out	0x3d, r28	; 61

000003e0 <__do_copy_data>:
     3e0:	13 e0       	ldi	r17, 0x03	; 3
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	ea e7       	ldi	r30, 0x7A	; 122
     3e8:	f0 e2       	ldi	r31, 0x20	; 32
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <__do_copy_data+0x10>
     3ec:	05 90       	lpm	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	a2 3b       	cpi	r26, 0xB2	; 178
     3f2:	b1 07       	cpc	r27, r17
     3f4:	d9 f7       	brne	.-10     	; 0x3ec <__do_copy_data+0xc>

000003f6 <__do_clear_bss>:
     3f6:	24 e0       	ldi	r18, 0x04	; 4
     3f8:	a2 eb       	ldi	r26, 0xB2	; 178
     3fa:	b3 e0       	ldi	r27, 0x03	; 3
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <.do_clear_bss_start>

000003fe <.do_clear_bss_loop>:
     3fe:	1d 92       	st	X+, r1

00000400 <.do_clear_bss_start>:
     400:	a6 32       	cpi	r26, 0x26	; 38
     402:	b2 07       	cpc	r27, r18
     404:	e1 f7       	brne	.-8      	; 0x3fe <.do_clear_bss_loop>
     406:	0e 94 8f 05 	call	0xb1e	; 0xb1e <main>
     40a:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <_exit>

0000040e <__bad_interrupt>:
     40e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000412 <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
     412:	82 30       	cpi	r24, 0x02	; 2
     414:	91 05       	cpc	r25, r1
     416:	71 f0       	breq	.+28     	; 0x434 <readADC+0x22>
     418:	1c f4       	brge	.+6      	; 0x420 <readADC+0xe>
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	39 f0       	breq	.+14     	; 0x42c <readADC+0x1a>
     41e:	1c c0       	rjmp	.+56     	; 0x458 <readADC+0x46>
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	91 05       	cpc	r25, r1
     424:	59 f0       	breq	.+22     	; 0x43c <readADC+0x2a>
     426:	04 97       	sbiw	r24, 0x04	; 4
     428:	69 f0       	breq	.+26     	; 0x444 <readADC+0x32>
     42a:	16 c0       	rjmp	.+44     	; 0x458 <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
     42c:	84 e1       	ldi	r24, 0x14	; 20
     42e:	80 93 00 14 	sts	0x1400, r24
     432:	0b c0       	rjmp	.+22     	; 0x44a <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
     434:	85 e1       	ldi	r24, 0x15	; 21
     436:	80 93 00 14 	sts	0x1400, r24
     43a:	07 c0       	rjmp	.+14     	; 0x44a <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
     43c:	86 e1       	ldi	r24, 0x16	; 22
     43e:	80 93 00 14 	sts	0x1400, r24
     442:	03 c0       	rjmp	.+6      	; 0x44a <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
     444:	87 e1       	ldi	r24, 0x17	; 23
     446:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44a:	82 e5       	ldi	r24, 0x52	; 82
     44c:	8a 95       	dec	r24
     44e:	f1 f7       	brne	.-4      	; 0x44c <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
     450:	80 91 00 14 	lds	r24, 0x1400
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
     45c:	08 95       	ret

0000045e <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     45e:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     460:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     462:	85 b7       	in	r24, 0x35	; 53
     464:	81 60       	ori	r24, 0x01	; 1
     466:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     468:	85 b7       	in	r24, 0x35	; 53
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     46e:	85 b7       	in	r24, 0x35	; 53
     470:	84 60       	ori	r24, 0x04	; 4
     472:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     474:	85 b7       	in	r24, 0x35	; 53
     476:	88 60       	ori	r24, 0x08	; 8
     478:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     47a:	8b b7       	in	r24, 0x3b	; 59
     47c:	80 64       	ori	r24, 0x40	; 64
     47e:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     480:	8b b7       	in	r24, 0x3b	; 59
     482:	80 68       	ori	r24, 0x80	; 128
     484:	8b bf       	out	0x3b, r24	; 59
	sei();//enabling interrupts globaly
     486:	78 94       	sei
     488:	08 95       	ret

0000048a <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	4f 93       	push	r20
     4a2:	5f 93       	push	r21
     4a4:	6f 93       	push	r22
     4a6:	7f 93       	push	r23
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4b8:	8e e0       	ldi	r24, 0x0E	; 14
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	9f 93       	push	r25
     4be:	8f 93       	push	r24
     4c0:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     4c4:	82 e5       	ldi	r24, 0x52	; 82
     4c6:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     4ca:	f8 2e       	mov	r15, r24
     4cc:	e9 2e       	mov	r14, r25
     4ce:	8c e4       	ldi	r24, 0x4C	; 76
     4d0:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     4d4:	18 2f       	mov	r17, r24
     4d6:	09 2f       	mov	r16, r25
     4d8:	89 e5       	ldi	r24, 0x59	; 89
     4da:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     4de:	c8 2f       	mov	r28, r24
     4e0:	d9 2f       	mov	r29, r25
     4e2:	88 e5       	ldi	r24, 0x58	; 88
     4e4:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	9f 93       	push	r25
     4f6:	8f 93       	push	r24
     4f8:	87 e3       	ldi	r24, 0x37	; 55
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
     504:	8d b7       	in	r24, 0x3d	; 61
     506:	9e b7       	in	r25, 0x3e	; 62
     508:	0c 96       	adiw	r24, 0x0c	; 12
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	9e bf       	out	0x3e, r25	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	8d bf       	out	0x3d, r24	; 61
}
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	bf 91       	pop	r27
     51e:	af 91       	pop	r26
     520:	9f 91       	pop	r25
     522:	8f 91       	pop	r24
     524:	7f 91       	pop	r23
     526:	6f 91       	pop	r22
     528:	5f 91       	pop	r21
     52a:	4f 91       	pop	r20
     52c:	3f 91       	pop	r19
     52e:	2f 91       	pop	r18
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31
	printf("Left Button Pressed\n");
     564:	80 e5       	ldi	r24, 0x50	; 80
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 b2 0b 	call	0x1764	; 0x1764 <puts>
     56c:	ff 91       	pop	r31
     56e:	ef 91       	pop	r30
     570:	bf 91       	pop	r27
     572:	af 91       	pop	r26
     574:	9f 91       	pop	r25
     576:	8f 91       	pop	r24
     578:	7f 91       	pop	r23
     57a:	6f 91       	pop	r22
     57c:	5f 91       	pop	r21
     57e:	4f 91       	pop	r20
     580:	3f 91       	pop	r19
     582:	2f 91       	pop	r18
     584:	0f 90       	pop	r0
     586:	0f be       	out	0x3f, r0	; 63
     588:	0f 90       	pop	r0
     58a:	1f 90       	pop	r1
     58c:	18 95       	reti

0000058e <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	c4 e6       	ldi	r28, 0x64	; 100
     598:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     59a:	00 91 bc 03 	lds	r16, 0x03BC
     59e:	10 91 bd 03 	lds	r17, 0x03BD
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 09 02 	call	0x412	; 0x412 <readADC>
     5aa:	01 58       	subi	r16, 0x81	; 129
     5ac:	1f 4f       	sbci	r17, 0xFF	; 255
     5ae:	08 1b       	sub	r16, r24
     5b0:	19 0b       	sbc	r17, r25
     5b2:	10 93 bd 03 	sts	0x03BD, r17
     5b6:	00 93 bc 03 	sts	0x03BC, r16
		calibrate_y += 127 - readADC(2);
     5ba:	00 91 ba 03 	lds	r16, 0x03BA
     5be:	10 91 bb 03 	lds	r17, 0x03BB
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 09 02 	call	0x412	; 0x412 <readADC>
     5ca:	01 58       	subi	r16, 0x81	; 129
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	08 1b       	sub	r16, r24
     5d0:	19 0b       	sbc	r17, r25
     5d2:	10 93 bb 03 	sts	0x03BB, r17
     5d6:	00 93 ba 03 	sts	0x03BA, r16
     5da:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     5dc:	20 97       	sbiw	r28, 0x00	; 0
     5de:	e9 f6       	brne	.-70     	; 0x59a <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     5e0:	80 91 bc 03 	lds	r24, 0x03BC
     5e4:	90 91 bd 03 	lds	r25, 0x03BD
     5e8:	24 e6       	ldi	r18, 0x64	; 100
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	b9 01       	movw	r22, r18
     5ee:	0e 94 c6 0a 	call	0x158c	; 0x158c <__divmodhi4>
     5f2:	70 93 bd 03 	sts	0x03BD, r23
     5f6:	60 93 bc 03 	sts	0x03BC, r22
	calibrate_y /= CALIBRATE_READINGS;
     5fa:	80 91 ba 03 	lds	r24, 0x03BA
     5fe:	90 91 bb 03 	lds	r25, 0x03BB
     602:	b9 01       	movw	r22, r18
     604:	0e 94 c6 0a 	call	0x158c	; 0x158c <__divmodhi4>
     608:	70 93 bb 03 	sts	0x03BB, r23
     60c:	60 93 ba 03 	sts	0x03BA, r22
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int referance, int step){
     61a:	2f 92       	push	r2
     61c:	3f 92       	push	r3
     61e:	4f 92       	push	r4
     620:	5f 92       	push	r5
     622:	6f 92       	push	r6
     624:	7f 92       	push	r7
     626:	8f 92       	push	r8
     628:	9f 92       	push	r9
     62a:	af 92       	push	r10
     62c:	bf 92       	push	r11
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	00 d0       	rcall	.+0      	; 0x640 <signal_to_range+0x26>
     640:	00 d0       	rcall	.+0      	; 0x642 <signal_to_range+0x28>
     642:	00 d0       	rcall	.+0      	; 0x644 <signal_to_range+0x2a>
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	3c 01       	movw	r6, r24
     64a:	7a 83       	std	Y+2, r23	; 0x02
     64c:	69 83       	std	Y+1, r22	; 0x01
     64e:	5c 83       	std	Y+4, r21	; 0x04
     650:	4b 83       	std	Y+3, r20	; 0x03
     652:	3e 83       	std	Y+6, r19	; 0x06
     654:	2d 83       	std	Y+5, r18	; 0x05
     656:	18 01       	movw	r2, r16
     658:	85 01       	movw	r16, r10
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     65a:	b9 01       	movw	r22, r18
     65c:	88 27       	eor	r24, r24
     65e:	77 fd       	sbrc	r23, 7
     660:	80 95       	com	r24
     662:	98 2f       	mov	r25, r24
     664:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__floatsisf>
     668:	4b 01       	movw	r8, r22
     66a:	5c 01       	movw	r10, r24
     66c:	b3 01       	movw	r22, r6
     66e:	6e 0d       	add	r22, r14
     670:	7f 1d       	adc	r23, r15
     672:	29 81       	ldd	r18, Y+1	; 0x01
     674:	3a 81       	ldd	r19, Y+2	; 0x02
     676:	62 1b       	sub	r22, r18
     678:	73 0b       	sbc	r23, r19
     67a:	88 27       	eor	r24, r24
     67c:	77 fd       	sbrc	r23, 7
     67e:	80 95       	com	r24
     680:	98 2f       	mov	r25, r24
     682:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__floatsisf>
     686:	2b 01       	movw	r4, r22
     688:	3c 01       	movw	r6, r24
     68a:	b1 01       	movw	r22, r2
     68c:	8d 81       	ldd	r24, Y+5	; 0x05
     68e:	9e 81       	ldd	r25, Y+6	; 0x06
     690:	68 1b       	sub	r22, r24
     692:	79 0b       	sbc	r23, r25
     694:	88 27       	eor	r24, r24
     696:	77 fd       	sbrc	r23, 7
     698:	80 95       	com	r24
     69a:	98 2f       	mov	r25, r24
     69c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__floatsisf>
     6a0:	9b 01       	movw	r18, r22
     6a2:	ac 01       	movw	r20, r24
     6a4:	c3 01       	movw	r24, r6
     6a6:	b2 01       	movw	r22, r4
     6a8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__mulsf3>
     6ac:	2b 01       	movw	r4, r22
     6ae:	3c 01       	movw	r6, r24
     6b0:	6b 81       	ldd	r22, Y+3	; 0x03
     6b2:	7c 81       	ldd	r23, Y+4	; 0x04
     6b4:	e9 81       	ldd	r30, Y+1	; 0x01
     6b6:	fa 81       	ldd	r31, Y+2	; 0x02
     6b8:	6e 1b       	sub	r22, r30
     6ba:	7f 0b       	sbc	r23, r31
     6bc:	88 27       	eor	r24, r24
     6be:	77 fd       	sbrc	r23, 7
     6c0:	80 95       	com	r24
     6c2:	98 2f       	mov	r25, r24
     6c4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__floatsisf>
     6c8:	9b 01       	movw	r18, r22
     6ca:	ac 01       	movw	r20, r24
     6cc:	c3 01       	movw	r24, r6
     6ce:	b2 01       	movw	r22, r4
     6d0:	0e 94 3c 09 	call	0x1278	; 0x1278 <__divsf3>
     6d4:	9b 01       	movw	r18, r22
     6d6:	ac 01       	movw	r20, r24
     6d8:	c5 01       	movw	r24, r10
     6da:	b4 01       	movw	r22, r8
     6dc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__addsf3>
     6e0:	0e 94 a4 09 	call	0x1348	; 0x1348 <__fixsfsi>
	
		
	if (new_signal >= output_max - step){
     6e4:	c1 01       	movw	r24, r2
     6e6:	80 1b       	sub	r24, r16
     6e8:	91 0b       	sbc	r25, r17
     6ea:	68 17       	cp	r22, r24
     6ec:	79 07       	cpc	r23, r25
     6ee:	74 f5       	brge	.+92     	; 0x74c <signal_to_range+0x132>
		referance = output_max;
	}else if(new_signal <= output_min + step){
     6f0:	8d 81       	ldd	r24, Y+5	; 0x05
     6f2:	9e 81       	ldd	r25, Y+6	; 0x06
     6f4:	80 0f       	add	r24, r16
     6f6:	91 1f       	adc	r25, r17
     6f8:	86 17       	cp	r24, r22
     6fa:	97 07       	cpc	r25, r23
     6fc:	4c f5       	brge	.+82     	; 0x750 <signal_to_range+0x136>
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
			if((new_signal >= referance + step/2)){
     6fe:	f8 01       	movw	r30, r16
     700:	11 23       	and	r17, r17
     702:	0c f4       	brge	.+2      	; 0x706 <signal_to_range+0xec>
     704:	31 96       	adiw	r30, 0x01	; 1
     706:	f5 95       	asr	r31
     708:	e7 95       	ror	r30
     70a:	d8 01       	movw	r26, r16
     70c:	12 c0       	rjmp	.+36     	; 0x732 <signal_to_range+0x118>
     70e:	8a 0f       	add	r24, r26
     710:	9b 1f       	adc	r25, r27
     712:	ac 01       	movw	r20, r24
     714:	4e 0f       	add	r20, r30
     716:	5f 1f       	adc	r21, r31
     718:	64 17       	cp	r22, r20
     71a:	75 07       	cpc	r23, r21
     71c:	14 f0       	brlt	.+4      	; 0x722 <signal_to_range+0x108>
				referance += step;
     71e:	69 01       	movw	r12, r18
     720:	0b c0       	rjmp	.+22     	; 0x738 <signal_to_range+0x11e>
			}
			else if (new_signal <= referance - step/2){
     722:	c6 01       	movw	r24, r12
     724:	8e 1b       	sub	r24, r30
     726:	9f 0b       	sbc	r25, r31
     728:	86 17       	cp	r24, r22
     72a:	97 07       	cpc	r25, r23
     72c:	14 f0       	brlt	.+4      	; 0x732 <signal_to_range+0x118>
				referance -= step;
     72e:	c0 1a       	sub	r12, r16
     730:	d1 0a       	sbc	r13, r17
     732:	c6 01       	movw	r24, r12
     734:	80 1b       	sub	r24, r16
     736:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		referance = output_max;
	}else if(new_signal <= output_min + step){
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
     738:	96 01       	movw	r18, r12
     73a:	20 0f       	add	r18, r16
     73c:	31 1f       	adc	r19, r17
     73e:	62 17       	cp	r22, r18
     740:	73 07       	cpc	r23, r19
     742:	2c f7       	brge	.-54     	; 0x70e <signal_to_range+0xf4>
     744:	86 17       	cp	r24, r22
     746:	97 07       	cpc	r25, r23
     748:	14 f7       	brge	.-60     	; 0x70e <signal_to_range+0xf4>
     74a:	04 c0       	rjmp	.+8      	; 0x754 <signal_to_range+0x13a>
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	if (new_signal >= output_max - step){
		referance = output_max;
     74c:	61 01       	movw	r12, r2
     74e:	02 c0       	rjmp	.+4      	; 0x754 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		referance = output_min;
     750:	cd 80       	ldd	r12, Y+5	; 0x05
     752:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, referance);
	return referance;
}
     754:	c6 01       	movw	r24, r12
     756:	26 96       	adiw	r28, 0x06	; 6
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	3f 90       	pop	r3
     784:	2f 90       	pop	r2
     786:	08 95       	ret

00000788 <read_control_input>:
	}
	calibrate_x /= CALIBRATE_READINGS;
	calibrate_y /= CALIBRATE_READINGS;
}

int read_control_input(char channel){
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
	switch(channel){
     798:	82 35       	cpi	r24, 0x52	; 82
     79a:	09 f4       	brne	.+2      	; 0x79e <read_control_input+0x16>
     79c:	74 c0       	rjmp	.+232    	; 0x886 <read_control_input+0xfe>
     79e:	20 f4       	brcc	.+8      	; 0x7a8 <read_control_input+0x20>
     7a0:	8c 34       	cpi	r24, 0x4C	; 76
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <read_control_input+0x1e>
     7a4:	4e c0       	rjmp	.+156    	; 0x842 <read_control_input+0xba>
     7a6:	91 c0       	rjmp	.+290    	; 0x8ca <read_control_input+0x142>
     7a8:	88 35       	cpi	r24, 0x58	; 88
     7aa:	19 f0       	breq	.+6      	; 0x7b2 <read_control_input+0x2a>
     7ac:	89 35       	cpi	r24, 0x59	; 89
     7ae:	29 f1       	breq	.+74     	; 0x7fa <read_control_input+0x72>
     7b0:	8c c0       	rjmp	.+280    	; 0x8ca <read_control_input+0x142>
		case 'X': 
			ref_X = signal_to_range(readADC(1), 0, 255, -100, 100, calibrate_x, ref_X, 10); 
     7b2:	c0 90 b8 03 	lds	r12, 0x03B8
     7b6:	d0 90 b9 03 	lds	r13, 0x03B9
     7ba:	e0 90 bc 03 	lds	r14, 0x03BC
     7be:	f0 90 bd 03 	lds	r15, 0x03BD
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 09 02 	call	0x412	; 0x412 <readADC>
     7ca:	0f 2e       	mov	r0, r31
     7cc:	fa e0       	ldi	r31, 0x0A	; 10
     7ce:	af 2e       	mov	r10, r31
     7d0:	b1 2c       	mov	r11, r1
     7d2:	f0 2d       	mov	r31, r0
     7d4:	04 e6       	ldi	r16, 0x64	; 100
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	2c e9       	ldi	r18, 0x9C	; 156
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	0e 94 0d 03 	call	0x61a	; 0x61a <signal_to_range>
     7e8:	90 93 b9 03 	sts	0x03B9, r25
     7ec:	80 93 b8 03 	sts	0x03B8, r24
			return ref_X;
     7f0:	80 91 b8 03 	lds	r24, 0x03B8
     7f4:	90 91 b9 03 	lds	r25, 0x03B9
     7f8:	6a c0       	rjmp	.+212    	; 0x8ce <read_control_input+0x146>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), 0, 255, -100, 100, calibrate_y, ref_Y, 10);
     7fa:	c0 90 b6 03 	lds	r12, 0x03B6
     7fe:	d0 90 b7 03 	lds	r13, 0x03B7
     802:	e0 90 ba 03 	lds	r14, 0x03BA
     806:	f0 90 bb 03 	lds	r15, 0x03BB
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 09 02 	call	0x412	; 0x412 <readADC>
     812:	0f 2e       	mov	r0, r31
     814:	fa e0       	ldi	r31, 0x0A	; 10
     816:	af 2e       	mov	r10, r31
     818:	b1 2c       	mov	r11, r1
     81a:	f0 2d       	mov	r31, r0
     81c:	04 e6       	ldi	r16, 0x64	; 100
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	2c e9       	ldi	r18, 0x9C	; 156
     822:	3f ef       	ldi	r19, 0xFF	; 255
     824:	4f ef       	ldi	r20, 0xFF	; 255
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 0d 03 	call	0x61a	; 0x61a <signal_to_range>
     830:	90 93 b7 03 	sts	0x03B7, r25
     834:	80 93 b6 03 	sts	0x03B6, r24
			return ref_Y;
     838:	80 91 b6 03 	lds	r24, 0x03B6
     83c:	90 91 b7 03 	lds	r25, 0x03B7
     840:	46 c0       	rjmp	.+140    	; 0x8ce <read_control_input+0x146>
		case 'L':
		ref_L = signal_to_range(readADC(3), 0, 255, 0, 100, 0, ref_L, 10);
     842:	c0 90 b4 03 	lds	r12, 0x03B4
     846:	d0 90 b5 03 	lds	r13, 0x03B5
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 09 02 	call	0x412	; 0x412 <readADC>
     852:	0f 2e       	mov	r0, r31
     854:	fa e0       	ldi	r31, 0x0A	; 10
     856:	af 2e       	mov	r10, r31
     858:	b1 2c       	mov	r11, r1
     85a:	f0 2d       	mov	r31, r0
     85c:	e1 2c       	mov	r14, r1
     85e:	f1 2c       	mov	r15, r1
     860:	04 e6       	ldi	r16, 0x64	; 100
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	4f ef       	ldi	r20, 0xFF	; 255
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	0e 94 0d 03 	call	0x61a	; 0x61a <signal_to_range>
     874:	90 93 b5 03 	sts	0x03B5, r25
     878:	80 93 b4 03 	sts	0x03B4, r24
		return ref_L;
     87c:	80 91 b4 03 	lds	r24, 0x03B4
     880:	90 91 b5 03 	lds	r25, 0x03B5
     884:	24 c0       	rjmp	.+72     	; 0x8ce <read_control_input+0x146>
		case 'R': 
			ref_R = signal_to_range(readADC(4), 0, 255, 0, 100, 0, ref_R, 10);
     886:	c0 90 b2 03 	lds	r12, 0x03B2
     88a:	d0 90 b3 03 	lds	r13, 0x03B3
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 09 02 	call	0x412	; 0x412 <readADC>
     896:	0f 2e       	mov	r0, r31
     898:	fa e0       	ldi	r31, 0x0A	; 10
     89a:	af 2e       	mov	r10, r31
     89c:	b1 2c       	mov	r11, r1
     89e:	f0 2d       	mov	r31, r0
     8a0:	e1 2c       	mov	r14, r1
     8a2:	f1 2c       	mov	r15, r1
     8a4:	04 e6       	ldi	r16, 0x64	; 100
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	4f ef       	ldi	r20, 0xFF	; 255
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	0e 94 0d 03 	call	0x61a	; 0x61a <signal_to_range>
     8b8:	90 93 b3 03 	sts	0x03B3, r25
     8bc:	80 93 b2 03 	sts	0x03B2, r24
			return ref_R;
     8c0:	80 91 b2 03 	lds	r24, 0x03B2
     8c4:	90 91 b3 03 	lds	r25, 0x03B3
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <read_control_input+0x146>
	}
	return 0;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
}
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	bf 90       	pop	r11
     8dc:	af 90       	pop	r10
     8de:	08 95       	ret

000008e0 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     8e0:	0e 94 c7 02 	call	0x58e	; 0x58e <calibrate_joystick>
	ref_X = read_control_input('X');
     8e4:	88 e5       	ldi	r24, 0x58	; 88
     8e6:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     8ea:	90 93 b9 03 	sts	0x03B9, r25
     8ee:	80 93 b8 03 	sts	0x03B8, r24
	ref_Y = read_control_input('Y');
     8f2:	89 e5       	ldi	r24, 0x59	; 89
     8f4:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     8f8:	90 93 b7 03 	sts	0x03B7, r25
     8fc:	80 93 b6 03 	sts	0x03B6, r24
	ref_L = read_control_input('L');
     900:	8c e4       	ldi	r24, 0x4C	; 76
     902:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     906:	90 93 b5 03 	sts	0x03B5, r25
     90a:	80 93 b4 03 	sts	0x03B4, r24
	ref_R = read_control_input('R');
     90e:	82 e5       	ldi	r24, 0x52	; 82
     910:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     914:	90 93 b3 03 	sts	0x03B3, r25
     918:	80 93 b2 03 	sts	0x03B2, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     91c:	20 91 ba 03 	lds	r18, 0x03BA
     920:	30 91 bb 03 	lds	r19, 0x03BB
     924:	80 91 bc 03 	lds	r24, 0x03BC
     928:	90 91 bd 03 	lds	r25, 0x03BD
     92c:	3f 93       	push	r19
     92e:	2f 93       	push	r18
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	84 e6       	ldi	r24, 0x64	; 100
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	9f 93       	push	r25
     93a:	8f 93       	push	r24
     93c:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     940:	60 91 b2 03 	lds	r22, 0x03B2
     944:	70 91 b3 03 	lds	r23, 0x03B3
     948:	40 91 b4 03 	lds	r20, 0x03B4
     94c:	50 91 b5 03 	lds	r21, 0x03B5
     950:	20 91 b6 03 	lds	r18, 0x03B6
     954:	30 91 b7 03 	lds	r19, 0x03B7
     958:	80 91 b8 03 	lds	r24, 0x03B8
     95c:	90 91 b9 03 	lds	r25, 0x03B9
     960:	7f 93       	push	r23
     962:	6f 93       	push	r22
     964:	5f 93       	push	r21
     966:	4f 93       	push	r20
     968:	3f 93       	push	r19
     96a:	2f 93       	push	r18
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	8d e8       	ldi	r24, 0x8D	; 141
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	9f 93       	push	r25
     976:	8f 93       	push	r24
     978:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
     97c:	8d b7       	in	r24, 0x3d	; 61
     97e:	9e b7       	in	r25, 0x3e	; 62
     980:	40 96       	adiw	r24, 0x10	; 16
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	9e bf       	out	0x3e, r25	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	8d bf       	out	0x3d, r24	; 61
     98c:	08 95       	ret

0000098e <SRAM_test>:
	printf("\nINITIALIZATION COMPLETE\n");
}

#include <stdlib.h>
void SRAM_test(void)
{
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     99e:	86 eb       	ldi	r24, 0xB6	; 182
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9a6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <rand>
     9aa:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9ac:	0e 94 41 0b 	call	0x1682	; 0x1682 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9b4:	00 e0       	ldi	r16, 0x00	; 0
     9b6:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9b8:	0f 2e       	mov	r0, r31
     9ba:	fc ec       	ldi	r31, 0xCC	; 204
     9bc:	ef 2e       	mov	r14, r31
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	ff 2e       	mov	r15, r31
     9c2:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9c4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <rand>
     9c8:	fe 01       	movw	r30, r28
     9ca:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9cc:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9ce:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9d0:	28 17       	cp	r18, r24
     9d2:	a9 f0       	breq	.+42     	; 0x9fe <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9d4:	99 27       	eor	r25, r25
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	1f 92       	push	r1
     9dc:	2f 93       	push	r18
     9de:	df 93       	push	r29
     9e0:	cf 93       	push	r28
     9e2:	ff 92       	push	r15
     9e4:	ef 92       	push	r14
     9e6:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
			write_errors++;
     9ea:	0f 5f       	subi	r16, 0xFF	; 255
     9ec:	1f 4f       	sbci	r17, 0xFF	; 255
     9ee:	8d b7       	in	r24, 0x3d	; 61
     9f0:	9e b7       	in	r25, 0x3e	; 62
     9f2:	08 96       	adiw	r24, 0x08	; 8
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	9e bf       	out	0x3e, r25	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9fe:	21 96       	adiw	r28, 0x01	; 1
     a00:	c1 15       	cp	r28, r1
     a02:	98 e0       	ldi	r25, 0x08	; 8
     a04:	d9 07       	cpc	r29, r25
     a06:	f1 f6       	brne	.-68     	; 0x9c4 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     a08:	c6 01       	movw	r24, r12
     a0a:	0e 94 41 0b 	call	0x1682	; 0x1682 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a0e:	c0 e0       	ldi	r28, 0x00	; 0
     a10:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a12:	e1 2c       	mov	r14, r1
     a14:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a16:	0f 2e       	mov	r0, r31
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	cf 2e       	mov	r12, r31
     a1c:	f2 e0       	ldi	r31, 0x02	; 2
     a1e:	df 2e       	mov	r13, r31
     a20:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a22:	0e 94 3c 0b 	call	0x1678	; 0x1678 <rand>
     a26:	fe 01       	movw	r30, r28
     a28:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a2a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a2c:	28 17       	cp	r18, r24
     a2e:	b1 f0       	breq	.+44     	; 0xa5c <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a30:	99 27       	eor	r25, r25
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	1f 92       	push	r1
     a38:	2f 93       	push	r18
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	df 92       	push	r13
     a40:	cf 92       	push	r12
     a42:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
			retrieval_errors++;
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	e8 1a       	sub	r14, r24
     a4a:	f8 0a       	sbc	r15, r24
     a4c:	8d b7       	in	r24, 0x3d	; 61
     a4e:	9e b7       	in	r25, 0x3e	; 62
     a50:	08 96       	adiw	r24, 0x08	; 8
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	9e bf       	out	0x3e, r25	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a5c:	21 96       	adiw	r28, 0x01	; 1
     a5e:	c1 15       	cp	r28, r1
     a60:	98 e0       	ldi	r25, 0x08	; 8
     a62:	d9 07       	cpc	r29, r25
     a64:	f1 f6       	brne	.-68     	; 0xa22 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     a66:	ff 92       	push	r15
     a68:	ef 92       	push	r14
     a6a:	1f 93       	push	r17
     a6c:	0f 93       	push	r16
     a6e:	82 e4       	ldi	r24, 0x42	; 66
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	9f 93       	push	r25
     a74:	8f 93       	push	r24
     a76:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <initalize>:



void initalize(void){
	
	init_UART(UBBR);
     a98:	8f e1       	ldi	r24, 0x1F	; 31
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 cc 08 	call	0x1198	; 0x1198 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     aa0:	89 e9       	ldi	r24, 0x99	; 153
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	82 ea       	ldi	r24, 0xA2	; 162
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	8e ea       	ldi	r24, 0xAE	; 174
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	83 eb       	ldi	r24, 0xB3	; 179
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     ac4:	85 b7       	in	r24, 0x35	; 53
     ac6:	80 68       	ori	r24, 0x80	; 128
     ac8:	85 bf       	out	0x35, r24	; 53
	
	
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     aca:	80 b7       	in	r24, 0x30	; 48
     acc:	80 62       	ori	r24, 0x20	; 32
     ace:	80 bf       	out	0x30, r24	; 48
	
	oled_ini();
     ad0:	0e 94 ff 07 	call	0xffe	; 0xffe <oled_ini>
	initialize_menu();
     ad4:	0e 94 94 05 	call	0xb28	; 0xb28 <initialize_menu>
	
	initialize_control_input();
     ad8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <initialize_control_input>
	printf("control input successfully initialized\n\n");
     adc:	89 ef       	ldi	r24, 0xF9	; 249
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <puts>
	SRAM_test();
     ae4:	0e 94 c7 04 	call	0x98e	; 0x98e <SRAM_test>
	printf("SRAM successfully initialized\n");
     ae8:	81 e2       	ldi	r24, 0x21	; 33
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	0e 94 b2 0b 	call	0x1764	; 0x1764 <puts>
	initalize_interrupts();
     af0:	0e 94 2f 02 	call	0x45e	; 0x45e <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     af4:	8f e3       	ldi	r24, 0x3F	; 63
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <puts>
	printf("Interrupts activated\n");
     afc:	83 e6       	ldi	r24, 0x63	; 99
     afe:	93 e0       	ldi	r25, 0x03	; 3
     b00:	0e 94 b2 0b 	call	0x1764	; 0x1764 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     b04:	88 e7       	ldi	r24, 0x78	; 120
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 b2 0b 	call	0x1764	; 0x1764 <puts>
     b0c:	8d b7       	in	r24, 0x3d	; 61
     b0e:	9e b7       	in	r25, 0x3e	; 62
     b10:	08 96       	adiw	r24, 0x08	; 8
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	9e bf       	out	0x3e, r25	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	8d bf       	out	0x3d, r24	; 61
     b1c:	08 95       	ret

00000b1e <main>:
#include "menu.h"

int main(void)
{
	
	initalize();	
     b1e:	0e 94 4c 05 	call	0xa98	; 0xa98 <initalize>
	
	while(1){
		
		
		menu_update();
     b22:	0e 94 44 07 	call	0xe88	; 0xe88 <menu_update>
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <main+0x4>

00000b28 <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b2c:	ce e0       	ldi	r28, 0x0E	; 14
     b2e:	d4 e0       	ldi	r29, 0x04	; 4
     b30:	d0 93 f5 03 	sts	0x03F5, r29
     b34:	c0 93 f4 03 	sts	0x03F4, r28
	new_menu->ptr_child = ptr_child;
     b38:	10 92 f7 03 	sts	0x03F7, r1
     b3c:	10 92 f6 03 	sts	0x03F6, r1
	new_menu->ptr_parent = ptr_parent;
     b40:	10 92 f9 03 	sts	0x03F9, r1
     b44:	10 92 f8 03 	sts	0x03F8, r1
	
	new_menu->title = title;
     b48:	e0 ef       	ldi	r30, 0xF0	; 240
     b4a:	f3 e0       	ldi	r31, 0x03	; 3
     b4c:	88 eb       	ldi	r24, 0xB8	; 184
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	91 83       	std	Z+1, r25	; 0x01
     b52:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	90 93 f3 03 	sts	0x03F3, r25
     b5c:	80 93 f2 03 	sts	0x03F2, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b60:	26 ec       	ldi	r18, 0xC6	; 198
     b62:	33 e0       	ldi	r19, 0x03	; 3
     b64:	30 93 13 04 	sts	0x0413, r19
     b68:	20 93 12 04 	sts	0x0412, r18
	new_menu->ptr_child = ptr_child;
     b6c:	6a ef       	ldi	r22, 0xFA	; 250
     b6e:	73 e0       	ldi	r23, 0x03	; 3
     b70:	70 93 15 04 	sts	0x0415, r23
     b74:	60 93 14 04 	sts	0x0414, r22
	new_menu->ptr_parent = ptr_parent;
     b78:	10 92 17 04 	sts	0x0417, r1
     b7c:	10 92 16 04 	sts	0x0416, r1
	
	new_menu->title = title;
     b80:	4c ea       	ldi	r20, 0xAC	; 172
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	59 83       	std	Y+1, r21	; 0x01
     b86:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     b88:	90 93 11 04 	sts	0x0411, r25
     b8c:	80 93 10 04 	sts	0x0410, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b90:	f0 93 cb 03 	sts	0x03CB, r31
     b94:	e0 93 ca 03 	sts	0x03CA, r30
	new_menu->ptr_child = ptr_child;
     b98:	cc ed       	ldi	r28, 0xDC	; 220
     b9a:	d3 e0       	ldi	r29, 0x03	; 3
     b9c:	d0 93 cd 03 	sts	0x03CD, r29
     ba0:	c0 93 cc 03 	sts	0x03CC, r28
	new_menu->ptr_parent = ptr_parent;
     ba4:	10 92 cf 03 	sts	0x03CF, r1
     ba8:	10 92 ce 03 	sts	0x03CE, r1
	
	new_menu->title = title;
     bac:	40 ea       	ldi	r20, 0xA0	; 160
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	d9 01       	movw	r26, r18
     bb2:	4d 93       	st	X+, r20
     bb4:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     bb6:	90 93 c9 03 	sts	0x03C9, r25
     bba:	80 93 c8 03 	sts	0x03C8, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     bbe:	26 ee       	ldi	r18, 0xE6	; 230
     bc0:	33 e0       	ldi	r19, 0x03	; 3
     bc2:	30 93 e1 03 	sts	0x03E1, r19
     bc6:	20 93 e0 03 	sts	0x03E0, r18
	new_menu->ptr_child = ptr_child;
     bca:	10 92 e3 03 	sts	0x03E3, r1
     bce:	10 92 e2 03 	sts	0x03E2, r1
	new_menu->ptr_parent = ptr_parent;
     bd2:	f0 93 e5 03 	sts	0x03E5, r31
     bd6:	e0 93 e4 03 	sts	0x03E4, r30
	
	new_menu->title = title;
     bda:	84 e9       	ldi	r24, 0x94	; 148
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	99 83       	std	Y+1, r25	; 0x01
     be0:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 df 03 	sts	0x03DF, r25
     bea:	80 93 de 03 	sts	0x03DE, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     bee:	d0 93 eb 03 	sts	0x03EB, r29
     bf2:	c0 93 ea 03 	sts	0x03EA, r28
	new_menu->ptr_child = ptr_child;
     bf6:	10 92 ed 03 	sts	0x03ED, r1
     bfa:	10 92 ec 03 	sts	0x03EC, r1
	new_menu->ptr_parent = ptr_parent;
     bfe:	f0 93 ef 03 	sts	0x03EF, r31
     c02:	e0 93 ee 03 	sts	0x03EE, r30
	
	new_menu->title = title;
     c06:	48 e8       	ldi	r20, 0x88	; 136
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	d9 01       	movw	r26, r18
     c0c:	4d 93       	st	X+, r20
     c0e:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     c10:	90 93 e9 03 	sts	0x03E9, r25
     c14:	80 93 e8 03 	sts	0x03E8, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c18:	c4 e0       	ldi	r28, 0x04	; 4
     c1a:	d4 e0       	ldi	r29, 0x04	; 4
     c1c:	d0 93 ff 03 	sts	0x03FF, r29
     c20:	c0 93 fe 03 	sts	0x03FE, r28
	new_menu->ptr_child = ptr_child;
     c24:	10 92 01 04 	sts	0x0401, r1
     c28:	10 92 00 04 	sts	0x0400, r1
	new_menu->ptr_parent = ptr_parent;
     c2c:	f0 93 03 04 	sts	0x0403, r31
     c30:	e0 93 02 04 	sts	0x0402, r30
	
	new_menu->title = title;
     c34:	2c e7       	ldi	r18, 0x7C	; 124
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	db 01       	movw	r26, r22
     c3a:	2d 93       	st	X+, r18
     c3c:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     c3e:	90 93 fd 03 	sts	0x03FD, r25
     c42:	80 93 fc 03 	sts	0x03FC, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c46:	70 93 09 04 	sts	0x0409, r23
     c4a:	60 93 08 04 	sts	0x0408, r22
	new_menu->ptr_child = ptr_child;
     c4e:	10 92 0b 04 	sts	0x040B, r1
     c52:	10 92 0a 04 	sts	0x040A, r1
	new_menu->ptr_parent = ptr_parent;
     c56:	f0 93 0d 04 	sts	0x040D, r31
     c5a:	e0 93 0c 04 	sts	0x040C, r30
	
	new_menu->title = title;
     c5e:	20 e7       	ldi	r18, 0x70	; 112
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	39 83       	std	Y+1, r19	; 0x01
     c64:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     c66:	90 93 07 04 	sts	0x0407, r25
     c6a:	80 93 06 04 	sts	0x0406, r24
	
	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	
	current_head = &mainmenu_0;
     c6e:	f0 93 c3 03 	sts	0x03C3, r31
     c72:	e0 93 c2 03 	sts	0x03C2, r30
	current_selected = &mainmenu_0;
     c76:	f0 93 c5 03 	sts	0x03C5, r31
     c7a:	e0 93 c4 03 	sts	0x03C4, r30
	
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <navigate_menu>:
}

int x = 0;
int y = 0;

int navigate_menu(void){
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
	int joystick_reading = read_control_input('Y');
     c88:	89 e5       	ldi	r24, 0x59	; 89
     c8a:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
	if(joystick_reading > NAVIGATION_TRHESHOLD && y <= NAVIGATION_TRHESHOLD){
     c8e:	83 33       	cpi	r24, 0x33	; 51
     c90:	91 05       	cpc	r25, r1
     c92:	5c f1       	brlt	.+86     	; 0xcea <navigate_menu+0x66>
     c94:	20 91 be 03 	lds	r18, 0x03BE
     c98:	30 91 bf 03 	lds	r19, 0x03BF
     c9c:	23 33       	cpi	r18, 0x33	; 51
     c9e:	31 05       	cpc	r19, r1
     ca0:	24 f5       	brge	.+72     	; 0xcea <navigate_menu+0x66>
		for(int i = 0; i < current_selected->n_sib-1; i++){
     ca2:	e0 91 c4 03 	lds	r30, 0x03C4
     ca6:	f0 91 c5 03 	lds	r31, 0x03C5
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	18 16       	cp	r1, r24
     cb2:	19 06       	cpc	r1, r25
     cb4:	8c f4       	brge	.+34     	; 0xcd8 <navigate_menu+0x54>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
     cba:	04 80       	ldd	r0, Z+4	; 0x04
     cbc:	f5 81       	ldd	r31, Z+5	; 0x05
     cbe:	e0 2d       	mov	r30, r0
int y = 0;

int navigate_menu(void){
	int joystick_reading = read_control_input('Y');
	if(joystick_reading > NAVIGATION_TRHESHOLD && y <= NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	22 81       	ldd	r18, Z+2	; 0x02
     cc4:	33 81       	ldd	r19, Z+3	; 0x03
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	31 09       	sbc	r19, r1
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	ac f3       	brlt	.-22     	; 0xcba <navigate_menu+0x36>
     cd0:	f0 93 c5 03 	sts	0x03C5, r31
     cd4:	e0 93 c4 03 	sts	0x03C4, r30
			current_selected = current_selected->ptr_sib_down;
		}
		y = 100;
     cd8:	84 e6       	ldi	r24, 0x64	; 100
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	90 93 bf 03 	sts	0x03BF, r25
     ce0:	80 93 be 03 	sts	0x03BE, r24
		return 1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	cc c0       	rjmp	.+408    	; 0xe82 <navigate_menu+0x1fe>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && y >= -NAVIGATION_TRHESHOLD)
     cea:	8e 3c       	cpi	r24, 0xCE	; 206
     cec:	2f ef       	ldi	r18, 0xFF	; 255
     cee:	92 07       	cpc	r25, r18
     cf0:	d4 f4       	brge	.+52     	; 0xd26 <navigate_menu+0xa2>
     cf2:	20 91 be 03 	lds	r18, 0x03BE
     cf6:	30 91 bf 03 	lds	r19, 0x03BF
     cfa:	2e 3c       	cpi	r18, 0xCE	; 206
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	9c f0       	brlt	.+38     	; 0xd26 <navigate_menu+0xa2>
	{
		current_selected = current_selected->ptr_sib_down;
     d00:	e0 91 c4 03 	lds	r30, 0x03C4
     d04:	f0 91 c5 03 	lds	r31, 0x03C5
     d08:	84 81       	ldd	r24, Z+4	; 0x04
     d0a:	95 81       	ldd	r25, Z+5	; 0x05
     d0c:	90 93 c5 03 	sts	0x03C5, r25
     d10:	80 93 c4 03 	sts	0x03C4, r24
		y = -100;
     d14:	8c e9       	ldi	r24, 0x9C	; 156
     d16:	9f ef       	ldi	r25, 0xFF	; 255
     d18:	90 93 bf 03 	sts	0x03BF, r25
     d1c:	80 93 be 03 	sts	0x03BE, r24
		return 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	ae c0       	rjmp	.+348    	; 0xe82 <navigate_menu+0x1fe>
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
     d26:	c1 96       	adiw	r24, 0x31	; 49
     d28:	83 36       	cpi	r24, 0x63	; 99
     d2a:	91 05       	cpc	r25, r1
     d2c:	20 f4       	brcc	.+8      	; 0xd36 <navigate_menu+0xb2>
		y = 0;
     d2e:	10 92 bf 03 	sts	0x03BF, r1
     d32:	10 92 be 03 	sts	0x03BE, r1
	}
	
	
	joystick_reading = read_control_input('X');
     d36:	88 e5       	ldi	r24, 0x58	; 88
     d38:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
	if(joystick_reading > NAVIGATION_TRHESHOLD && x <= NAVIGATION_TRHESHOLD){
     d3c:	83 33       	cpi	r24, 0x33	; 51
     d3e:	91 05       	cpc	r25, r1
     d40:	0c f4       	brge	.+2      	; 0xd44 <navigate_menu+0xc0>
     d42:	6b c0       	rjmp	.+214    	; 0xe1a <navigate_menu+0x196>
     d44:	20 91 c0 03 	lds	r18, 0x03C0
     d48:	30 91 c1 03 	lds	r19, 0x03C1
     d4c:	23 33       	cpi	r18, 0x33	; 51
     d4e:	31 05       	cpc	r19, r1
     d50:	0c f0       	brlt	.+2      	; 0xd54 <navigate_menu+0xd0>
     d52:	63 c0       	rjmp	.+198    	; 0xe1a <navigate_menu+0x196>
		if(current_selected->ptr_child != NULL){
     d54:	e0 91 c4 03 	lds	r30, 0x03C4
     d58:	f0 91 c5 03 	lds	r31, 0x03C5
     d5c:	86 81       	ldd	r24, Z+6	; 0x06
     d5e:	97 81       	ldd	r25, Z+7	; 0x07
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	49 f0       	breq	.+18     	; 0xd76 <navigate_menu+0xf2>
			current_head = current_selected->ptr_child;
     d64:	90 93 c3 03 	sts	0x03C3, r25
     d68:	80 93 c2 03 	sts	0x03C2, r24
			current_selected = current_selected->ptr_child;
     d6c:	90 93 c5 03 	sts	0x03C5, r25
     d70:	80 93 c4 03 	sts	0x03C4, r24
     d74:	49 c0       	rjmp	.+146    	; 0xe08 <navigate_menu+0x184>
		}else{
			strcpy_P(temp,current_selected->title);
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	80 ed       	ldi	r24, 0xD0	; 208
     d7c:	93 e0       	ldi	r25, 0x03	; 3
     d7e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <strcpy_P>
			printf("running function %s\n",temp);
     d82:	80 ed       	ldi	r24, 0xD0	; 208
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	9f 93       	push	r25
     d88:	8f 93       	push	r24
     d8a:	81 e9       	ldi	r24, 0x91	; 145
     d8c:	93 e0       	ldi	r25, 0x03	; 3
     d8e:	9f 93       	push	r25
     d90:	8f 93       	push	r24
     d92:	0e 94 9e 0b 	call	0x173c	; 0x173c <printf>
			
			// function calls
			if(current_selected == &mainmenu_0){ // mainmenu->highscore
     d96:	80 91 c4 03 	lds	r24, 0x03C4
     d9a:	90 91 c5 03 	lds	r25, 0x03C5
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	23 e0       	ldi	r18, 0x03	; 3
     da8:	80 3f       	cpi	r24, 0xF0	; 240
     daa:	92 07       	cpc	r25, r18
     dac:	c9 f4       	brne	.+50     	; 0xde0 <navigate_menu+0x15c>
				oled_reset();
     dae:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <oled_reset>
				for (unsigned int j = 0; j < 3; j++)
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	d0 e0       	ldi	r29, 0x00	; 0
				{
					oled_goto_line(j);
     db6:	ce 01       	movw	r24, r28
     db8:	0e 94 c4 07 	call	0xf88	; 0xf88 <oled_goto_line>
					oled_print_char(0x31+j);
     dbc:	8c 2f       	mov	r24, r28
     dbe:	8f 5c       	subi	r24, 0xCF	; 207
     dc0:	0e 94 98 08 	call	0x1130	; 0x1130 <oled_print_char>
					oled_print(" Highscore");
     dc4:	86 ea       	ldi	r24, 0xA6	; 166
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	0e 94 b8 08 	call	0x1170	; 0x1170 <oled_print>
			printf("running function %s\n",temp);
			
			// function calls
			if(current_selected == &mainmenu_0){ // mainmenu->highscore
				oled_reset();
				for (unsigned int j = 0; j < 3; j++)
     dcc:	21 96       	adiw	r28, 0x01	; 1
     dce:	c3 30       	cpi	r28, 0x03	; 3
     dd0:	d1 05       	cpc	r29, r1
     dd2:	89 f7       	brne	.-30     	; 0xdb6 <navigate_menu+0x132>
					oled_goto_line(j);
					oled_print_char(0x31+j);
					oled_print(" Highscore");
					
				}
				while(read_control_input('X') > NAVIGATION_TRHESHOLD){}	
     dd4:	88 e5       	ldi	r24, 0x58	; 88
     dd6:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     dda:	c3 97       	sbiw	r24, 0x33	; 51
     ddc:	dc f7       	brge	.-10     	; 0xdd4 <navigate_menu+0x150>
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <navigate_menu+0x184>
			}else if(current_selected == &option_1){ // mainmenu->option->contrast
     de0:	86 5e       	subi	r24, 0xE6	; 230
     de2:	93 40       	sbci	r25, 0x03	; 3
     de4:	89 f4       	brne	.+34     	; 0xe08 <navigate_menu+0x184>
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <navigate_menu+0x17a>
				while (read_control_input('X') > NAVIGATION_TRHESHOLD)
				{
					write_c(0x81);
     de8:	81 e8       	ldi	r24, 0x81	; 129
     dea:	0e 94 93 07 	call	0xf26	; 0xf26 <write_c>
					write_c(readADC(3)/2);
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 09 02 	call	0x412	; 0x412 <readADC>
     df6:	96 95       	lsr	r25
     df8:	87 95       	ror	r24
     dfa:	0e 94 93 07 	call	0xf26	; 0xf26 <write_c>
					oled_print(" Highscore");
					
				}
				while(read_control_input('X') > NAVIGATION_TRHESHOLD){}	
			}else if(current_selected == &option_1){ // mainmenu->option->contrast
				while (read_control_input('X') > NAVIGATION_TRHESHOLD)
     dfe:	88 e5       	ldi	r24, 0x58	; 88
     e00:	0e 94 c4 03 	call	0x788	; 0x788 <read_control_input>
     e04:	c3 97       	sbiw	r24, 0x33	; 51
     e06:	84 f7       	brge	.-32     	; 0xde8 <navigate_menu+0x164>
					write_c(0x81);
					write_c(readADC(3)/2);
				}
			}
		}
		x = 100;
     e08:	84 e6       	ldi	r24, 0x64	; 100
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	90 93 c1 03 	sts	0x03C1, r25
     e10:	80 93 c0 03 	sts	0x03C0, r24
		return 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	34 c0       	rjmp	.+104    	; 0xe82 <navigate_menu+0x1fe>
		
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && x >= -NAVIGATION_TRHESHOLD)
     e1a:	8e 3c       	cpi	r24, 0xCE	; 206
     e1c:	2f ef       	ldi	r18, 0xFF	; 255
     e1e:	92 07       	cpc	r25, r18
     e20:	04 f5       	brge	.+64     	; 0xe62 <navigate_menu+0x1de>
     e22:	20 91 c0 03 	lds	r18, 0x03C0
     e26:	30 91 c1 03 	lds	r19, 0x03C1
     e2a:	2e 3c       	cpi	r18, 0xCE	; 206
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	cc f0       	brlt	.+50     	; 0xe62 <navigate_menu+0x1de>
	{
		if(current_selected->ptr_parent != NULL){
     e30:	e0 91 c4 03 	lds	r30, 0x03C4
     e34:	f0 91 c5 03 	lds	r31, 0x03C5
     e38:	80 85       	ldd	r24, Z+8	; 0x08
     e3a:	91 85       	ldd	r25, Z+9	; 0x09
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	e1 f0       	breq	.+56     	; 0xe78 <navigate_menu+0x1f4>
			current_head = current_selected->ptr_parent;
     e40:	90 93 c3 03 	sts	0x03C3, r25
     e44:	80 93 c2 03 	sts	0x03C2, r24
			current_selected = current_selected->ptr_parent;
     e48:	90 93 c5 03 	sts	0x03C5, r25
     e4c:	80 93 c4 03 	sts	0x03C4, r24
			x = -100;
     e50:	8c e9       	ldi	r24, 0x9C	; 156
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	90 93 c1 03 	sts	0x03C1, r25
     e58:	80 93 c0 03 	sts	0x03C0, r24
			return 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	10 c0       	rjmp	.+32     	; 0xe82 <navigate_menu+0x1fe>
		}
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
     e62:	c1 96       	adiw	r24, 0x31	; 49
     e64:	83 36       	cpi	r24, 0x63	; 99
     e66:	91 05       	cpc	r25, r1
     e68:	50 f4       	brcc	.+20     	; 0xe7e <navigate_menu+0x1fa>
		x = 0;
     e6a:	10 92 c1 03 	sts	0x03C1, r1
     e6e:	10 92 c0 03 	sts	0x03C0, r1
	}
	
	return 0;
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <navigate_menu+0x1fe>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <navigate_menu+0x1fe>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <menu_update>:
	current_selected = &mainmenu_0;
	
}
	

void menu_update(void){
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
	if(navigate_menu()){
     e90:	0e 94 42 06 	call	0xc84	; 0xc84 <navigate_menu>
     e94:	89 2b       	or	r24, r25
     e96:	09 f4       	brne	.+2      	; 0xe9a <menu_update+0x12>
     e98:	41 c0       	rjmp	.+130    	; 0xf1c <menu_update+0x94>
		oled_reset();
     e9a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <oled_reset>
		for (int i = 0; i < current_head->n_sib; i++)
     e9e:	e0 91 c2 03 	lds	r30, 0x03C2
     ea2:	f0 91 c3 03 	lds	r31, 0x03C3
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	18 16       	cp	r1, r24
     eac:	19 06       	cpc	r1, r25
     eae:	b4 f5       	brge	.+108    	; 0xf1c <menu_update+0x94>
     eb0:	c0 e0       	ldi	r28, 0x00	; 0
     eb2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			oled_goto_line(i);
			
			strcpy_P(temp,current_head->title);
			oled_print_char(128 + (current_head == current_selected));
     eb4:	10 e8       	ldi	r17, 0x80	; 128
     eb6:	01 e8       	ldi	r16, 0x81	; 129
void menu_update(void){
	if(navigate_menu()){
		oled_reset();
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
     eb8:	ce 01       	movw	r24, r28
     eba:	0e 94 c4 07 	call	0xf88	; 0xf88 <oled_goto_line>
			
			strcpy_P(temp,current_head->title);
     ebe:	e0 91 c2 03 	lds	r30, 0x03C2
     ec2:	f0 91 c3 03 	lds	r31, 0x03C3
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	80 ed       	ldi	r24, 0xD0	; 208
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	0e 94 4c 0b 	call	0x1698	; 0x1698 <strcpy_P>
			oled_print_char(128 + (current_head == current_selected));
     ed2:	20 91 c2 03 	lds	r18, 0x03C2
     ed6:	30 91 c3 03 	lds	r19, 0x03C3
     eda:	80 91 c4 03 	lds	r24, 0x03C4
     ede:	90 91 c5 03 	lds	r25, 0x03C5
     ee2:	28 17       	cp	r18, r24
     ee4:	39 07       	cpc	r19, r25
     ee6:	11 f4       	brne	.+4      	; 0xeec <menu_update+0x64>
     ee8:	80 2f       	mov	r24, r16
     eea:	01 c0       	rjmp	.+2      	; 0xeee <menu_update+0x66>
     eec:	81 2f       	mov	r24, r17
     eee:	0e 94 98 08 	call	0x1130	; 0x1130 <oled_print_char>
			oled_print(temp);
     ef2:	80 ed       	ldi	r24, 0xD0	; 208
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	0e 94 b8 08 	call	0x1170	; 0x1170 <oled_print>
			current_head = current_head->ptr_sib_down;
     efa:	e0 91 c2 03 	lds	r30, 0x03C2
     efe:	f0 91 c3 03 	lds	r31, 0x03C3
     f02:	04 80       	ldd	r0, Z+4	; 0x04
     f04:	f5 81       	ldd	r31, Z+5	; 0x05
     f06:	e0 2d       	mov	r30, r0
     f08:	f0 93 c3 03 	sts	0x03C3, r31
     f0c:	e0 93 c2 03 	sts	0x03C2, r30
	

void menu_update(void){
	if(navigate_menu()){
		oled_reset();
		for (int i = 0; i < current_head->n_sib; i++)
     f10:	21 96       	adiw	r28, 0x01	; 1
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	c8 17       	cp	r28, r24
     f18:	d9 07       	cpc	r29, r25
     f1a:	74 f2       	brlt	.-100    	; 0xeb8 <menu_update+0x30>
			oled_print(temp);
			current_head = current_head->ptr_sib_down;
			
		}
	}	
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	08 95       	ret

00000f26 <write_c>:

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     f26:	e0 91 0c 01 	lds	r30, 0x010C
     f2a:	f0 91 0d 01 	lds	r31, 0x010D
     f2e:	80 83       	st	Z, r24
     f30:	08 95       	ret

00000f32 <oled_home>:
	}
}

void oled_home(void)
{
	page = 0;
     f32:	10 92 1b 04 	sts	0x041B, r1
     f36:	10 92 1a 04 	sts	0x041A, r1
	col = 0;
     f3a:	10 92 19 04 	sts	0x0419, r1
     f3e:	10 92 18 04 	sts	0x0418, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     f42:	e0 91 0c 01 	lds	r30, 0x010C
     f46:	f0 91 0d 01 	lds	r31, 0x010D
     f4a:	81 e2       	ldi	r24, 0x21	; 33
     f4c:	80 83       	st	Z, r24
     f4e:	e0 91 0c 01 	lds	r30, 0x010C
     f52:	f0 91 0d 01 	lds	r31, 0x010D
     f56:	10 82       	st	Z, r1
     f58:	e0 91 0c 01 	lds	r30, 0x010C
     f5c:	f0 91 0d 01 	lds	r31, 0x010D
     f60:	8f e7       	ldi	r24, 0x7F	; 127
     f62:	80 83       	st	Z, r24
     f64:	e0 91 0c 01 	lds	r30, 0x010C
     f68:	f0 91 0d 01 	lds	r31, 0x010D
     f6c:	82 e2       	ldi	r24, 0x22	; 34
     f6e:	80 83       	st	Z, r24
     f70:	e0 91 0c 01 	lds	r30, 0x010C
     f74:	f0 91 0d 01 	lds	r31, 0x010D
     f78:	10 82       	st	Z, r1
     f7a:	e0 91 0c 01 	lds	r30, 0x010C
     f7e:	f0 91 0d 01 	lds	r31, 0x010D
     f82:	87 e0       	ldi	r24, 0x07	; 7
     f84:	80 83       	st	Z, r24
     f86:	08 95       	ret

00000f88 <oled_goto_line>:
	
	//write_c(0x00);
	//write_c(0x10);
}

void oled_goto_line(unsigned int line){
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
	oled_home();
     f8e:	0e 94 99 07 	call	0xf32	; 0xf32 <oled_home>
	page = line;
     f92:	d0 93 1b 04 	sts	0x041B, r29
     f96:	c0 93 1a 04 	sts	0x041A, r28
	if(line < 8){
     f9a:	c8 30       	cpi	r28, 0x08	; 8
     f9c:	d1 05       	cpc	r29, r1
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <oled_goto_line+0x3a>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     fa0:	e0 91 0c 01 	lds	r30, 0x010C
     fa4:	f0 91 0d 01 	lds	r31, 0x010D
     fa8:	10 82       	st	Z, r1
     faa:	e0 91 0c 01 	lds	r30, 0x010C
     fae:	f0 91 0d 01 	lds	r31, 0x010D
     fb2:	80 e1       	ldi	r24, 0x10	; 16
     fb4:	80 83       	st	Z, r24
	oled_home();
	page = line;
	if(line < 8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
     fb6:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     fb8:	e0 91 0c 01 	lds	r30, 0x010C
     fbc:	f0 91 0d 01 	lds	r31, 0x010D
     fc0:	c0 83       	st	Z, r28
	if(line < 8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <oled_clear_line>:
		printf("parameter too big, oled_goto_column\n");
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
     fc8:	08 97       	sbiw	r24, 0x08	; 8
     fca:	50 f4       	brcc	.+20     	; 0xfe0 <oled_clear_line+0x18>
     fcc:	80 e8       	ldi	r24, 0x80	; 128
     fce:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
     fd0:	e0 91 0a 01 	lds	r30, 0x010A
     fd4:	f0 91 0b 01 	lds	r31, 0x010B
     fd8:	10 82       	st	Z, r1
     fda:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	c1 f7       	brne	.-16     	; 0xfd0 <oled_clear_line+0x8>
     fe0:	08 95       	ret

00000fe2 <oled_reset>:

}


void oled_reset(void)
{		
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
     fe6:	c0 e0       	ldi	r28, 0x00	; 0
     fe8:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
     ff0:	21 96       	adiw	r28, 0x01	; 1
     ff2:	c8 30       	cpi	r28, 0x08	; 8
     ff4:	d1 05       	cpc	r29, r1
     ff6:	c9 f7       	brne	.-14     	; 0xfea <oled_reset+0x8>
		oled_clear_line(i);
	}
}
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <oled_ini>:
}

void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
     ffe:	85 b7       	in	r24, 0x35	; 53
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1004:	80 b7       	in	r24, 0x30	; 48
    1006:	80 62       	ori	r24, 0x20	; 32
    1008:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    100a:	e0 91 0c 01 	lds	r30, 0x010C
    100e:	f0 91 0d 01 	lds	r31, 0x010D
    1012:	8e ea       	ldi	r24, 0xAE	; 174
    1014:	80 83       	st	Z, r24
    1016:	e0 91 0c 01 	lds	r30, 0x010C
    101a:	f0 91 0d 01 	lds	r31, 0x010D
    101e:	81 ea       	ldi	r24, 0xA1	; 161
    1020:	80 83       	st	Z, r24
    1022:	e0 91 0c 01 	lds	r30, 0x010C
    1026:	f0 91 0d 01 	lds	r31, 0x010D
    102a:	8a ed       	ldi	r24, 0xDA	; 218
    102c:	80 83       	st	Z, r24
    102e:	e0 91 0c 01 	lds	r30, 0x010C
    1032:	f0 91 0d 01 	lds	r31, 0x010D
    1036:	82 e1       	ldi	r24, 0x12	; 18
    1038:	80 83       	st	Z, r24
    103a:	e0 91 0c 01 	lds	r30, 0x010C
    103e:	f0 91 0d 01 	lds	r31, 0x010D
    1042:	88 ec       	ldi	r24, 0xC8	; 200
    1044:	80 83       	st	Z, r24
    1046:	e0 91 0c 01 	lds	r30, 0x010C
    104a:	f0 91 0d 01 	lds	r31, 0x010D
    104e:	88 ea       	ldi	r24, 0xA8	; 168
    1050:	80 83       	st	Z, r24
    1052:	e0 91 0c 01 	lds	r30, 0x010C
    1056:	f0 91 0d 01 	lds	r31, 0x010D
    105a:	8f e3       	ldi	r24, 0x3F	; 63
    105c:	80 83       	st	Z, r24
    105e:	e0 91 0c 01 	lds	r30, 0x010C
    1062:	f0 91 0d 01 	lds	r31, 0x010D
    1066:	85 ed       	ldi	r24, 0xD5	; 213
    1068:	80 83       	st	Z, r24
    106a:	e0 91 0c 01 	lds	r30, 0x010C
    106e:	f0 91 0d 01 	lds	r31, 0x010D
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	80 83       	st	Z, r24
    1076:	e0 91 0c 01 	lds	r30, 0x010C
    107a:	f0 91 0d 01 	lds	r31, 0x010D
    107e:	81 e8       	ldi	r24, 0x81	; 129
    1080:	80 83       	st	Z, r24
    1082:	e0 91 0c 01 	lds	r30, 0x010C
    1086:	f0 91 0d 01 	lds	r31, 0x010D
    108a:	80 e5       	ldi	r24, 0x50	; 80
    108c:	80 83       	st	Z, r24
    108e:	e0 91 0c 01 	lds	r30, 0x010C
    1092:	f0 91 0d 01 	lds	r31, 0x010D
    1096:	89 ed       	ldi	r24, 0xD9	; 217
    1098:	80 83       	st	Z, r24
    109a:	e0 91 0c 01 	lds	r30, 0x010C
    109e:	f0 91 0d 01 	lds	r31, 0x010D
    10a2:	81 e2       	ldi	r24, 0x21	; 33
    10a4:	80 83       	st	Z, r24
    10a6:	e0 91 0c 01 	lds	r30, 0x010C
    10aa:	f0 91 0d 01 	lds	r31, 0x010D
    10ae:	80 e2       	ldi	r24, 0x20	; 32
    10b0:	80 83       	st	Z, r24
    10b2:	e0 91 0c 01 	lds	r30, 0x010C
    10b6:	f0 91 0d 01 	lds	r31, 0x010D
    10ba:	10 82       	st	Z, r1
    10bc:	e0 91 0c 01 	lds	r30, 0x010C
    10c0:	f0 91 0d 01 	lds	r31, 0x010D
    10c4:	8b ed       	ldi	r24, 0xDB	; 219
    10c6:	80 83       	st	Z, r24
    10c8:	e0 91 0c 01 	lds	r30, 0x010C
    10cc:	f0 91 0d 01 	lds	r31, 0x010D
    10d0:	80 e3       	ldi	r24, 0x30	; 48
    10d2:	80 83       	st	Z, r24
    10d4:	e0 91 0c 01 	lds	r30, 0x010C
    10d8:	f0 91 0d 01 	lds	r31, 0x010D
    10dc:	8d ea       	ldi	r24, 0xAD	; 173
    10de:	80 83       	st	Z, r24
    10e0:	e0 91 0c 01 	lds	r30, 0x010C
    10e4:	f0 91 0d 01 	lds	r31, 0x010D
    10e8:	10 82       	st	Z, r1
    10ea:	e0 91 0c 01 	lds	r30, 0x010C
    10ee:	f0 91 0d 01 	lds	r31, 0x010D
    10f2:	84 ea       	ldi	r24, 0xA4	; 164
    10f4:	80 83       	st	Z, r24
    10f6:	e0 91 0c 01 	lds	r30, 0x010C
    10fa:	f0 91 0d 01 	lds	r31, 0x010D
    10fe:	86 ea       	ldi	r24, 0xA6	; 166
    1100:	80 83       	st	Z, r24
    1102:	e0 91 0c 01 	lds	r30, 0x010C
    1106:	f0 91 0d 01 	lds	r31, 0x010D
    110a:	8f ea       	ldi	r24, 0xAF	; 175
    110c:	80 83       	st	Z, r24
    110e:	e0 91 0c 01 	lds	r30, 0x010C
    1112:	f0 91 0d 01 	lds	r31, 0x010D
    1116:	83 ed       	ldi	r24, 0xD3	; 211
    1118:	80 83       	st	Z, r24
    111a:	e0 91 0c 01 	lds	r30, 0x010C
    111e:	f0 91 0d 01 	lds	r31, 0x010D
    1122:	83 e6       	ldi	r24, 0x63	; 99
    1124:	80 83       	st	Z, r24
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	write_c(0xd3);			//offset fix on the screen
	write_c(0x63);			//value of the offset
	oled_reset();
    1126:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <oled_reset>
	oled_home();
    112a:	0e 94 99 07 	call	0xf32	; 0xf32 <oled_home>
    112e:	08 95       	ret

00001130 <oled_print_char>:

void oled_pos(unsigned int row,unsigned int column){
	
}
int oled_print_char(char letter){
	if(letter != '\0'){
    1130:	88 23       	and	r24, r24
    1132:	c1 f0       	breq	.+48     	; 0x1164 <oled_print_char+0x34>
    1134:	e8 2f       	mov	r30, r24
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	ec 53       	subi	r30, 0x3C	; 60
    1146:	f0 40       	sbci	r31, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
    114c:	a0 91 0a 01 	lds	r26, 0x010A
    1150:	b0 91 0b 01 	lds	r27, 0x010B
    1154:	24 91       	lpm	r18, Z
    1156:	2c 93       	st	X, r18
void oled_pos(unsigned int row,unsigned int column){
	
}
int oled_print_char(char letter){
	if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	31 96       	adiw	r30, 0x01	; 1
    115c:	88 30       	cpi	r24, 0x08	; 8
    115e:	91 05       	cpc	r25, r1
    1160:	a9 f7       	brne	.-22     	; 0x114c <oled_print_char+0x1c>
    1162:	03 c0       	rjmp	.+6      	; 0x116a <oled_print_char+0x3a>
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
	}else{
		return 0;	
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	08 95       	ret
int oled_print_char(char letter){
	if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 0;	
	}
}
    116e:	08 95       	ret

00001170 <oled_print>:
	}else{
		return 0;
	}
}

void oled_print(char* letters){
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (oled_print_char(letters[i++])){
    1176:	89 91       	ld	r24, Y+
    1178:	0e 94 98 08 	call	0x1130	; 0x1130 <oled_print_char>
    117c:	89 2b       	or	r24, r25
    117e:	d9 f7       	brne	.-10     	; 0x1176 <oled_print+0x6>
	}
}
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <send_UART>:
    1186:	5d 9b       	sbis	0x0b, 5	; 11
    1188:	fe cf       	rjmp	.-4      	; 0x1186 <send_UART>
    118a:	8c b9       	out	0x0c, r24	; 12
    118c:	08 95       	ret

0000118e <recieve_UART>:
    118e:	5f 9b       	sbis	0x0b, 7	; 11
    1190:	fe cf       	rjmp	.-4      	; 0x118e <recieve_UART>
    1192:	8c b1       	in	r24, 0x0c	; 12
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	08 95       	ret

00001198 <init_UART>:
    1198:	90 bd       	out	0x20, r25	; 32
    119a:	89 b9       	out	0x09, r24	; 9
    119c:	88 e1       	ldi	r24, 0x18	; 24
    119e:	8a b9       	out	0x0a, r24	; 10
    11a0:	67 ec       	ldi	r22, 0xC7	; 199
    11a2:	78 e0       	ldi	r23, 0x08	; 8
    11a4:	83 ec       	ldi	r24, 0xC3	; 195
    11a6:	98 e0       	ldi	r25, 0x08	; 8
    11a8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <fdevopen>
    11ac:	08 95       	ret

000011ae <__subsf3>:
    11ae:	50 58       	subi	r21, 0x80	; 128

000011b0 <__addsf3>:
    11b0:	bb 27       	eor	r27, r27
    11b2:	aa 27       	eor	r26, r26
    11b4:	0e d0       	rcall	.+28     	; 0x11d2 <__addsf3x>
    11b6:	4d c1       	rjmp	.+666    	; 0x1452 <__fp_round>
    11b8:	3e d1       	rcall	.+636    	; 0x1436 <__fp_pscA>
    11ba:	30 f0       	brcs	.+12     	; 0x11c8 <__addsf3+0x18>
    11bc:	43 d1       	rcall	.+646    	; 0x1444 <__fp_pscB>
    11be:	20 f0       	brcs	.+8      	; 0x11c8 <__addsf3+0x18>
    11c0:	31 f4       	brne	.+12     	; 0x11ce <__addsf3+0x1e>
    11c2:	9f 3f       	cpi	r25, 0xFF	; 255
    11c4:	11 f4       	brne	.+4      	; 0x11ca <__addsf3+0x1a>
    11c6:	1e f4       	brtc	.+6      	; 0x11ce <__addsf3+0x1e>
    11c8:	33 c1       	rjmp	.+614    	; 0x1430 <__fp_nan>
    11ca:	0e f4       	brtc	.+2      	; 0x11ce <__addsf3+0x1e>
    11cc:	e0 95       	com	r30
    11ce:	e7 fb       	bst	r30, 7
    11d0:	29 c1       	rjmp	.+594    	; 0x1424 <__fp_inf>

000011d2 <__addsf3x>:
    11d2:	e9 2f       	mov	r30, r25
    11d4:	4f d1       	rcall	.+670    	; 0x1474 <__fp_split3>
    11d6:	80 f3       	brcs	.-32     	; 0x11b8 <__addsf3+0x8>
    11d8:	ba 17       	cp	r27, r26
    11da:	62 07       	cpc	r22, r18
    11dc:	73 07       	cpc	r23, r19
    11de:	84 07       	cpc	r24, r20
    11e0:	95 07       	cpc	r25, r21
    11e2:	18 f0       	brcs	.+6      	; 0x11ea <__addsf3x+0x18>
    11e4:	71 f4       	brne	.+28     	; 0x1202 <__addsf3x+0x30>
    11e6:	9e f5       	brtc	.+102    	; 0x124e <__addsf3x+0x7c>
    11e8:	67 c1       	rjmp	.+718    	; 0x14b8 <__fp_zero>
    11ea:	0e f4       	brtc	.+2      	; 0x11ee <__addsf3x+0x1c>
    11ec:	e0 95       	com	r30
    11ee:	0b 2e       	mov	r0, r27
    11f0:	ba 2f       	mov	r27, r26
    11f2:	a0 2d       	mov	r26, r0
    11f4:	0b 01       	movw	r0, r22
    11f6:	b9 01       	movw	r22, r18
    11f8:	90 01       	movw	r18, r0
    11fa:	0c 01       	movw	r0, r24
    11fc:	ca 01       	movw	r24, r20
    11fe:	a0 01       	movw	r20, r0
    1200:	11 24       	eor	r1, r1
    1202:	ff 27       	eor	r31, r31
    1204:	59 1b       	sub	r21, r25
    1206:	99 f0       	breq	.+38     	; 0x122e <__addsf3x+0x5c>
    1208:	59 3f       	cpi	r21, 0xF9	; 249
    120a:	50 f4       	brcc	.+20     	; 0x1220 <__addsf3x+0x4e>
    120c:	50 3e       	cpi	r21, 0xE0	; 224
    120e:	68 f1       	brcs	.+90     	; 0x126a <__addsf3x+0x98>
    1210:	1a 16       	cp	r1, r26
    1212:	f0 40       	sbci	r31, 0x00	; 0
    1214:	a2 2f       	mov	r26, r18
    1216:	23 2f       	mov	r18, r19
    1218:	34 2f       	mov	r19, r20
    121a:	44 27       	eor	r20, r20
    121c:	58 5f       	subi	r21, 0xF8	; 248
    121e:	f3 cf       	rjmp	.-26     	; 0x1206 <__addsf3x+0x34>
    1220:	46 95       	lsr	r20
    1222:	37 95       	ror	r19
    1224:	27 95       	ror	r18
    1226:	a7 95       	ror	r26
    1228:	f0 40       	sbci	r31, 0x00	; 0
    122a:	53 95       	inc	r21
    122c:	c9 f7       	brne	.-14     	; 0x1220 <__addsf3x+0x4e>
    122e:	7e f4       	brtc	.+30     	; 0x124e <__addsf3x+0x7c>
    1230:	1f 16       	cp	r1, r31
    1232:	ba 0b       	sbc	r27, r26
    1234:	62 0b       	sbc	r22, r18
    1236:	73 0b       	sbc	r23, r19
    1238:	84 0b       	sbc	r24, r20
    123a:	ba f0       	brmi	.+46     	; 0x126a <__addsf3x+0x98>
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	a1 f0       	breq	.+40     	; 0x1268 <__addsf3x+0x96>
    1240:	ff 0f       	add	r31, r31
    1242:	bb 1f       	adc	r27, r27
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	c2 f7       	brpl	.-16     	; 0x123c <__addsf3x+0x6a>
    124c:	0e c0       	rjmp	.+28     	; 0x126a <__addsf3x+0x98>
    124e:	ba 0f       	add	r27, r26
    1250:	62 1f       	adc	r22, r18
    1252:	73 1f       	adc	r23, r19
    1254:	84 1f       	adc	r24, r20
    1256:	48 f4       	brcc	.+18     	; 0x126a <__addsf3x+0x98>
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	9e 3f       	cpi	r25, 0xFE	; 254
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__addsf3x+0x96>
    1266:	b3 cf       	rjmp	.-154    	; 0x11ce <__addsf3+0x1e>
    1268:	93 95       	inc	r25
    126a:	88 0f       	add	r24, r24
    126c:	08 f0       	brcs	.+2      	; 0x1270 <__addsf3x+0x9e>
    126e:	99 27       	eor	r25, r25
    1270:	ee 0f       	add	r30, r30
    1272:	97 95       	ror	r25
    1274:	87 95       	ror	r24
    1276:	08 95       	ret

00001278 <__divsf3>:
    1278:	0c d0       	rcall	.+24     	; 0x1292 <__divsf3x>
    127a:	eb c0       	rjmp	.+470    	; 0x1452 <__fp_round>
    127c:	e3 d0       	rcall	.+454    	; 0x1444 <__fp_pscB>
    127e:	40 f0       	brcs	.+16     	; 0x1290 <__divsf3+0x18>
    1280:	da d0       	rcall	.+436    	; 0x1436 <__fp_pscA>
    1282:	30 f0       	brcs	.+12     	; 0x1290 <__divsf3+0x18>
    1284:	21 f4       	brne	.+8      	; 0x128e <__divsf3+0x16>
    1286:	5f 3f       	cpi	r21, 0xFF	; 255
    1288:	19 f0       	breq	.+6      	; 0x1290 <__divsf3+0x18>
    128a:	cc c0       	rjmp	.+408    	; 0x1424 <__fp_inf>
    128c:	51 11       	cpse	r21, r1
    128e:	15 c1       	rjmp	.+554    	; 0x14ba <__fp_szero>
    1290:	cf c0       	rjmp	.+414    	; 0x1430 <__fp_nan>

00001292 <__divsf3x>:
    1292:	f0 d0       	rcall	.+480    	; 0x1474 <__fp_split3>
    1294:	98 f3       	brcs	.-26     	; 0x127c <__divsf3+0x4>

00001296 <__divsf3_pse>:
    1296:	99 23       	and	r25, r25
    1298:	c9 f3       	breq	.-14     	; 0x128c <__divsf3+0x14>
    129a:	55 23       	and	r21, r21
    129c:	b1 f3       	breq	.-20     	; 0x128a <__divsf3+0x12>
    129e:	95 1b       	sub	r25, r21
    12a0:	55 0b       	sbc	r21, r21
    12a2:	bb 27       	eor	r27, r27
    12a4:	aa 27       	eor	r26, r26
    12a6:	62 17       	cp	r22, r18
    12a8:	73 07       	cpc	r23, r19
    12aa:	84 07       	cpc	r24, r20
    12ac:	38 f0       	brcs	.+14     	; 0x12bc <__divsf3_pse+0x26>
    12ae:	9f 5f       	subi	r25, 0xFF	; 255
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	44 1f       	adc	r20, r20
    12b8:	aa 1f       	adc	r26, r26
    12ba:	a9 f3       	breq	.-22     	; 0x12a6 <__divsf3_pse+0x10>
    12bc:	33 d0       	rcall	.+102    	; 0x1324 <__divsf3_pse+0x8e>
    12be:	0e 2e       	mov	r0, r30
    12c0:	3a f0       	brmi	.+14     	; 0x12d0 <__divsf3_pse+0x3a>
    12c2:	e0 e8       	ldi	r30, 0x80	; 128
    12c4:	30 d0       	rcall	.+96     	; 0x1326 <__divsf3_pse+0x90>
    12c6:	91 50       	subi	r25, 0x01	; 1
    12c8:	50 40       	sbci	r21, 0x00	; 0
    12ca:	e6 95       	lsr	r30
    12cc:	00 1c       	adc	r0, r0
    12ce:	ca f7       	brpl	.-14     	; 0x12c2 <__divsf3_pse+0x2c>
    12d0:	29 d0       	rcall	.+82     	; 0x1324 <__divsf3_pse+0x8e>
    12d2:	fe 2f       	mov	r31, r30
    12d4:	27 d0       	rcall	.+78     	; 0x1324 <__divsf3_pse+0x8e>
    12d6:	66 0f       	add	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	88 1f       	adc	r24, r24
    12dc:	bb 1f       	adc	r27, r27
    12de:	26 17       	cp	r18, r22
    12e0:	37 07       	cpc	r19, r23
    12e2:	48 07       	cpc	r20, r24
    12e4:	ab 07       	cpc	r26, r27
    12e6:	b0 e8       	ldi	r27, 0x80	; 128
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__divsf3_pse+0x56>
    12ea:	bb 0b       	sbc	r27, r27
    12ec:	80 2d       	mov	r24, r0
    12ee:	bf 01       	movw	r22, r30
    12f0:	ff 27       	eor	r31, r31
    12f2:	93 58       	subi	r25, 0x83	; 131
    12f4:	5f 4f       	sbci	r21, 0xFF	; 255
    12f6:	2a f0       	brmi	.+10     	; 0x1302 <__divsf3_pse+0x6c>
    12f8:	9e 3f       	cpi	r25, 0xFE	; 254
    12fa:	51 05       	cpc	r21, r1
    12fc:	68 f0       	brcs	.+26     	; 0x1318 <__divsf3_pse+0x82>
    12fe:	92 c0       	rjmp	.+292    	; 0x1424 <__fp_inf>
    1300:	dc c0       	rjmp	.+440    	; 0x14ba <__fp_szero>
    1302:	5f 3f       	cpi	r21, 0xFF	; 255
    1304:	ec f3       	brlt	.-6      	; 0x1300 <__divsf3_pse+0x6a>
    1306:	98 3e       	cpi	r25, 0xE8	; 232
    1308:	dc f3       	brlt	.-10     	; 0x1300 <__divsf3_pse+0x6a>
    130a:	86 95       	lsr	r24
    130c:	77 95       	ror	r23
    130e:	67 95       	ror	r22
    1310:	b7 95       	ror	r27
    1312:	f7 95       	ror	r31
    1314:	9f 5f       	subi	r25, 0xFF	; 255
    1316:	c9 f7       	brne	.-14     	; 0x130a <__divsf3_pse+0x74>
    1318:	88 0f       	add	r24, r24
    131a:	91 1d       	adc	r25, r1
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	97 f9       	bld	r25, 7
    1322:	08 95       	ret
    1324:	e1 e0       	ldi	r30, 0x01	; 1
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	bb 1f       	adc	r27, r27
    132e:	62 17       	cp	r22, r18
    1330:	73 07       	cpc	r23, r19
    1332:	84 07       	cpc	r24, r20
    1334:	ba 07       	cpc	r27, r26
    1336:	20 f0       	brcs	.+8      	; 0x1340 <__divsf3_pse+0xaa>
    1338:	62 1b       	sub	r22, r18
    133a:	73 0b       	sbc	r23, r19
    133c:	84 0b       	sbc	r24, r20
    133e:	ba 0b       	sbc	r27, r26
    1340:	ee 1f       	adc	r30, r30
    1342:	88 f7       	brcc	.-30     	; 0x1326 <__divsf3_pse+0x90>
    1344:	e0 95       	com	r30
    1346:	08 95       	ret

00001348 <__fixsfsi>:
    1348:	04 d0       	rcall	.+8      	; 0x1352 <__fixunssfsi>
    134a:	68 94       	set
    134c:	b1 11       	cpse	r27, r1
    134e:	b5 c0       	rjmp	.+362    	; 0x14ba <__fp_szero>
    1350:	08 95       	ret

00001352 <__fixunssfsi>:
    1352:	98 d0       	rcall	.+304    	; 0x1484 <__fp_splitA>
    1354:	88 f0       	brcs	.+34     	; 0x1378 <__fixunssfsi+0x26>
    1356:	9f 57       	subi	r25, 0x7F	; 127
    1358:	90 f0       	brcs	.+36     	; 0x137e <__fixunssfsi+0x2c>
    135a:	b9 2f       	mov	r27, r25
    135c:	99 27       	eor	r25, r25
    135e:	b7 51       	subi	r27, 0x17	; 23
    1360:	a0 f0       	brcs	.+40     	; 0x138a <__fixunssfsi+0x38>
    1362:	d1 f0       	breq	.+52     	; 0x1398 <__fixunssfsi+0x46>
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	1a f0       	brmi	.+6      	; 0x1374 <__fixunssfsi+0x22>
    136e:	ba 95       	dec	r27
    1370:	c9 f7       	brne	.-14     	; 0x1364 <__fixunssfsi+0x12>
    1372:	12 c0       	rjmp	.+36     	; 0x1398 <__fixunssfsi+0x46>
    1374:	b1 30       	cpi	r27, 0x01	; 1
    1376:	81 f0       	breq	.+32     	; 0x1398 <__fixunssfsi+0x46>
    1378:	9f d0       	rcall	.+318    	; 0x14b8 <__fp_zero>
    137a:	b1 e0       	ldi	r27, 0x01	; 1
    137c:	08 95       	ret
    137e:	9c c0       	rjmp	.+312    	; 0x14b8 <__fp_zero>
    1380:	67 2f       	mov	r22, r23
    1382:	78 2f       	mov	r23, r24
    1384:	88 27       	eor	r24, r24
    1386:	b8 5f       	subi	r27, 0xF8	; 248
    1388:	39 f0       	breq	.+14     	; 0x1398 <__fixunssfsi+0x46>
    138a:	b9 3f       	cpi	r27, 0xF9	; 249
    138c:	cc f3       	brlt	.-14     	; 0x1380 <__fixunssfsi+0x2e>
    138e:	86 95       	lsr	r24
    1390:	77 95       	ror	r23
    1392:	67 95       	ror	r22
    1394:	b3 95       	inc	r27
    1396:	d9 f7       	brne	.-10     	; 0x138e <__fixunssfsi+0x3c>
    1398:	3e f4       	brtc	.+14     	; 0x13a8 <__fixunssfsi+0x56>
    139a:	90 95       	com	r25
    139c:	80 95       	com	r24
    139e:	70 95       	com	r23
    13a0:	61 95       	neg	r22
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	8f 4f       	sbci	r24, 0xFF	; 255
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	08 95       	ret

000013aa <__floatunsisf>:
    13aa:	e8 94       	clt
    13ac:	09 c0       	rjmp	.+18     	; 0x13c0 <__floatsisf+0x12>

000013ae <__floatsisf>:
    13ae:	97 fb       	bst	r25, 7
    13b0:	3e f4       	brtc	.+14     	; 0x13c0 <__floatsisf+0x12>
    13b2:	90 95       	com	r25
    13b4:	80 95       	com	r24
    13b6:	70 95       	com	r23
    13b8:	61 95       	neg	r22
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	99 23       	and	r25, r25
    13c2:	a9 f0       	breq	.+42     	; 0x13ee <__floatsisf+0x40>
    13c4:	f9 2f       	mov	r31, r25
    13c6:	96 e9       	ldi	r25, 0x96	; 150
    13c8:	bb 27       	eor	r27, r27
    13ca:	93 95       	inc	r25
    13cc:	f6 95       	lsr	r31
    13ce:	87 95       	ror	r24
    13d0:	77 95       	ror	r23
    13d2:	67 95       	ror	r22
    13d4:	b7 95       	ror	r27
    13d6:	f1 11       	cpse	r31, r1
    13d8:	f8 cf       	rjmp	.-16     	; 0x13ca <__floatsisf+0x1c>
    13da:	fa f4       	brpl	.+62     	; 0x141a <__floatsisf+0x6c>
    13dc:	bb 0f       	add	r27, r27
    13de:	11 f4       	brne	.+4      	; 0x13e4 <__floatsisf+0x36>
    13e0:	60 ff       	sbrs	r22, 0
    13e2:	1b c0       	rjmp	.+54     	; 0x141a <__floatsisf+0x6c>
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	16 c0       	rjmp	.+44     	; 0x141a <__floatsisf+0x6c>
    13ee:	88 23       	and	r24, r24
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <__floatsisf+0x48>
    13f2:	96 e9       	ldi	r25, 0x96	; 150
    13f4:	11 c0       	rjmp	.+34     	; 0x1418 <__floatsisf+0x6a>
    13f6:	77 23       	and	r23, r23
    13f8:	21 f0       	breq	.+8      	; 0x1402 <__floatsisf+0x54>
    13fa:	9e e8       	ldi	r25, 0x8E	; 142
    13fc:	87 2f       	mov	r24, r23
    13fe:	76 2f       	mov	r23, r22
    1400:	05 c0       	rjmp	.+10     	; 0x140c <__floatsisf+0x5e>
    1402:	66 23       	and	r22, r22
    1404:	71 f0       	breq	.+28     	; 0x1422 <__floatsisf+0x74>
    1406:	96 e8       	ldi	r25, 0x86	; 134
    1408:	86 2f       	mov	r24, r22
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	2a f0       	brmi	.+10     	; 0x141a <__floatsisf+0x6c>
    1410:	9a 95       	dec	r25
    1412:	66 0f       	add	r22, r22
    1414:	77 1f       	adc	r23, r23
    1416:	88 1f       	adc	r24, r24
    1418:	da f7       	brpl	.-10     	; 0x1410 <__floatsisf+0x62>
    141a:	88 0f       	add	r24, r24
    141c:	96 95       	lsr	r25
    141e:	87 95       	ror	r24
    1420:	97 f9       	bld	r25, 7
    1422:	08 95       	ret

00001424 <__fp_inf>:
    1424:	97 f9       	bld	r25, 7
    1426:	9f 67       	ori	r25, 0x7F	; 127
    1428:	80 e8       	ldi	r24, 0x80	; 128
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	08 95       	ret

00001430 <__fp_nan>:
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	80 ec       	ldi	r24, 0xC0	; 192
    1434:	08 95       	ret

00001436 <__fp_pscA>:
    1436:	00 24       	eor	r0, r0
    1438:	0a 94       	dec	r0
    143a:	16 16       	cp	r1, r22
    143c:	17 06       	cpc	r1, r23
    143e:	18 06       	cpc	r1, r24
    1440:	09 06       	cpc	r0, r25
    1442:	08 95       	ret

00001444 <__fp_pscB>:
    1444:	00 24       	eor	r0, r0
    1446:	0a 94       	dec	r0
    1448:	12 16       	cp	r1, r18
    144a:	13 06       	cpc	r1, r19
    144c:	14 06       	cpc	r1, r20
    144e:	05 06       	cpc	r0, r21
    1450:	08 95       	ret

00001452 <__fp_round>:
    1452:	09 2e       	mov	r0, r25
    1454:	03 94       	inc	r0
    1456:	00 0c       	add	r0, r0
    1458:	11 f4       	brne	.+4      	; 0x145e <__fp_round+0xc>
    145a:	88 23       	and	r24, r24
    145c:	52 f0       	brmi	.+20     	; 0x1472 <__fp_round+0x20>
    145e:	bb 0f       	add	r27, r27
    1460:	40 f4       	brcc	.+16     	; 0x1472 <__fp_round+0x20>
    1462:	bf 2b       	or	r27, r31
    1464:	11 f4       	brne	.+4      	; 0x146a <__fp_round+0x18>
    1466:	60 ff       	sbrs	r22, 0
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__fp_round+0x20>
    146a:	6f 5f       	subi	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	8f 4f       	sbci	r24, 0xFF	; 255
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	08 95       	ret

00001474 <__fp_split3>:
    1474:	57 fd       	sbrc	r21, 7
    1476:	90 58       	subi	r25, 0x80	; 128
    1478:	44 0f       	add	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	59 f0       	breq	.+22     	; 0x1494 <__fp_splitA+0x10>
    147e:	5f 3f       	cpi	r21, 0xFF	; 255
    1480:	71 f0       	breq	.+28     	; 0x149e <__fp_splitA+0x1a>
    1482:	47 95       	ror	r20

00001484 <__fp_splitA>:
    1484:	88 0f       	add	r24, r24
    1486:	97 fb       	bst	r25, 7
    1488:	99 1f       	adc	r25, r25
    148a:	61 f0       	breq	.+24     	; 0x14a4 <__fp_splitA+0x20>
    148c:	9f 3f       	cpi	r25, 0xFF	; 255
    148e:	79 f0       	breq	.+30     	; 0x14ae <__fp_splitA+0x2a>
    1490:	87 95       	ror	r24
    1492:	08 95       	ret
    1494:	12 16       	cp	r1, r18
    1496:	13 06       	cpc	r1, r19
    1498:	14 06       	cpc	r1, r20
    149a:	55 1f       	adc	r21, r21
    149c:	f2 cf       	rjmp	.-28     	; 0x1482 <__fp_split3+0xe>
    149e:	46 95       	lsr	r20
    14a0:	f1 df       	rcall	.-30     	; 0x1484 <__fp_splitA>
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <__fp_splitA+0x30>
    14a4:	16 16       	cp	r1, r22
    14a6:	17 06       	cpc	r1, r23
    14a8:	18 06       	cpc	r1, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	f1 cf       	rjmp	.-30     	; 0x1490 <__fp_splitA+0xc>
    14ae:	86 95       	lsr	r24
    14b0:	71 05       	cpc	r23, r1
    14b2:	61 05       	cpc	r22, r1
    14b4:	08 94       	sec
    14b6:	08 95       	ret

000014b8 <__fp_zero>:
    14b8:	e8 94       	clt

000014ba <__fp_szero>:
    14ba:	bb 27       	eor	r27, r27
    14bc:	66 27       	eor	r22, r22
    14be:	77 27       	eor	r23, r23
    14c0:	cb 01       	movw	r24, r22
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret

000014c6 <__mulsf3>:
    14c6:	0b d0       	rcall	.+22     	; 0x14de <__mulsf3x>
    14c8:	c4 cf       	rjmp	.-120    	; 0x1452 <__fp_round>
    14ca:	b5 df       	rcall	.-150    	; 0x1436 <__fp_pscA>
    14cc:	28 f0       	brcs	.+10     	; 0x14d8 <__mulsf3+0x12>
    14ce:	ba df       	rcall	.-140    	; 0x1444 <__fp_pscB>
    14d0:	18 f0       	brcs	.+6      	; 0x14d8 <__mulsf3+0x12>
    14d2:	95 23       	and	r25, r21
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <__mulsf3+0x12>
    14d6:	a6 cf       	rjmp	.-180    	; 0x1424 <__fp_inf>
    14d8:	ab cf       	rjmp	.-170    	; 0x1430 <__fp_nan>
    14da:	11 24       	eor	r1, r1
    14dc:	ee cf       	rjmp	.-36     	; 0x14ba <__fp_szero>

000014de <__mulsf3x>:
    14de:	ca df       	rcall	.-108    	; 0x1474 <__fp_split3>
    14e0:	a0 f3       	brcs	.-24     	; 0x14ca <__mulsf3+0x4>

000014e2 <__mulsf3_pse>:
    14e2:	95 9f       	mul	r25, r21
    14e4:	d1 f3       	breq	.-12     	; 0x14da <__mulsf3+0x14>
    14e6:	95 0f       	add	r25, r21
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	55 1f       	adc	r21, r21
    14ec:	62 9f       	mul	r22, r18
    14ee:	f0 01       	movw	r30, r0
    14f0:	72 9f       	mul	r23, r18
    14f2:	bb 27       	eor	r27, r27
    14f4:	f0 0d       	add	r31, r0
    14f6:	b1 1d       	adc	r27, r1
    14f8:	63 9f       	mul	r22, r19
    14fa:	aa 27       	eor	r26, r26
    14fc:	f0 0d       	add	r31, r0
    14fe:	b1 1d       	adc	r27, r1
    1500:	aa 1f       	adc	r26, r26
    1502:	64 9f       	mul	r22, r20
    1504:	66 27       	eor	r22, r22
    1506:	b0 0d       	add	r27, r0
    1508:	a1 1d       	adc	r26, r1
    150a:	66 1f       	adc	r22, r22
    150c:	82 9f       	mul	r24, r18
    150e:	22 27       	eor	r18, r18
    1510:	b0 0d       	add	r27, r0
    1512:	a1 1d       	adc	r26, r1
    1514:	62 1f       	adc	r22, r18
    1516:	73 9f       	mul	r23, r19
    1518:	b0 0d       	add	r27, r0
    151a:	a1 1d       	adc	r26, r1
    151c:	62 1f       	adc	r22, r18
    151e:	83 9f       	mul	r24, r19
    1520:	a0 0d       	add	r26, r0
    1522:	61 1d       	adc	r22, r1
    1524:	22 1f       	adc	r18, r18
    1526:	74 9f       	mul	r23, r20
    1528:	33 27       	eor	r19, r19
    152a:	a0 0d       	add	r26, r0
    152c:	61 1d       	adc	r22, r1
    152e:	23 1f       	adc	r18, r19
    1530:	84 9f       	mul	r24, r20
    1532:	60 0d       	add	r22, r0
    1534:	21 1d       	adc	r18, r1
    1536:	82 2f       	mov	r24, r18
    1538:	76 2f       	mov	r23, r22
    153a:	6a 2f       	mov	r22, r26
    153c:	11 24       	eor	r1, r1
    153e:	9f 57       	subi	r25, 0x7F	; 127
    1540:	50 40       	sbci	r21, 0x00	; 0
    1542:	8a f0       	brmi	.+34     	; 0x1566 <__mulsf3_pse+0x84>
    1544:	e1 f0       	breq	.+56     	; 0x157e <__mulsf3_pse+0x9c>
    1546:	88 23       	and	r24, r24
    1548:	4a f0       	brmi	.+18     	; 0x155c <__mulsf3_pse+0x7a>
    154a:	ee 0f       	add	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	bb 1f       	adc	r27, r27
    1550:	66 1f       	adc	r22, r22
    1552:	77 1f       	adc	r23, r23
    1554:	88 1f       	adc	r24, r24
    1556:	91 50       	subi	r25, 0x01	; 1
    1558:	50 40       	sbci	r21, 0x00	; 0
    155a:	a9 f7       	brne	.-22     	; 0x1546 <__mulsf3_pse+0x64>
    155c:	9e 3f       	cpi	r25, 0xFE	; 254
    155e:	51 05       	cpc	r21, r1
    1560:	70 f0       	brcs	.+28     	; 0x157e <__mulsf3_pse+0x9c>
    1562:	60 cf       	rjmp	.-320    	; 0x1424 <__fp_inf>
    1564:	aa cf       	rjmp	.-172    	; 0x14ba <__fp_szero>
    1566:	5f 3f       	cpi	r21, 0xFF	; 255
    1568:	ec f3       	brlt	.-6      	; 0x1564 <__mulsf3_pse+0x82>
    156a:	98 3e       	cpi	r25, 0xE8	; 232
    156c:	dc f3       	brlt	.-10     	; 0x1564 <__mulsf3_pse+0x82>
    156e:	86 95       	lsr	r24
    1570:	77 95       	ror	r23
    1572:	67 95       	ror	r22
    1574:	b7 95       	ror	r27
    1576:	f7 95       	ror	r31
    1578:	e7 95       	ror	r30
    157a:	9f 5f       	subi	r25, 0xFF	; 255
    157c:	c1 f7       	brne	.-16     	; 0x156e <__mulsf3_pse+0x8c>
    157e:	fe 2b       	or	r31, r30
    1580:	88 0f       	add	r24, r24
    1582:	91 1d       	adc	r25, r1
    1584:	96 95       	lsr	r25
    1586:	87 95       	ror	r24
    1588:	97 f9       	bld	r25, 7
    158a:	08 95       	ret

0000158c <__divmodhi4>:
    158c:	97 fb       	bst	r25, 7
    158e:	07 2e       	mov	r0, r23
    1590:	16 f4       	brtc	.+4      	; 0x1596 <__divmodhi4+0xa>
    1592:	00 94       	com	r0
    1594:	07 d0       	rcall	.+14     	; 0x15a4 <__divmodhi4_neg1>
    1596:	77 fd       	sbrc	r23, 7
    1598:	09 d0       	rcall	.+18     	; 0x15ac <__divmodhi4_neg2>
    159a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodhi4>
    159e:	07 fc       	sbrc	r0, 7
    15a0:	05 d0       	rcall	.+10     	; 0x15ac <__divmodhi4_neg2>
    15a2:	3e f4       	brtc	.+14     	; 0x15b2 <__divmodhi4_exit>

000015a4 <__divmodhi4_neg1>:
    15a4:	90 95       	com	r25
    15a6:	81 95       	neg	r24
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	08 95       	ret

000015ac <__divmodhi4_neg2>:
    15ac:	70 95       	com	r23
    15ae:	61 95       	neg	r22
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255

000015b2 <__divmodhi4_exit>:
    15b2:	08 95       	ret

000015b4 <__udivmodhi4>:
    15b4:	aa 1b       	sub	r26, r26
    15b6:	bb 1b       	sub	r27, r27
    15b8:	51 e1       	ldi	r21, 0x11	; 17
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <__udivmodhi4_ep>

000015bc <__udivmodhi4_loop>:
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	a6 17       	cp	r26, r22
    15c2:	b7 07       	cpc	r27, r23
    15c4:	10 f0       	brcs	.+4      	; 0x15ca <__udivmodhi4_ep>
    15c6:	a6 1b       	sub	r26, r22
    15c8:	b7 0b       	sbc	r27, r23

000015ca <__udivmodhi4_ep>:
    15ca:	88 1f       	adc	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	5a 95       	dec	r21
    15d0:	a9 f7       	brne	.-22     	; 0x15bc <__udivmodhi4_loop>
    15d2:	80 95       	com	r24
    15d4:	90 95       	com	r25
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	08 95       	ret

000015dc <do_rand>:
    15dc:	8f 92       	push	r8
    15de:	9f 92       	push	r9
    15e0:	af 92       	push	r10
    15e2:	bf 92       	push	r11
    15e4:	cf 92       	push	r12
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	ec 01       	movw	r28, r24
    15f2:	68 81       	ld	r22, Y
    15f4:	79 81       	ldd	r23, Y+1	; 0x01
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	9b 81       	ldd	r25, Y+3	; 0x03
    15fa:	61 15       	cp	r22, r1
    15fc:	71 05       	cpc	r23, r1
    15fe:	81 05       	cpc	r24, r1
    1600:	91 05       	cpc	r25, r1
    1602:	21 f4       	brne	.+8      	; 0x160c <do_rand+0x30>
    1604:	64 e2       	ldi	r22, 0x24	; 36
    1606:	79 ed       	ldi	r23, 0xD9	; 217
    1608:	8b e5       	ldi	r24, 0x5B	; 91
    160a:	97 e0       	ldi	r25, 0x07	; 7
    160c:	2d e1       	ldi	r18, 0x1D	; 29
    160e:	33 ef       	ldi	r19, 0xF3	; 243
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodsi4>
    1618:	49 01       	movw	r8, r18
    161a:	5a 01       	movw	r10, r20
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	a7 ea       	ldi	r26, 0xA7	; 167
    1622:	b1 e4       	ldi	r27, 0x41	; 65
    1624:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__muluhisi3>
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
    162c:	ac ee       	ldi	r26, 0xEC	; 236
    162e:	b4 ef       	ldi	r27, 0xF4	; 244
    1630:	a5 01       	movw	r20, r10
    1632:	94 01       	movw	r18, r8
    1634:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__mulohisi3>
    1638:	c6 0e       	add	r12, r22
    163a:	d7 1e       	adc	r13, r23
    163c:	e8 1e       	adc	r14, r24
    163e:	f9 1e       	adc	r15, r25
    1640:	f7 fe       	sbrs	r15, 7
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <do_rand+0x74>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	c8 1a       	sub	r12, r24
    1648:	d1 08       	sbc	r13, r1
    164a:	e1 08       	sbc	r14, r1
    164c:	80 e8       	ldi	r24, 0x80	; 128
    164e:	f8 0a       	sbc	r15, r24
    1650:	c8 82       	st	Y, r12
    1652:	d9 82       	std	Y+1, r13	; 0x01
    1654:	ea 82       	std	Y+2, r14	; 0x02
    1656:	fb 82       	std	Y+3, r15	; 0x03
    1658:	c6 01       	movw	r24, r12
    165a:	9f 77       	andi	r25, 0x7F	; 127
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	bf 90       	pop	r11
    166a:	af 90       	pop	r10
    166c:	9f 90       	pop	r9
    166e:	8f 90       	pop	r8
    1670:	08 95       	ret

00001672 <rand_r>:
    1672:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <do_rand>
    1676:	08 95       	ret

00001678 <rand>:
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <do_rand>
    1680:	08 95       	ret

00001682 <srand>:
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	80 93 00 01 	sts	0x0100, r24
    168a:	90 93 01 01 	sts	0x0101, r25
    168e:	a0 93 02 01 	sts	0x0102, r26
    1692:	b0 93 03 01 	sts	0x0103, r27
    1696:	08 95       	ret

00001698 <strcpy_P>:
    1698:	fb 01       	movw	r30, r22
    169a:	dc 01       	movw	r26, r24
    169c:	05 90       	lpm	r0, Z+
    169e:	0d 92       	st	X+, r0
    16a0:	00 20       	and	r0, r0
    16a2:	e1 f7       	brne	.-8      	; 0x169c <strcpy_P+0x4>
    16a4:	08 95       	ret

000016a6 <fdevopen>:
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	ec 01       	movw	r28, r24
    16b0:	8b 01       	movw	r16, r22
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	31 f4       	brne	.+12     	; 0x16c2 <fdevopen+0x1c>
    16b6:	61 15       	cp	r22, r1
    16b8:	71 05       	cpc	r23, r1
    16ba:	19 f4       	brne	.+6      	; 0x16c2 <fdevopen+0x1c>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	38 c0       	rjmp	.+112    	; 0x1732 <fdevopen+0x8c>
    16c2:	6e e0       	ldi	r22, 0x0E	; 14
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <calloc>
    16ce:	fc 01       	movw	r30, r24
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	a1 f3       	breq	.-24     	; 0x16bc <fdevopen+0x16>
    16d4:	80 e8       	ldi	r24, 0x80	; 128
    16d6:	83 83       	std	Z+3, r24	; 0x03
    16d8:	01 15       	cp	r16, r1
    16da:	11 05       	cpc	r17, r1
    16dc:	71 f0       	breq	.+28     	; 0x16fa <fdevopen+0x54>
    16de:	13 87       	std	Z+11, r17	; 0x0b
    16e0:	02 87       	std	Z+10, r16	; 0x0a
    16e2:	81 e8       	ldi	r24, 0x81	; 129
    16e4:	83 83       	std	Z+3, r24	; 0x03
    16e6:	80 91 1c 04 	lds	r24, 0x041C
    16ea:	90 91 1d 04 	lds	r25, 0x041D
    16ee:	89 2b       	or	r24, r25
    16f0:	21 f4       	brne	.+8      	; 0x16fa <fdevopen+0x54>
    16f2:	f0 93 1d 04 	sts	0x041D, r31
    16f6:	e0 93 1c 04 	sts	0x041C, r30
    16fa:	20 97       	sbiw	r28, 0x00	; 0
    16fc:	c9 f0       	breq	.+50     	; 0x1730 <fdevopen+0x8a>
    16fe:	d1 87       	std	Z+9, r29	; 0x09
    1700:	c0 87       	std	Z+8, r28	; 0x08
    1702:	83 81       	ldd	r24, Z+3	; 0x03
    1704:	82 60       	ori	r24, 0x02	; 2
    1706:	83 83       	std	Z+3, r24	; 0x03
    1708:	80 91 1e 04 	lds	r24, 0x041E
    170c:	90 91 1f 04 	lds	r25, 0x041F
    1710:	89 2b       	or	r24, r25
    1712:	71 f4       	brne	.+28     	; 0x1730 <fdevopen+0x8a>
    1714:	f0 93 1f 04 	sts	0x041F, r31
    1718:	e0 93 1e 04 	sts	0x041E, r30
    171c:	80 91 20 04 	lds	r24, 0x0420
    1720:	90 91 21 04 	lds	r25, 0x0421
    1724:	89 2b       	or	r24, r25
    1726:	21 f4       	brne	.+8      	; 0x1730 <fdevopen+0x8a>
    1728:	f0 93 21 04 	sts	0x0421, r31
    172c:	e0 93 20 04 	sts	0x0420, r30
    1730:	cf 01       	movw	r24, r30
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <printf>:
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e4 ea       	ldi	r30, 0xA4	; 164
    1742:	fb e0       	ldi	r31, 0x0B	; 11
    1744:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__prologue_saves__+0x20>
    1748:	fe 01       	movw	r30, r28
    174a:	35 96       	adiw	r30, 0x05	; 5
    174c:	61 91       	ld	r22, Z+
    174e:	71 91       	ld	r23, Z+
    1750:	af 01       	movw	r20, r30
    1752:	80 91 1e 04 	lds	r24, 0x041E
    1756:	90 91 1f 04 	lds	r25, 0x041F
    175a:	0e 94 df 0b 	call	0x17be	; 0x17be <vfprintf>
    175e:	e2 e0       	ldi	r30, 0x02	; 2
    1760:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__epilogue_restores__+0x20>

00001764 <puts>:
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	e0 91 1e 04 	lds	r30, 0x041E
    1770:	f0 91 1f 04 	lds	r31, 0x041F
    1774:	23 81       	ldd	r18, Z+3	; 0x03
    1776:	21 ff       	sbrs	r18, 1
    1778:	1b c0       	rjmp	.+54     	; 0x17b0 <puts+0x4c>
    177a:	ec 01       	movw	r28, r24
    177c:	00 e0       	ldi	r16, 0x00	; 0
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	89 91       	ld	r24, Y+
    1782:	60 91 1e 04 	lds	r22, 0x041E
    1786:	70 91 1f 04 	lds	r23, 0x041F
    178a:	db 01       	movw	r26, r22
    178c:	18 96       	adiw	r26, 0x08	; 8
    178e:	ed 91       	ld	r30, X+
    1790:	fc 91       	ld	r31, X
    1792:	19 97       	sbiw	r26, 0x09	; 9
    1794:	88 23       	and	r24, r24
    1796:	31 f0       	breq	.+12     	; 0x17a4 <puts+0x40>
    1798:	09 95       	icall
    179a:	89 2b       	or	r24, r25
    179c:	89 f3       	breq	.-30     	; 0x1780 <puts+0x1c>
    179e:	0f ef       	ldi	r16, 0xFF	; 255
    17a0:	1f ef       	ldi	r17, 0xFF	; 255
    17a2:	ee cf       	rjmp	.-36     	; 0x1780 <puts+0x1c>
    17a4:	8a e0       	ldi	r24, 0x0A	; 10
    17a6:	09 95       	icall
    17a8:	89 2b       	or	r24, r25
    17aa:	11 f4       	brne	.+4      	; 0x17b0 <puts+0x4c>
    17ac:	c8 01       	movw	r24, r16
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <puts+0x50>
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	9f ef       	ldi	r25, 0xFF	; 255
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <vfprintf>:
    17be:	ac e0       	ldi	r26, 0x0C	; 12
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 ee       	ldi	r30, 0xE5	; 229
    17c4:	fb e0       	ldi	r31, 0x0B	; 11
    17c6:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__>
    17ca:	7c 01       	movw	r14, r24
    17cc:	6b 01       	movw	r12, r22
    17ce:	8a 01       	movw	r16, r20
    17d0:	fc 01       	movw	r30, r24
    17d2:	17 82       	std	Z+7, r1	; 0x07
    17d4:	16 82       	std	Z+6, r1	; 0x06
    17d6:	83 81       	ldd	r24, Z+3	; 0x03
    17d8:	81 ff       	sbrs	r24, 1
    17da:	bd c1       	rjmp	.+890    	; 0x1b56 <vfprintf+0x398>
    17dc:	ce 01       	movw	r24, r28
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	4c 01       	movw	r8, r24
    17e2:	f7 01       	movw	r30, r14
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	f6 01       	movw	r30, r12
    17e8:	93 fd       	sbrc	r25, 3
    17ea:	85 91       	lpm	r24, Z+
    17ec:	93 ff       	sbrs	r25, 3
    17ee:	81 91       	ld	r24, Z+
    17f0:	6f 01       	movw	r12, r30
    17f2:	88 23       	and	r24, r24
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <vfprintf+0x3a>
    17f6:	ab c1       	rjmp	.+854    	; 0x1b4e <vfprintf+0x390>
    17f8:	85 32       	cpi	r24, 0x25	; 37
    17fa:	39 f4       	brne	.+14     	; 0x180a <vfprintf+0x4c>
    17fc:	93 fd       	sbrc	r25, 3
    17fe:	85 91       	lpm	r24, Z+
    1800:	93 ff       	sbrs	r25, 3
    1802:	81 91       	ld	r24, Z+
    1804:	6f 01       	movw	r12, r30
    1806:	85 32       	cpi	r24, 0x25	; 37
    1808:	29 f4       	brne	.+10     	; 0x1814 <vfprintf+0x56>
    180a:	b7 01       	movw	r22, r14
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1812:	e7 cf       	rjmp	.-50     	; 0x17e2 <vfprintf+0x24>
    1814:	51 2c       	mov	r5, r1
    1816:	31 2c       	mov	r3, r1
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	20 32       	cpi	r18, 0x20	; 32
    181c:	a0 f4       	brcc	.+40     	; 0x1846 <vfprintf+0x88>
    181e:	8b 32       	cpi	r24, 0x2B	; 43
    1820:	69 f0       	breq	.+26     	; 0x183c <vfprintf+0x7e>
    1822:	30 f4       	brcc	.+12     	; 0x1830 <vfprintf+0x72>
    1824:	80 32       	cpi	r24, 0x20	; 32
    1826:	59 f0       	breq	.+22     	; 0x183e <vfprintf+0x80>
    1828:	83 32       	cpi	r24, 0x23	; 35
    182a:	69 f4       	brne	.+26     	; 0x1846 <vfprintf+0x88>
    182c:	20 61       	ori	r18, 0x10	; 16
    182e:	2c c0       	rjmp	.+88     	; 0x1888 <vfprintf+0xca>
    1830:	8d 32       	cpi	r24, 0x2D	; 45
    1832:	39 f0       	breq	.+14     	; 0x1842 <vfprintf+0x84>
    1834:	80 33       	cpi	r24, 0x30	; 48
    1836:	39 f4       	brne	.+14     	; 0x1846 <vfprintf+0x88>
    1838:	21 60       	ori	r18, 0x01	; 1
    183a:	26 c0       	rjmp	.+76     	; 0x1888 <vfprintf+0xca>
    183c:	22 60       	ori	r18, 0x02	; 2
    183e:	24 60       	ori	r18, 0x04	; 4
    1840:	23 c0       	rjmp	.+70     	; 0x1888 <vfprintf+0xca>
    1842:	28 60       	ori	r18, 0x08	; 8
    1844:	21 c0       	rjmp	.+66     	; 0x1888 <vfprintf+0xca>
    1846:	27 fd       	sbrc	r18, 7
    1848:	27 c0       	rjmp	.+78     	; 0x1898 <vfprintf+0xda>
    184a:	30 ed       	ldi	r19, 0xD0	; 208
    184c:	38 0f       	add	r19, r24
    184e:	3a 30       	cpi	r19, 0x0A	; 10
    1850:	78 f4       	brcc	.+30     	; 0x1870 <vfprintf+0xb2>
    1852:	26 ff       	sbrs	r18, 6
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0xa4>
    1856:	fa e0       	ldi	r31, 0x0A	; 10
    1858:	5f 9e       	mul	r5, r31
    185a:	30 0d       	add	r19, r0
    185c:	11 24       	eor	r1, r1
    185e:	53 2e       	mov	r5, r19
    1860:	13 c0       	rjmp	.+38     	; 0x1888 <vfprintf+0xca>
    1862:	8a e0       	ldi	r24, 0x0A	; 10
    1864:	38 9e       	mul	r3, r24
    1866:	30 0d       	add	r19, r0
    1868:	11 24       	eor	r1, r1
    186a:	33 2e       	mov	r3, r19
    186c:	20 62       	ori	r18, 0x20	; 32
    186e:	0c c0       	rjmp	.+24     	; 0x1888 <vfprintf+0xca>
    1870:	8e 32       	cpi	r24, 0x2E	; 46
    1872:	21 f4       	brne	.+8      	; 0x187c <vfprintf+0xbe>
    1874:	26 fd       	sbrc	r18, 6
    1876:	6b c1       	rjmp	.+726    	; 0x1b4e <vfprintf+0x390>
    1878:	20 64       	ori	r18, 0x40	; 64
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <vfprintf+0xca>
    187c:	8c 36       	cpi	r24, 0x6C	; 108
    187e:	11 f4       	brne	.+4      	; 0x1884 <vfprintf+0xc6>
    1880:	20 68       	ori	r18, 0x80	; 128
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0xca>
    1884:	88 36       	cpi	r24, 0x68	; 104
    1886:	41 f4       	brne	.+16     	; 0x1898 <vfprintf+0xda>
    1888:	f6 01       	movw	r30, r12
    188a:	93 fd       	sbrc	r25, 3
    188c:	85 91       	lpm	r24, Z+
    188e:	93 ff       	sbrs	r25, 3
    1890:	81 91       	ld	r24, Z+
    1892:	6f 01       	movw	r12, r30
    1894:	81 11       	cpse	r24, r1
    1896:	c1 cf       	rjmp	.-126    	; 0x181a <vfprintf+0x5c>
    1898:	98 2f       	mov	r25, r24
    189a:	9f 7d       	andi	r25, 0xDF	; 223
    189c:	95 54       	subi	r25, 0x45	; 69
    189e:	93 30       	cpi	r25, 0x03	; 3
    18a0:	28 f4       	brcc	.+10     	; 0x18ac <vfprintf+0xee>
    18a2:	0c 5f       	subi	r16, 0xFC	; 252
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	ff e3       	ldi	r31, 0x3F	; 63
    18a8:	f9 83       	std	Y+1, r31	; 0x01
    18aa:	0d c0       	rjmp	.+26     	; 0x18c6 <vfprintf+0x108>
    18ac:	83 36       	cpi	r24, 0x63	; 99
    18ae:	31 f0       	breq	.+12     	; 0x18bc <vfprintf+0xfe>
    18b0:	83 37       	cpi	r24, 0x73	; 115
    18b2:	71 f0       	breq	.+28     	; 0x18d0 <vfprintf+0x112>
    18b4:	83 35       	cpi	r24, 0x53	; 83
    18b6:	09 f0       	breq	.+2      	; 0x18ba <vfprintf+0xfc>
    18b8:	5b c0       	rjmp	.+182    	; 0x1970 <vfprintf+0x1b2>
    18ba:	22 c0       	rjmp	.+68     	; 0x1900 <vfprintf+0x142>
    18bc:	f8 01       	movw	r30, r16
    18be:	80 81       	ld	r24, Z
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	0e 5f       	subi	r16, 0xFE	; 254
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	44 24       	eor	r4, r4
    18c8:	43 94       	inc	r4
    18ca:	51 2c       	mov	r5, r1
    18cc:	54 01       	movw	r10, r8
    18ce:	15 c0       	rjmp	.+42     	; 0x18fa <vfprintf+0x13c>
    18d0:	38 01       	movw	r6, r16
    18d2:	f2 e0       	ldi	r31, 0x02	; 2
    18d4:	6f 0e       	add	r6, r31
    18d6:	71 1c       	adc	r7, r1
    18d8:	f8 01       	movw	r30, r16
    18da:	a0 80       	ld	r10, Z
    18dc:	b1 80       	ldd	r11, Z+1	; 0x01
    18de:	26 ff       	sbrs	r18, 6
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <vfprintf+0x12a>
    18e2:	65 2d       	mov	r22, r5
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x12e>
    18e8:	6f ef       	ldi	r22, 0xFF	; 255
    18ea:	7f ef       	ldi	r23, 0xFF	; 255
    18ec:	c5 01       	movw	r24, r10
    18ee:	2c 87       	std	Y+12, r18	; 0x0c
    18f0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <strnlen>
    18f4:	2c 01       	movw	r4, r24
    18f6:	83 01       	movw	r16, r6
    18f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18fa:	2f 77       	andi	r18, 0x7F	; 127
    18fc:	22 2e       	mov	r2, r18
    18fe:	17 c0       	rjmp	.+46     	; 0x192e <vfprintf+0x170>
    1900:	38 01       	movw	r6, r16
    1902:	f2 e0       	ldi	r31, 0x02	; 2
    1904:	6f 0e       	add	r6, r31
    1906:	71 1c       	adc	r7, r1
    1908:	f8 01       	movw	r30, r16
    190a:	a0 80       	ld	r10, Z
    190c:	b1 80       	ldd	r11, Z+1	; 0x01
    190e:	26 ff       	sbrs	r18, 6
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <vfprintf+0x15a>
    1912:	65 2d       	mov	r22, r5
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x15e>
    1918:	6f ef       	ldi	r22, 0xFF	; 255
    191a:	7f ef       	ldi	r23, 0xFF	; 255
    191c:	c5 01       	movw	r24, r10
    191e:	2c 87       	std	Y+12, r18	; 0x0c
    1920:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <strnlen_P>
    1924:	2c 01       	movw	r4, r24
    1926:	2c 85       	ldd	r18, Y+12	; 0x0c
    1928:	20 68       	ori	r18, 0x80	; 128
    192a:	22 2e       	mov	r2, r18
    192c:	83 01       	movw	r16, r6
    192e:	23 fc       	sbrc	r2, 3
    1930:	1b c0       	rjmp	.+54     	; 0x1968 <vfprintf+0x1aa>
    1932:	83 2d       	mov	r24, r3
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	48 16       	cp	r4, r24
    1938:	59 06       	cpc	r5, r25
    193a:	b0 f4       	brcc	.+44     	; 0x1968 <vfprintf+0x1aa>
    193c:	b7 01       	movw	r22, r14
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1946:	3a 94       	dec	r3
    1948:	f4 cf       	rjmp	.-24     	; 0x1932 <vfprintf+0x174>
    194a:	f5 01       	movw	r30, r10
    194c:	27 fc       	sbrc	r2, 7
    194e:	85 91       	lpm	r24, Z+
    1950:	27 fe       	sbrs	r2, 7
    1952:	81 91       	ld	r24, Z+
    1954:	5f 01       	movw	r10, r30
    1956:	b7 01       	movw	r22, r14
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    195e:	31 10       	cpse	r3, r1
    1960:	3a 94       	dec	r3
    1962:	f1 e0       	ldi	r31, 0x01	; 1
    1964:	4f 1a       	sub	r4, r31
    1966:	51 08       	sbc	r5, r1
    1968:	41 14       	cp	r4, r1
    196a:	51 04       	cpc	r5, r1
    196c:	71 f7       	brne	.-36     	; 0x194a <vfprintf+0x18c>
    196e:	e5 c0       	rjmp	.+458    	; 0x1b3a <vfprintf+0x37c>
    1970:	84 36       	cpi	r24, 0x64	; 100
    1972:	11 f0       	breq	.+4      	; 0x1978 <vfprintf+0x1ba>
    1974:	89 36       	cpi	r24, 0x69	; 105
    1976:	39 f5       	brne	.+78     	; 0x19c6 <vfprintf+0x208>
    1978:	f8 01       	movw	r30, r16
    197a:	27 ff       	sbrs	r18, 7
    197c:	07 c0       	rjmp	.+14     	; 0x198c <vfprintf+0x1ce>
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	0c 5f       	subi	r16, 0xFC	; 252
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	08 c0       	rjmp	.+16     	; 0x199c <vfprintf+0x1de>
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	88 27       	eor	r24, r24
    1992:	77 fd       	sbrc	r23, 7
    1994:	80 95       	com	r24
    1996:	98 2f       	mov	r25, r24
    1998:	0e 5f       	subi	r16, 0xFE	; 254
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	2f 76       	andi	r18, 0x6F	; 111
    199e:	b2 2e       	mov	r11, r18
    19a0:	97 ff       	sbrs	r25, 7
    19a2:	09 c0       	rjmp	.+18     	; 0x19b6 <vfprintf+0x1f8>
    19a4:	90 95       	com	r25
    19a6:	80 95       	com	r24
    19a8:	70 95       	com	r23
    19aa:	61 95       	neg	r22
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	8f 4f       	sbci	r24, 0xFF	; 255
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	20 68       	ori	r18, 0x80	; 128
    19b4:	b2 2e       	mov	r11, r18
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	a4 01       	movw	r20, r8
    19bc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ultoa_invert>
    19c0:	a8 2e       	mov	r10, r24
    19c2:	a8 18       	sub	r10, r8
    19c4:	44 c0       	rjmp	.+136    	; 0x1a4e <vfprintf+0x290>
    19c6:	85 37       	cpi	r24, 0x75	; 117
    19c8:	29 f4       	brne	.+10     	; 0x19d4 <vfprintf+0x216>
    19ca:	2f 7e       	andi	r18, 0xEF	; 239
    19cc:	b2 2e       	mov	r11, r18
    19ce:	2a e0       	ldi	r18, 0x0A	; 10
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	25 c0       	rjmp	.+74     	; 0x1a1e <vfprintf+0x260>
    19d4:	f2 2f       	mov	r31, r18
    19d6:	f9 7f       	andi	r31, 0xF9	; 249
    19d8:	bf 2e       	mov	r11, r31
    19da:	8f 36       	cpi	r24, 0x6F	; 111
    19dc:	c1 f0       	breq	.+48     	; 0x1a0e <vfprintf+0x250>
    19de:	18 f4       	brcc	.+6      	; 0x19e6 <vfprintf+0x228>
    19e0:	88 35       	cpi	r24, 0x58	; 88
    19e2:	79 f0       	breq	.+30     	; 0x1a02 <vfprintf+0x244>
    19e4:	b4 c0       	rjmp	.+360    	; 0x1b4e <vfprintf+0x390>
    19e6:	80 37       	cpi	r24, 0x70	; 112
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <vfprintf+0x232>
    19ea:	88 37       	cpi	r24, 0x78	; 120
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <vfprintf+0x238>
    19ee:	af c0       	rjmp	.+350    	; 0x1b4e <vfprintf+0x390>
    19f0:	2f 2f       	mov	r18, r31
    19f2:	20 61       	ori	r18, 0x10	; 16
    19f4:	b2 2e       	mov	r11, r18
    19f6:	b4 fe       	sbrs	r11, 4
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <vfprintf+0x256>
    19fa:	8b 2d       	mov	r24, r11
    19fc:	84 60       	ori	r24, 0x04	; 4
    19fe:	b8 2e       	mov	r11, r24
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <vfprintf+0x256>
    1a02:	24 ff       	sbrs	r18, 4
    1a04:	0a c0       	rjmp	.+20     	; 0x1a1a <vfprintf+0x25c>
    1a06:	9f 2f       	mov	r25, r31
    1a08:	96 60       	ori	r25, 0x06	; 6
    1a0a:	b9 2e       	mov	r11, r25
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <vfprintf+0x25c>
    1a0e:	28 e0       	ldi	r18, 0x08	; 8
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <vfprintf+0x260>
    1a14:	20 e1       	ldi	r18, 0x10	; 16
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <vfprintf+0x260>
    1a1a:	20 e1       	ldi	r18, 0x10	; 16
    1a1c:	32 e0       	ldi	r19, 0x02	; 2
    1a1e:	f8 01       	movw	r30, r16
    1a20:	b7 fe       	sbrs	r11, 7
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <vfprintf+0x274>
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	0c 5f       	subi	r16, 0xFC	; 252
    1a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <vfprintf+0x280>
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 5f       	subi	r16, 0xFE	; 254
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	a4 01       	movw	r20, r8
    1a40:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ultoa_invert>
    1a44:	a8 2e       	mov	r10, r24
    1a46:	a8 18       	sub	r10, r8
    1a48:	fb 2d       	mov	r31, r11
    1a4a:	ff 77       	andi	r31, 0x7F	; 127
    1a4c:	bf 2e       	mov	r11, r31
    1a4e:	b6 fe       	sbrs	r11, 6
    1a50:	0b c0       	rjmp	.+22     	; 0x1a68 <vfprintf+0x2aa>
    1a52:	2b 2d       	mov	r18, r11
    1a54:	2e 7f       	andi	r18, 0xFE	; 254
    1a56:	a5 14       	cp	r10, r5
    1a58:	50 f4       	brcc	.+20     	; 0x1a6e <vfprintf+0x2b0>
    1a5a:	b4 fe       	sbrs	r11, 4
    1a5c:	0a c0       	rjmp	.+20     	; 0x1a72 <vfprintf+0x2b4>
    1a5e:	b2 fc       	sbrc	r11, 2
    1a60:	08 c0       	rjmp	.+16     	; 0x1a72 <vfprintf+0x2b4>
    1a62:	2b 2d       	mov	r18, r11
    1a64:	2e 7e       	andi	r18, 0xEE	; 238
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <vfprintf+0x2b4>
    1a68:	7a 2c       	mov	r7, r10
    1a6a:	2b 2d       	mov	r18, r11
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <vfprintf+0x2b6>
    1a6e:	7a 2c       	mov	r7, r10
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <vfprintf+0x2b6>
    1a72:	75 2c       	mov	r7, r5
    1a74:	24 ff       	sbrs	r18, 4
    1a76:	0d c0       	rjmp	.+26     	; 0x1a92 <vfprintf+0x2d4>
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ea 0d       	add	r30, r10
    1a7c:	f1 1d       	adc	r31, r1
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 33       	cpi	r24, 0x30	; 48
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <vfprintf+0x2ca>
    1a84:	29 7e       	andi	r18, 0xE9	; 233
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <vfprintf+0x2dc>
    1a88:	22 ff       	sbrs	r18, 2
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <vfprintf+0x2da>
    1a8c:	73 94       	inc	r7
    1a8e:	73 94       	inc	r7
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <vfprintf+0x2dc>
    1a92:	82 2f       	mov	r24, r18
    1a94:	86 78       	andi	r24, 0x86	; 134
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <vfprintf+0x2dc>
    1a98:	73 94       	inc	r7
    1a9a:	23 fd       	sbrc	r18, 3
    1a9c:	13 c0       	rjmp	.+38     	; 0x1ac4 <vfprintf+0x306>
    1a9e:	20 ff       	sbrs	r18, 0
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <vfprintf+0x2f0>
    1aa2:	5a 2c       	mov	r5, r10
    1aa4:	73 14       	cp	r7, r3
    1aa6:	18 f4       	brcc	.+6      	; 0x1aae <vfprintf+0x2f0>
    1aa8:	53 0c       	add	r5, r3
    1aaa:	57 18       	sub	r5, r7
    1aac:	73 2c       	mov	r7, r3
    1aae:	73 14       	cp	r7, r3
    1ab0:	68 f4       	brcc	.+26     	; 0x1acc <vfprintf+0x30e>
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	80 e2       	ldi	r24, 0x20	; 32
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	2c 87       	std	Y+12, r18	; 0x0c
    1aba:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1abe:	73 94       	inc	r7
    1ac0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ac2:	f5 cf       	rjmp	.-22     	; 0x1aae <vfprintf+0x2f0>
    1ac4:	73 14       	cp	r7, r3
    1ac6:	10 f4       	brcc	.+4      	; 0x1acc <vfprintf+0x30e>
    1ac8:	37 18       	sub	r3, r7
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <vfprintf+0x310>
    1acc:	31 2c       	mov	r3, r1
    1ace:	24 ff       	sbrs	r18, 4
    1ad0:	12 c0       	rjmp	.+36     	; 0x1af6 <vfprintf+0x338>
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	80 e3       	ldi	r24, 0x30	; 48
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	2c 87       	std	Y+12, r18	; 0x0c
    1ada:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1ade:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae0:	22 ff       	sbrs	r18, 2
    1ae2:	17 c0       	rjmp	.+46     	; 0x1b12 <vfprintf+0x354>
    1ae4:	21 ff       	sbrs	r18, 1
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <vfprintf+0x330>
    1ae8:	88 e5       	ldi	r24, 0x58	; 88
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <vfprintf+0x334>
    1aee:	88 e7       	ldi	r24, 0x78	; 120
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	b7 01       	movw	r22, r14
    1af4:	0c c0       	rjmp	.+24     	; 0x1b0e <vfprintf+0x350>
    1af6:	82 2f       	mov	r24, r18
    1af8:	86 78       	andi	r24, 0x86	; 134
    1afa:	59 f0       	breq	.+22     	; 0x1b12 <vfprintf+0x354>
    1afc:	21 fd       	sbrc	r18, 1
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <vfprintf+0x346>
    1b00:	80 e2       	ldi	r24, 0x20	; 32
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <vfprintf+0x348>
    1b04:	8b e2       	ldi	r24, 0x2B	; 43
    1b06:	27 fd       	sbrc	r18, 7
    1b08:	8d e2       	ldi	r24, 0x2D	; 45
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1b12:	a5 14       	cp	r10, r5
    1b14:	38 f4       	brcc	.+14     	; 0x1b24 <vfprintf+0x366>
    1b16:	b7 01       	movw	r22, r14
    1b18:	80 e3       	ldi	r24, 0x30	; 48
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1b20:	5a 94       	dec	r5
    1b22:	f7 cf       	rjmp	.-18     	; 0x1b12 <vfprintf+0x354>
    1b24:	aa 94       	dec	r10
    1b26:	f4 01       	movw	r30, r8
    1b28:	ea 0d       	add	r30, r10
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	80 81       	ld	r24, Z
    1b2e:	b7 01       	movw	r22, r14
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1b36:	a1 10       	cpse	r10, r1
    1b38:	f5 cf       	rjmp	.-22     	; 0x1b24 <vfprintf+0x366>
    1b3a:	33 20       	and	r3, r3
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <vfprintf+0x382>
    1b3e:	51 ce       	rjmp	.-862    	; 0x17e2 <vfprintf+0x24>
    1b40:	b7 01       	movw	r22, r14
    1b42:	80 e2       	ldi	r24, 0x20	; 32
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <fputc>
    1b4a:	3a 94       	dec	r3
    1b4c:	f6 cf       	rjmp	.-20     	; 0x1b3a <vfprintf+0x37c>
    1b4e:	f7 01       	movw	r30, r14
    1b50:	86 81       	ldd	r24, Z+6	; 0x06
    1b52:	97 81       	ldd	r25, Z+7	; 0x07
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <vfprintf+0x39c>
    1b56:	8f ef       	ldi	r24, 0xFF	; 255
    1b58:	9f ef       	ldi	r25, 0xFF	; 255
    1b5a:	2c 96       	adiw	r28, 0x0c	; 12
    1b5c:	e2 e1       	ldi	r30, 0x12	; 18
    1b5e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__>

00001b62 <calloc>:
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	86 9f       	mul	r24, r22
    1b6c:	80 01       	movw	r16, r0
    1b6e:	87 9f       	mul	r24, r23
    1b70:	10 0d       	add	r17, r0
    1b72:	96 9f       	mul	r25, r22
    1b74:	10 0d       	add	r17, r0
    1b76:	11 24       	eor	r1, r1
    1b78:	c8 01       	movw	r24, r16
    1b7a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <malloc>
    1b7e:	ec 01       	movw	r28, r24
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <calloc+0x2c>
    1b84:	a8 01       	movw	r20, r16
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <memset>
    1b8e:	ce 01       	movw	r24, r28
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <malloc>:
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	10 f4       	brcc	.+4      	; 0x1ba8 <malloc+0xe>
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	e0 91 24 04 	lds	r30, 0x0424
    1bac:	f0 91 25 04 	lds	r31, 0x0425
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	a0 e0       	ldi	r26, 0x00	; 0
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	30 97       	sbiw	r30, 0x00	; 0
    1bba:	39 f1       	breq	.+78     	; 0x1c0a <malloc+0x70>
    1bbc:	40 81       	ld	r20, Z
    1bbe:	51 81       	ldd	r21, Z+1	; 0x01
    1bc0:	48 17       	cp	r20, r24
    1bc2:	59 07       	cpc	r21, r25
    1bc4:	b8 f0       	brcs	.+46     	; 0x1bf4 <malloc+0x5a>
    1bc6:	48 17       	cp	r20, r24
    1bc8:	59 07       	cpc	r21, r25
    1bca:	71 f4       	brne	.+28     	; 0x1be8 <malloc+0x4e>
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	10 97       	sbiw	r26, 0x00	; 0
    1bd2:	29 f0       	breq	.+10     	; 0x1bde <malloc+0x44>
    1bd4:	13 96       	adiw	r26, 0x03	; 3
    1bd6:	9c 93       	st	X, r25
    1bd8:	8e 93       	st	-X, r24
    1bda:	12 97       	sbiw	r26, 0x02	; 2
    1bdc:	2c c0       	rjmp	.+88     	; 0x1c36 <malloc+0x9c>
    1bde:	90 93 25 04 	sts	0x0425, r25
    1be2:	80 93 24 04 	sts	0x0424, r24
    1be6:	27 c0       	rjmp	.+78     	; 0x1c36 <malloc+0x9c>
    1be8:	21 15       	cp	r18, r1
    1bea:	31 05       	cpc	r19, r1
    1bec:	31 f0       	breq	.+12     	; 0x1bfa <malloc+0x60>
    1bee:	42 17       	cp	r20, r18
    1bf0:	53 07       	cpc	r21, r19
    1bf2:	18 f0       	brcs	.+6      	; 0x1bfa <malloc+0x60>
    1bf4:	a9 01       	movw	r20, r18
    1bf6:	db 01       	movw	r26, r22
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <malloc+0x62>
    1bfa:	ef 01       	movw	r28, r30
    1bfc:	9a 01       	movw	r18, r20
    1bfe:	bd 01       	movw	r22, r26
    1c00:	df 01       	movw	r26, r30
    1c02:	02 80       	ldd	r0, Z+2	; 0x02
    1c04:	f3 81       	ldd	r31, Z+3	; 0x03
    1c06:	e0 2d       	mov	r30, r0
    1c08:	d7 cf       	rjmp	.-82     	; 0x1bb8 <malloc+0x1e>
    1c0a:	21 15       	cp	r18, r1
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	f9 f0       	breq	.+62     	; 0x1c4e <malloc+0xb4>
    1c10:	28 1b       	sub	r18, r24
    1c12:	39 0b       	sbc	r19, r25
    1c14:	24 30       	cpi	r18, 0x04	; 4
    1c16:	31 05       	cpc	r19, r1
    1c18:	80 f4       	brcc	.+32     	; 0x1c3a <malloc+0xa0>
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	61 15       	cp	r22, r1
    1c20:	71 05       	cpc	r23, r1
    1c22:	21 f0       	breq	.+8      	; 0x1c2c <malloc+0x92>
    1c24:	fb 01       	movw	r30, r22
    1c26:	93 83       	std	Z+3, r25	; 0x03
    1c28:	82 83       	std	Z+2, r24	; 0x02
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <malloc+0x9a>
    1c2c:	90 93 25 04 	sts	0x0425, r25
    1c30:	80 93 24 04 	sts	0x0424, r24
    1c34:	fe 01       	movw	r30, r28
    1c36:	32 96       	adiw	r30, 0x02	; 2
    1c38:	44 c0       	rjmp	.+136    	; 0x1cc2 <malloc+0x128>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	81 93       	st	Z+, r24
    1c42:	91 93       	st	Z+, r25
    1c44:	22 50       	subi	r18, 0x02	; 2
    1c46:	31 09       	sbc	r19, r1
    1c48:	39 83       	std	Y+1, r19	; 0x01
    1c4a:	28 83       	st	Y, r18
    1c4c:	3a c0       	rjmp	.+116    	; 0x1cc2 <malloc+0x128>
    1c4e:	20 91 22 04 	lds	r18, 0x0422
    1c52:	30 91 23 04 	lds	r19, 0x0423
    1c56:	23 2b       	or	r18, r19
    1c58:	41 f4       	brne	.+16     	; 0x1c6a <malloc+0xd0>
    1c5a:	20 91 06 01 	lds	r18, 0x0106
    1c5e:	30 91 07 01 	lds	r19, 0x0107
    1c62:	30 93 23 04 	sts	0x0423, r19
    1c66:	20 93 22 04 	sts	0x0422, r18
    1c6a:	20 91 04 01 	lds	r18, 0x0104
    1c6e:	30 91 05 01 	lds	r19, 0x0105
    1c72:	21 15       	cp	r18, r1
    1c74:	31 05       	cpc	r19, r1
    1c76:	41 f4       	brne	.+16     	; 0x1c88 <malloc+0xee>
    1c78:	2d b7       	in	r18, 0x3d	; 61
    1c7a:	3e b7       	in	r19, 0x3e	; 62
    1c7c:	40 91 08 01 	lds	r20, 0x0108
    1c80:	50 91 09 01 	lds	r21, 0x0109
    1c84:	24 1b       	sub	r18, r20
    1c86:	35 0b       	sbc	r19, r21
    1c88:	e0 91 22 04 	lds	r30, 0x0422
    1c8c:	f0 91 23 04 	lds	r31, 0x0423
    1c90:	e2 17       	cp	r30, r18
    1c92:	f3 07       	cpc	r31, r19
    1c94:	a0 f4       	brcc	.+40     	; 0x1cbe <malloc+0x124>
    1c96:	2e 1b       	sub	r18, r30
    1c98:	3f 0b       	sbc	r19, r31
    1c9a:	28 17       	cp	r18, r24
    1c9c:	39 07       	cpc	r19, r25
    1c9e:	78 f0       	brcs	.+30     	; 0x1cbe <malloc+0x124>
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	4e 5f       	subi	r20, 0xFE	; 254
    1ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca6:	24 17       	cp	r18, r20
    1ca8:	35 07       	cpc	r19, r21
    1caa:	48 f0       	brcs	.+18     	; 0x1cbe <malloc+0x124>
    1cac:	4e 0f       	add	r20, r30
    1cae:	5f 1f       	adc	r21, r31
    1cb0:	50 93 23 04 	sts	0x0423, r21
    1cb4:	40 93 22 04 	sts	0x0422, r20
    1cb8:	81 93       	st	Z+, r24
    1cba:	91 93       	st	Z+, r25
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <malloc+0x128>
    1cbe:	e0 e0       	ldi	r30, 0x00	; 0
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	cf 01       	movw	r24, r30
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <free>:
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <free+0xa>
    1cd2:	87 c0       	rjmp	.+270    	; 0x1de2 <free+0x118>
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	32 97       	sbiw	r30, 0x02	; 2
    1cd8:	13 82       	std	Z+3, r1	; 0x03
    1cda:	12 82       	std	Z+2, r1	; 0x02
    1cdc:	c0 91 24 04 	lds	r28, 0x0424
    1ce0:	d0 91 25 04 	lds	r29, 0x0425
    1ce4:	20 97       	sbiw	r28, 0x00	; 0
    1ce6:	81 f4       	brne	.+32     	; 0x1d08 <free+0x3e>
    1ce8:	20 81       	ld	r18, Z
    1cea:	31 81       	ldd	r19, Z+1	; 0x01
    1cec:	28 0f       	add	r18, r24
    1cee:	39 1f       	adc	r19, r25
    1cf0:	80 91 22 04 	lds	r24, 0x0422
    1cf4:	90 91 23 04 	lds	r25, 0x0423
    1cf8:	82 17       	cp	r24, r18
    1cfa:	93 07       	cpc	r25, r19
    1cfc:	79 f5       	brne	.+94     	; 0x1d5c <free+0x92>
    1cfe:	f0 93 23 04 	sts	0x0423, r31
    1d02:	e0 93 22 04 	sts	0x0422, r30
    1d06:	6d c0       	rjmp	.+218    	; 0x1de2 <free+0x118>
    1d08:	de 01       	movw	r26, r28
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	ae 17       	cp	r26, r30
    1d10:	bf 07       	cpc	r27, r31
    1d12:	50 f4       	brcc	.+20     	; 0x1d28 <free+0x5e>
    1d14:	12 96       	adiw	r26, 0x02	; 2
    1d16:	4d 91       	ld	r20, X+
    1d18:	5c 91       	ld	r21, X
    1d1a:	13 97       	sbiw	r26, 0x03	; 3
    1d1c:	9d 01       	movw	r18, r26
    1d1e:	41 15       	cp	r20, r1
    1d20:	51 05       	cpc	r21, r1
    1d22:	09 f1       	breq	.+66     	; 0x1d66 <free+0x9c>
    1d24:	da 01       	movw	r26, r20
    1d26:	f3 cf       	rjmp	.-26     	; 0x1d0e <free+0x44>
    1d28:	b3 83       	std	Z+3, r27	; 0x03
    1d2a:	a2 83       	std	Z+2, r26	; 0x02
    1d2c:	40 81       	ld	r20, Z
    1d2e:	51 81       	ldd	r21, Z+1	; 0x01
    1d30:	84 0f       	add	r24, r20
    1d32:	95 1f       	adc	r25, r21
    1d34:	8a 17       	cp	r24, r26
    1d36:	9b 07       	cpc	r25, r27
    1d38:	71 f4       	brne	.+28     	; 0x1d56 <free+0x8c>
    1d3a:	8d 91       	ld	r24, X+
    1d3c:	9c 91       	ld	r25, X
    1d3e:	11 97       	sbiw	r26, 0x01	; 1
    1d40:	84 0f       	add	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	02 96       	adiw	r24, 0x02	; 2
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    1d4a:	12 96       	adiw	r26, 0x02	; 2
    1d4c:	8d 91       	ld	r24, X+
    1d4e:	9c 91       	ld	r25, X
    1d50:	13 97       	sbiw	r26, 0x03	; 3
    1d52:	93 83       	std	Z+3, r25	; 0x03
    1d54:	82 83       	std	Z+2, r24	; 0x02
    1d56:	21 15       	cp	r18, r1
    1d58:	31 05       	cpc	r19, r1
    1d5a:	29 f4       	brne	.+10     	; 0x1d66 <free+0x9c>
    1d5c:	f0 93 25 04 	sts	0x0425, r31
    1d60:	e0 93 24 04 	sts	0x0424, r30
    1d64:	3e c0       	rjmp	.+124    	; 0x1de2 <free+0x118>
    1d66:	d9 01       	movw	r26, r18
    1d68:	13 96       	adiw	r26, 0x03	; 3
    1d6a:	fc 93       	st	X, r31
    1d6c:	ee 93       	st	-X, r30
    1d6e:	12 97       	sbiw	r26, 0x02	; 2
    1d70:	4d 91       	ld	r20, X+
    1d72:	5d 91       	ld	r21, X+
    1d74:	a4 0f       	add	r26, r20
    1d76:	b5 1f       	adc	r27, r21
    1d78:	ea 17       	cp	r30, r26
    1d7a:	fb 07       	cpc	r31, r27
    1d7c:	79 f4       	brne	.+30     	; 0x1d9c <free+0xd2>
    1d7e:	80 81       	ld	r24, Z
    1d80:	91 81       	ldd	r25, Z+1	; 0x01
    1d82:	84 0f       	add	r24, r20
    1d84:	95 1f       	adc	r25, r21
    1d86:	02 96       	adiw	r24, 0x02	; 2
    1d88:	d9 01       	movw	r26, r18
    1d8a:	11 96       	adiw	r26, 0x01	; 1
    1d8c:	9c 93       	st	X, r25
    1d8e:	8e 93       	st	-X, r24
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	13 96       	adiw	r26, 0x03	; 3
    1d96:	9c 93       	st	X, r25
    1d98:	8e 93       	st	-X, r24
    1d9a:	12 97       	sbiw	r26, 0x02	; 2
    1d9c:	e0 e0       	ldi	r30, 0x00	; 0
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	19 f0       	breq	.+6      	; 0x1dae <free+0xe4>
    1da8:	fe 01       	movw	r30, r28
    1daa:	ec 01       	movw	r28, r24
    1dac:	f9 cf       	rjmp	.-14     	; 0x1da0 <free+0xd6>
    1dae:	ce 01       	movw	r24, r28
    1db0:	02 96       	adiw	r24, 0x02	; 2
    1db2:	28 81       	ld	r18, Y
    1db4:	39 81       	ldd	r19, Y+1	; 0x01
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	20 91 22 04 	lds	r18, 0x0422
    1dbe:	30 91 23 04 	lds	r19, 0x0423
    1dc2:	28 17       	cp	r18, r24
    1dc4:	39 07       	cpc	r19, r25
    1dc6:	69 f4       	brne	.+26     	; 0x1de2 <free+0x118>
    1dc8:	30 97       	sbiw	r30, 0x00	; 0
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <free+0x10c>
    1dcc:	10 92 25 04 	sts	0x0425, r1
    1dd0:	10 92 24 04 	sts	0x0424, r1
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <free+0x110>
    1dd6:	13 82       	std	Z+3, r1	; 0x03
    1dd8:	12 82       	std	Z+2, r1	; 0x02
    1dda:	d0 93 23 04 	sts	0x0423, r29
    1dde:	c0 93 22 04 	sts	0x0422, r28
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	08 95       	ret

00001de8 <strnlen_P>:
    1de8:	fc 01       	movw	r30, r24
    1dea:	05 90       	lpm	r0, Z+
    1dec:	61 50       	subi	r22, 0x01	; 1
    1dee:	70 40       	sbci	r23, 0x00	; 0
    1df0:	01 10       	cpse	r0, r1
    1df2:	d8 f7       	brcc	.-10     	; 0x1dea <strnlen_P+0x2>
    1df4:	80 95       	com	r24
    1df6:	90 95       	com	r25
    1df8:	8e 0f       	add	r24, r30
    1dfa:	9f 1f       	adc	r25, r31
    1dfc:	08 95       	ret

00001dfe <memset>:
    1dfe:	dc 01       	movw	r26, r24
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <memset+0x6>
    1e02:	6d 93       	st	X+, r22
    1e04:	41 50       	subi	r20, 0x01	; 1
    1e06:	50 40       	sbci	r21, 0x00	; 0
    1e08:	e0 f7       	brcc	.-8      	; 0x1e02 <memset+0x4>
    1e0a:	08 95       	ret

00001e0c <strnlen>:
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	61 50       	subi	r22, 0x01	; 1
    1e10:	70 40       	sbci	r23, 0x00	; 0
    1e12:	01 90       	ld	r0, Z+
    1e14:	01 10       	cpse	r0, r1
    1e16:	d8 f7       	brcc	.-10     	; 0x1e0e <strnlen+0x2>
    1e18:	80 95       	com	r24
    1e1a:	90 95       	com	r25
    1e1c:	8e 0f       	add	r24, r30
    1e1e:	9f 1f       	adc	r25, r31
    1e20:	08 95       	ret

00001e22 <fputc>:
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	18 2f       	mov	r17, r24
    1e2c:	09 2f       	mov	r16, r25
    1e2e:	eb 01       	movw	r28, r22
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	81 fd       	sbrc	r24, 1
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <fputc+0x1a>
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	9f ef       	ldi	r25, 0xFF	; 255
    1e3a:	20 c0       	rjmp	.+64     	; 0x1e7c <fputc+0x5a>
    1e3c:	82 ff       	sbrs	r24, 2
    1e3e:	10 c0       	rjmp	.+32     	; 0x1e60 <fputc+0x3e>
    1e40:	4e 81       	ldd	r20, Y+6	; 0x06
    1e42:	5f 81       	ldd	r21, Y+7	; 0x07
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	42 17       	cp	r20, r18
    1e4a:	53 07       	cpc	r21, r19
    1e4c:	7c f4       	brge	.+30     	; 0x1e6c <fputc+0x4a>
    1e4e:	e8 81       	ld	r30, Y
    1e50:	f9 81       	ldd	r31, Y+1	; 0x01
    1e52:	9f 01       	movw	r18, r30
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	39 83       	std	Y+1, r19	; 0x01
    1e5a:	28 83       	st	Y, r18
    1e5c:	10 83       	st	Z, r17
    1e5e:	06 c0       	rjmp	.+12     	; 0x1e6c <fputc+0x4a>
    1e60:	e8 85       	ldd	r30, Y+8	; 0x08
    1e62:	f9 85       	ldd	r31, Y+9	; 0x09
    1e64:	81 2f       	mov	r24, r17
    1e66:	09 95       	icall
    1e68:	89 2b       	or	r24, r25
    1e6a:	29 f7       	brne	.-54     	; 0x1e36 <fputc+0x14>
    1e6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e70:	2f 5f       	subi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	3f 83       	std	Y+7, r19	; 0x07
    1e76:	2e 83       	std	Y+6, r18	; 0x06
    1e78:	81 2f       	mov	r24, r17
    1e7a:	90 2f       	mov	r25, r16
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <__ultoa_invert>:
    1e86:	fa 01       	movw	r30, r20
    1e88:	aa 27       	eor	r26, r26
    1e8a:	28 30       	cpi	r18, 0x08	; 8
    1e8c:	51 f1       	breq	.+84     	; 0x1ee2 <__ultoa_invert+0x5c>
    1e8e:	20 31       	cpi	r18, 0x10	; 16
    1e90:	81 f1       	breq	.+96     	; 0x1ef2 <__ultoa_invert+0x6c>
    1e92:	e8 94       	clt
    1e94:	6f 93       	push	r22
    1e96:	6e 7f       	andi	r22, 0xFE	; 254
    1e98:	6e 5f       	subi	r22, 0xFE	; 254
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	af 4f       	sbci	r26, 0xFF	; 255
    1ea2:	b1 e0       	ldi	r27, 0x01	; 1
    1ea4:	3e d0       	rcall	.+124    	; 0x1f22 <__ultoa_invert+0x9c>
    1ea6:	b4 e0       	ldi	r27, 0x04	; 4
    1ea8:	3c d0       	rcall	.+120    	; 0x1f22 <__ultoa_invert+0x9c>
    1eaa:	67 0f       	add	r22, r23
    1eac:	78 1f       	adc	r23, r24
    1eae:	89 1f       	adc	r24, r25
    1eb0:	9a 1f       	adc	r25, r26
    1eb2:	a1 1d       	adc	r26, r1
    1eb4:	68 0f       	add	r22, r24
    1eb6:	79 1f       	adc	r23, r25
    1eb8:	8a 1f       	adc	r24, r26
    1eba:	91 1d       	adc	r25, r1
    1ebc:	a1 1d       	adc	r26, r1
    1ebe:	6a 0f       	add	r22, r26
    1ec0:	71 1d       	adc	r23, r1
    1ec2:	81 1d       	adc	r24, r1
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	a1 1d       	adc	r26, r1
    1ec8:	20 d0       	rcall	.+64     	; 0x1f0a <__ultoa_invert+0x84>
    1eca:	09 f4       	brne	.+2      	; 0x1ece <__ultoa_invert+0x48>
    1ecc:	68 94       	set
    1ece:	3f 91       	pop	r19
    1ed0:	2a e0       	ldi	r18, 0x0A	; 10
    1ed2:	26 9f       	mul	r18, r22
    1ed4:	11 24       	eor	r1, r1
    1ed6:	30 19       	sub	r19, r0
    1ed8:	30 5d       	subi	r19, 0xD0	; 208
    1eda:	31 93       	st	Z+, r19
    1edc:	de f6       	brtc	.-74     	; 0x1e94 <__ultoa_invert+0xe>
    1ede:	cf 01       	movw	r24, r30
    1ee0:	08 95       	ret
    1ee2:	46 2f       	mov	r20, r22
    1ee4:	47 70       	andi	r20, 0x07	; 7
    1ee6:	40 5d       	subi	r20, 0xD0	; 208
    1ee8:	41 93       	st	Z+, r20
    1eea:	b3 e0       	ldi	r27, 0x03	; 3
    1eec:	0f d0       	rcall	.+30     	; 0x1f0c <__ultoa_invert+0x86>
    1eee:	c9 f7       	brne	.-14     	; 0x1ee2 <__ultoa_invert+0x5c>
    1ef0:	f6 cf       	rjmp	.-20     	; 0x1ede <__ultoa_invert+0x58>
    1ef2:	46 2f       	mov	r20, r22
    1ef4:	4f 70       	andi	r20, 0x0F	; 15
    1ef6:	40 5d       	subi	r20, 0xD0	; 208
    1ef8:	4a 33       	cpi	r20, 0x3A	; 58
    1efa:	18 f0       	brcs	.+6      	; 0x1f02 <__ultoa_invert+0x7c>
    1efc:	49 5d       	subi	r20, 0xD9	; 217
    1efe:	31 fd       	sbrc	r19, 1
    1f00:	40 52       	subi	r20, 0x20	; 32
    1f02:	41 93       	st	Z+, r20
    1f04:	02 d0       	rcall	.+4      	; 0x1f0a <__ultoa_invert+0x84>
    1f06:	a9 f7       	brne	.-22     	; 0x1ef2 <__ultoa_invert+0x6c>
    1f08:	ea cf       	rjmp	.-44     	; 0x1ede <__ultoa_invert+0x58>
    1f0a:	b4 e0       	ldi	r27, 0x04	; 4
    1f0c:	a6 95       	lsr	r26
    1f0e:	97 95       	ror	r25
    1f10:	87 95       	ror	r24
    1f12:	77 95       	ror	r23
    1f14:	67 95       	ror	r22
    1f16:	ba 95       	dec	r27
    1f18:	c9 f7       	brne	.-14     	; 0x1f0c <__ultoa_invert+0x86>
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	61 05       	cpc	r22, r1
    1f1e:	71 05       	cpc	r23, r1
    1f20:	08 95       	ret
    1f22:	9b 01       	movw	r18, r22
    1f24:	ac 01       	movw	r20, r24
    1f26:	0a 2e       	mov	r0, r26
    1f28:	06 94       	lsr	r0
    1f2a:	57 95       	ror	r21
    1f2c:	47 95       	ror	r20
    1f2e:	37 95       	ror	r19
    1f30:	27 95       	ror	r18
    1f32:	ba 95       	dec	r27
    1f34:	c9 f7       	brne	.-14     	; 0x1f28 <__ultoa_invert+0xa2>
    1f36:	62 0f       	add	r22, r18
    1f38:	73 1f       	adc	r23, r19
    1f3a:	84 1f       	adc	r24, r20
    1f3c:	95 1f       	adc	r25, r21
    1f3e:	a0 1d       	adc	r26, r0
    1f40:	08 95       	ret

00001f42 <__divmodsi4>:
    1f42:	05 2e       	mov	r0, r21
    1f44:	97 fb       	bst	r25, 7
    1f46:	1e f4       	brtc	.+6      	; 0x1f4e <__divmodsi4+0xc>
    1f48:	00 94       	com	r0
    1f4a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__negsi2>
    1f4e:	57 fd       	sbrc	r21, 7
    1f50:	07 d0       	rcall	.+14     	; 0x1f60 <__divmodsi4_neg2>
    1f52:	0e 94 0a 10 	call	0x2014	; 0x2014 <__udivmodsi4>
    1f56:	07 fc       	sbrc	r0, 7
    1f58:	03 d0       	rcall	.+6      	; 0x1f60 <__divmodsi4_neg2>
    1f5a:	4e f4       	brtc	.+18     	; 0x1f6e <__divmodsi4_exit>
    1f5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__negsi2>

00001f60 <__divmodsi4_neg2>:
    1f60:	50 95       	com	r21
    1f62:	40 95       	com	r20
    1f64:	30 95       	com	r19
    1f66:	21 95       	neg	r18
    1f68:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255

00001f6e <__divmodsi4_exit>:
    1f6e:	08 95       	ret

00001f70 <__negsi2>:
    1f70:	90 95       	com	r25
    1f72:	80 95       	com	r24
    1f74:	70 95       	com	r23
    1f76:	61 95       	neg	r22
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	08 95       	ret

00001f80 <__muluhisi3>:
    1f80:	0e 94 2c 10 	call	0x2058	; 0x2058 <__umulhisi3>
    1f84:	a5 9f       	mul	r26, r21
    1f86:	90 0d       	add	r25, r0
    1f88:	b4 9f       	mul	r27, r20
    1f8a:	90 0d       	add	r25, r0
    1f8c:	a4 9f       	mul	r26, r20
    1f8e:	80 0d       	add	r24, r0
    1f90:	91 1d       	adc	r25, r1
    1f92:	11 24       	eor	r1, r1
    1f94:	08 95       	ret

00001f96 <__mulshisi3>:
    1f96:	b7 ff       	sbrs	r27, 7
    1f98:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__muluhisi3>

00001f9c <__mulohisi3>:
    1f9c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__muluhisi3>
    1fa0:	82 1b       	sub	r24, r18
    1fa2:	93 0b       	sbc	r25, r19
    1fa4:	08 95       	ret

00001fa6 <__prologue_saves__>:
    1fa6:	2f 92       	push	r2
    1fa8:	3f 92       	push	r3
    1faa:	4f 92       	push	r4
    1fac:	5f 92       	push	r5
    1fae:	6f 92       	push	r6
    1fb0:	7f 92       	push	r7
    1fb2:	8f 92       	push	r8
    1fb4:	9f 92       	push	r9
    1fb6:	af 92       	push	r10
    1fb8:	bf 92       	push	r11
    1fba:	cf 92       	push	r12
    1fbc:	df 92       	push	r13
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	ca 1b       	sub	r28, r26
    1fd0:	db 0b       	sbc	r29, r27
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	09 94       	ijmp

00001fde <__epilogue_restores__>:
    1fde:	2a 88       	ldd	r2, Y+18	; 0x12
    1fe0:	39 88       	ldd	r3, Y+17	; 0x11
    1fe2:	48 88       	ldd	r4, Y+16	; 0x10
    1fe4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fe8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ff0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ff2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff4:	df 80       	ldd	r13, Y+7	; 0x07
    1ff6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff8:	fd 80       	ldd	r15, Y+5	; 0x05
    1ffa:	0c 81       	ldd	r16, Y+4	; 0x04
    1ffc:	1b 81       	ldd	r17, Y+3	; 0x03
    1ffe:	aa 81       	ldd	r26, Y+2	; 0x02
    2000:	b9 81       	ldd	r27, Y+1	; 0x01
    2002:	ce 0f       	add	r28, r30
    2004:	d1 1d       	adc	r29, r1
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	ed 01       	movw	r28, r26
    2012:	08 95       	ret

00002014 <__udivmodsi4>:
    2014:	a1 e2       	ldi	r26, 0x21	; 33
    2016:	1a 2e       	mov	r1, r26
    2018:	aa 1b       	sub	r26, r26
    201a:	bb 1b       	sub	r27, r27
    201c:	fd 01       	movw	r30, r26
    201e:	0d c0       	rjmp	.+26     	; 0x203a <__udivmodsi4_ep>

00002020 <__udivmodsi4_loop>:
    2020:	aa 1f       	adc	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	ee 1f       	adc	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	a2 17       	cp	r26, r18
    202a:	b3 07       	cpc	r27, r19
    202c:	e4 07       	cpc	r30, r20
    202e:	f5 07       	cpc	r31, r21
    2030:	20 f0       	brcs	.+8      	; 0x203a <__udivmodsi4_ep>
    2032:	a2 1b       	sub	r26, r18
    2034:	b3 0b       	sbc	r27, r19
    2036:	e4 0b       	sbc	r30, r20
    2038:	f5 0b       	sbc	r31, r21

0000203a <__udivmodsi4_ep>:
    203a:	66 1f       	adc	r22, r22
    203c:	77 1f       	adc	r23, r23
    203e:	88 1f       	adc	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	1a 94       	dec	r1
    2044:	69 f7       	brne	.-38     	; 0x2020 <__udivmodsi4_loop>
    2046:	60 95       	com	r22
    2048:	70 95       	com	r23
    204a:	80 95       	com	r24
    204c:	90 95       	com	r25
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	bd 01       	movw	r22, r26
    2054:	cf 01       	movw	r24, r30
    2056:	08 95       	ret

00002058 <__umulhisi3>:
    2058:	a2 9f       	mul	r26, r18
    205a:	b0 01       	movw	r22, r0
    205c:	b3 9f       	mul	r27, r19
    205e:	c0 01       	movw	r24, r0
    2060:	a3 9f       	mul	r26, r19
    2062:	70 0d       	add	r23, r0
    2064:	81 1d       	adc	r24, r1
    2066:	11 24       	eor	r1, r1
    2068:	91 1d       	adc	r25, r1
    206a:	b2 9f       	mul	r27, r18
    206c:	70 0d       	add	r23, r0
    206e:	81 1d       	adc	r24, r1
    2070:	11 24       	eor	r1, r1
    2072:	91 1d       	adc	r25, r1
    2074:	08 95       	ret

00002076 <_exit>:
    2076:	f8 94       	cli

00002078 <__stop_program>:
    2078:	ff cf       	rjmp	.-2      	; 0x2078 <__stop_program>
