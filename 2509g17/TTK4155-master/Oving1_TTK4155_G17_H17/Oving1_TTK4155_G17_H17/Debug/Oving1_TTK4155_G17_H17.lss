
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000032c  00800100  00001fe8  0000207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  0080042c  0080042c  000023a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cab  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f9  00000000  00000000  00004257  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d0  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000538  00000000  00000000  00005620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000078d  00000000  00000000  00005b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001231  00000000  00000000  000062e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00007516  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__ctors_end>
       4:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_1>
       8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_2>
       c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      10:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      14:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      18:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      1c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      20:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      24:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      28:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      2c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      30:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      34:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      3c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      40:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      44:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      48:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      4c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      50:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      54:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      58:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      5c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      60:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      64:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      68:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      6c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	64 65       	ori	r22, 0x54	; 84
      72:	62 75       	andi	r22, 0x52	; 82
      74:	67 31       	cpi	r22, 0x17	; 23
	...

00000080 <debug_entry_0>:
      80:	64 65 62 75 67 30 00 00 00 00 00 00 00 00 00 00     debug0..........

00000090 <option_entry_1>:
      90:	6f 70 74 31 00 00 00 00 00 00 00 00 00 00 00 00     opt1............

000000a0 <option_entry_0>:
      a0:	6f 70 74 30 00 00 00 00 00 00 00 00 00 00 00 00     opt0............

000000b0 <mainmenu_entry_3>:
      b0:	4f 70 74 69 6f 6e 73 00 00 00 00 00 00 00 00 00     Options.........

000000c0 <mainmenu_entry_2>:
      c0:	44 65 62 75 67 00 00 00 00 00 00 00 00 00 00 00     Debug...........

000000d0 <font>:
	...
      d8:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      e8:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
      f8:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     108:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     118:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     128:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     138:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     148:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     158:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     168:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     178:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     188:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     198:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1a8:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1b8:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1c8:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1d8:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1e8:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1f8:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     208:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     218:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     228:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     238:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     248:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     258:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     268:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     278:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     288:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     298:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2a8:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2b8:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2c8:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2d8:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2e8:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2f8:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     308:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     318:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     328:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     338:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     348:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     358:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     368:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     378:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     388:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     398:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3a8:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3b8:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3c8:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3d8:	00 7e 7e 7e 7e 7e 7e 00                             .~~~~~~.

000003e0 <__ctors_end>:
     3e0:	11 24       	eor	r1, r1
     3e2:	1f be       	out	0x3f, r1	; 63
     3e4:	cf ef       	ldi	r28, 0xFF	; 255
     3e6:	d4 e0       	ldi	r29, 0x04	; 4
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	cd bf       	out	0x3d, r28	; 61

000003ec <__do_copy_data>:
     3ec:	14 e0       	ldi	r17, 0x04	; 4
     3ee:	a0 e0       	ldi	r26, 0x00	; 0
     3f0:	b1 e0       	ldi	r27, 0x01	; 1
     3f2:	e8 ee       	ldi	r30, 0xE8	; 232
     3f4:	ff e1       	ldi	r31, 0x1F	; 31
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <__do_copy_data+0x10>
     3f8:	05 90       	lpm	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	ac 32       	cpi	r26, 0x2C	; 44
     3fe:	b1 07       	cpc	r27, r17
     400:	d9 f7       	brne	.-10     	; 0x3f8 <__do_copy_data+0xc>

00000402 <__do_clear_bss>:
     402:	24 e0       	ldi	r18, 0x04	; 4
     404:	ac e2       	ldi	r26, 0x2C	; 44
     406:	b4 e0       	ldi	r27, 0x04	; 4
     408:	01 c0       	rjmp	.+2      	; 0x40c <.do_clear_bss_start>

0000040a <.do_clear_bss_loop>:
     40a:	1d 92       	st	X+, r1

0000040c <.do_clear_bss_start>:
     40c:	aa 39       	cpi	r26, 0x9A	; 154
     40e:	b2 07       	cpc	r27, r18
     410:	e1 f7       	brne	.-8      	; 0x40a <.do_clear_bss_loop>
     412:	0e 94 91 05 	call	0xb22	; 0xb22 <main>
     416:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <_exit>

0000041a <__bad_interrupt>:
     41a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041e <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	91 05       	cpc	r25, r1
     422:	71 f0       	breq	.+28     	; 0x440 <readADC+0x22>
     424:	1c f4       	brge	.+6      	; 0x42c <readADC+0xe>
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	39 f0       	breq	.+14     	; 0x438 <readADC+0x1a>
     42a:	1c c0       	rjmp	.+56     	; 0x464 <readADC+0x46>
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	91 05       	cpc	r25, r1
     430:	59 f0       	breq	.+22     	; 0x448 <readADC+0x2a>
     432:	04 97       	sbiw	r24, 0x04	; 4
     434:	69 f0       	breq	.+26     	; 0x450 <readADC+0x32>
     436:	16 c0       	rjmp	.+44     	; 0x464 <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
     438:	84 e1       	ldi	r24, 0x14	; 20
     43a:	80 93 00 14 	sts	0x1400, r24
     43e:	0b c0       	rjmp	.+22     	; 0x456 <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
     440:	85 e1       	ldi	r24, 0x15	; 21
     442:	80 93 00 14 	sts	0x1400, r24
     446:	07 c0       	rjmp	.+14     	; 0x456 <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
     448:	86 e1       	ldi	r24, 0x16	; 22
     44a:	80 93 00 14 	sts	0x1400, r24
     44e:	03 c0       	rjmp	.+6      	; 0x456 <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
     450:	87 e1       	ldi	r24, 0x17	; 23
     452:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	82 e5       	ldi	r24, 0x52	; 82
     458:	8a 95       	dec	r24
     45a:	f1 f7       	brne	.-4      	; 0x458 <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
     45c:	80 91 00 14 	lds	r24, 0x1400
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
     468:	08 95       	ret

0000046a <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     46a:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     46c:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     46e:	85 b7       	in	r24, 0x35	; 53
     470:	81 60       	ori	r24, 0x01	; 1
     472:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     474:	85 b7       	in	r24, 0x35	; 53
     476:	82 60       	ori	r24, 0x02	; 2
     478:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     47a:	85 b7       	in	r24, 0x35	; 53
     47c:	84 60       	ori	r24, 0x04	; 4
     47e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     480:	85 b7       	in	r24, 0x35	; 53
     482:	88 60       	ori	r24, 0x08	; 8
     484:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     486:	8b b7       	in	r24, 0x3b	; 59
     488:	80 64       	ori	r24, 0x40	; 64
     48a:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     48c:	8b b7       	in	r24, 0x3b	; 59
     48e:	80 68       	ori	r24, 0x80	; 128
     490:	8b bf       	out	0x3b, r24	; 59
	sei();//enabling interrupts globaly
     492:	78 94       	sei
     494:	08 95       	ret

00000496 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4c4:	8e e0       	ldi	r24, 0x0E	; 14
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	9f 93       	push	r25
     4ca:	8f 93       	push	r24
     4cc:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     4d0:	82 e5       	ldi	r24, 0x52	; 82
     4d2:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     4d6:	f8 2e       	mov	r15, r24
     4d8:	e9 2e       	mov	r14, r25
     4da:	8c e4       	ldi	r24, 0x4C	; 76
     4dc:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     4e0:	18 2f       	mov	r17, r24
     4e2:	09 2f       	mov	r16, r25
     4e4:	89 e5       	ldi	r24, 0x59	; 89
     4e6:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     4ea:	c8 2f       	mov	r28, r24
     4ec:	d9 2f       	mov	r29, r25
     4ee:	88 e5       	ldi	r24, 0x58	; 88
     4f0:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	87 e3       	ldi	r24, 0x37	; 55
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
     510:	8d b7       	in	r24, 0x3d	; 61
     512:	9e b7       	in	r25, 0x3e	; 62
     514:	0c 96       	adiw	r24, 0x0c	; 12
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	9e bf       	out	0x3e, r25	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	8d bf       	out	0x3d, r24	; 61
}
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
	printf("Left Button Pressed\n");
     570:	80 e5       	ldi	r24, 0x50	; 80
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	c4 e6       	ldi	r28, 0x64	; 100
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     5a6:	00 91 36 04 	lds	r16, 0x0436
     5aa:	10 91 37 04 	lds	r17, 0x0437
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 0f 02 	call	0x41e	; 0x41e <readADC>
     5b6:	01 58       	subi	r16, 0x81	; 129
     5b8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ba:	08 1b       	sub	r16, r24
     5bc:	19 0b       	sbc	r17, r25
     5be:	10 93 37 04 	sts	0x0437, r17
     5c2:	00 93 36 04 	sts	0x0436, r16
		calibrate_y += 127 - readADC(2);
     5c6:	00 91 34 04 	lds	r16, 0x0434
     5ca:	10 91 35 04 	lds	r17, 0x0435
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 0f 02 	call	0x41e	; 0x41e <readADC>
     5d6:	01 58       	subi	r16, 0x81	; 129
     5d8:	1f 4f       	sbci	r17, 0xFF	; 255
     5da:	08 1b       	sub	r16, r24
     5dc:	19 0b       	sbc	r17, r25
     5de:	10 93 35 04 	sts	0x0435, r17
     5e2:	00 93 34 04 	sts	0x0434, r16
     5e6:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     5e8:	20 97       	sbiw	r28, 0x00	; 0
     5ea:	e9 f6       	brne	.-70     	; 0x5a6 <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     5ec:	80 91 36 04 	lds	r24, 0x0436
     5f0:	90 91 37 04 	lds	r25, 0x0437
     5f4:	24 e6       	ldi	r18, 0x64	; 100
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	b9 01       	movw	r22, r18
     5fa:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__divmodhi4>
     5fe:	70 93 37 04 	sts	0x0437, r23
     602:	60 93 36 04 	sts	0x0436, r22
	calibrate_y /= CALIBRATE_READINGS;
     606:	80 91 34 04 	lds	r24, 0x0434
     60a:	90 91 35 04 	lds	r25, 0x0435
     60e:	b9 01       	movw	r22, r18
     610:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__divmodhi4>
     614:	70 93 35 04 	sts	0x0435, r23
     618:	60 93 34 04 	sts	0x0434, r22
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	08 95       	ret

00000626 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int referance, int step){
     626:	2f 92       	push	r2
     628:	3f 92       	push	r3
     62a:	4f 92       	push	r4
     62c:	5f 92       	push	r5
     62e:	6f 92       	push	r6
     630:	7f 92       	push	r7
     632:	8f 92       	push	r8
     634:	9f 92       	push	r9
     636:	af 92       	push	r10
     638:	bf 92       	push	r11
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	00 d0       	rcall	.+0      	; 0x64c <signal_to_range+0x26>
     64c:	00 d0       	rcall	.+0      	; 0x64e <signal_to_range+0x28>
     64e:	00 d0       	rcall	.+0      	; 0x650 <signal_to_range+0x2a>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	3c 01       	movw	r6, r24
     656:	7a 83       	std	Y+2, r23	; 0x02
     658:	69 83       	std	Y+1, r22	; 0x01
     65a:	5c 83       	std	Y+4, r21	; 0x04
     65c:	4b 83       	std	Y+3, r20	; 0x03
     65e:	3e 83       	std	Y+6, r19	; 0x06
     660:	2d 83       	std	Y+5, r18	; 0x05
     662:	18 01       	movw	r2, r16
     664:	85 01       	movw	r16, r10
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     666:	b9 01       	movw	r22, r18
     668:	88 27       	eor	r24, r24
     66a:	77 fd       	sbrc	r23, 7
     66c:	80 95       	com	r24
     66e:	98 2f       	mov	r25, r24
     670:	0e 94 8e 09 	call	0x131c	; 0x131c <__floatsisf>
     674:	4b 01       	movw	r8, r22
     676:	5c 01       	movw	r10, r24
     678:	b3 01       	movw	r22, r6
     67a:	6e 0d       	add	r22, r14
     67c:	7f 1d       	adc	r23, r15
     67e:	29 81       	ldd	r18, Y+1	; 0x01
     680:	3a 81       	ldd	r19, Y+2	; 0x02
     682:	62 1b       	sub	r22, r18
     684:	73 0b       	sbc	r23, r19
     686:	88 27       	eor	r24, r24
     688:	77 fd       	sbrc	r23, 7
     68a:	80 95       	com	r24
     68c:	98 2f       	mov	r25, r24
     68e:	0e 94 8e 09 	call	0x131c	; 0x131c <__floatsisf>
     692:	2b 01       	movw	r4, r22
     694:	3c 01       	movw	r6, r24
     696:	b1 01       	movw	r22, r2
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	9e 81       	ldd	r25, Y+6	; 0x06
     69c:	68 1b       	sub	r22, r24
     69e:	79 0b       	sbc	r23, r25
     6a0:	88 27       	eor	r24, r24
     6a2:	77 fd       	sbrc	r23, 7
     6a4:	80 95       	com	r24
     6a6:	98 2f       	mov	r25, r24
     6a8:	0e 94 8e 09 	call	0x131c	; 0x131c <__floatsisf>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	c3 01       	movw	r24, r6
     6b2:	b2 01       	movw	r22, r4
     6b4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__mulsf3>
     6b8:	2b 01       	movw	r4, r22
     6ba:	3c 01       	movw	r6, r24
     6bc:	6b 81       	ldd	r22, Y+3	; 0x03
     6be:	7c 81       	ldd	r23, Y+4	; 0x04
     6c0:	e9 81       	ldd	r30, Y+1	; 0x01
     6c2:	fa 81       	ldd	r31, Y+2	; 0x02
     6c4:	6e 1b       	sub	r22, r30
     6c6:	7f 0b       	sbc	r23, r31
     6c8:	88 27       	eor	r24, r24
     6ca:	77 fd       	sbrc	r23, 7
     6cc:	80 95       	com	r24
     6ce:	98 2f       	mov	r25, r24
     6d0:	0e 94 8e 09 	call	0x131c	; 0x131c <__floatsisf>
     6d4:	9b 01       	movw	r18, r22
     6d6:	ac 01       	movw	r20, r24
     6d8:	c3 01       	movw	r24, r6
     6da:	b2 01       	movw	r22, r4
     6dc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__divsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	0e 94 8f 08 	call	0x111e	; 0x111e <__addsf3>
     6ec:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fixsfsi>
	
		
	if (new_signal >= output_max - step){
     6f0:	c1 01       	movw	r24, r2
     6f2:	80 1b       	sub	r24, r16
     6f4:	91 0b       	sbc	r25, r17
     6f6:	68 17       	cp	r22, r24
     6f8:	79 07       	cpc	r23, r25
     6fa:	74 f5       	brge	.+92     	; 0x758 <signal_to_range+0x132>
		referance = output_max;
	}else if(new_signal <= output_min + step){
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	80 0f       	add	r24, r16
     702:	91 1f       	adc	r25, r17
     704:	86 17       	cp	r24, r22
     706:	97 07       	cpc	r25, r23
     708:	4c f5       	brge	.+82     	; 0x75c <signal_to_range+0x136>
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
			if((new_signal >= referance + step/2)){
     70a:	f8 01       	movw	r30, r16
     70c:	11 23       	and	r17, r17
     70e:	0c f4       	brge	.+2      	; 0x712 <signal_to_range+0xec>
     710:	31 96       	adiw	r30, 0x01	; 1
     712:	f5 95       	asr	r31
     714:	e7 95       	ror	r30
     716:	d8 01       	movw	r26, r16
     718:	12 c0       	rjmp	.+36     	; 0x73e <signal_to_range+0x118>
     71a:	8a 0f       	add	r24, r26
     71c:	9b 1f       	adc	r25, r27
     71e:	ac 01       	movw	r20, r24
     720:	4e 0f       	add	r20, r30
     722:	5f 1f       	adc	r21, r31
     724:	64 17       	cp	r22, r20
     726:	75 07       	cpc	r23, r21
     728:	14 f0       	brlt	.+4      	; 0x72e <signal_to_range+0x108>
				referance += step;
     72a:	69 01       	movw	r12, r18
     72c:	0b c0       	rjmp	.+22     	; 0x744 <signal_to_range+0x11e>
			}
			else if (new_signal <= referance - step/2){
     72e:	c6 01       	movw	r24, r12
     730:	8e 1b       	sub	r24, r30
     732:	9f 0b       	sbc	r25, r31
     734:	86 17       	cp	r24, r22
     736:	97 07       	cpc	r25, r23
     738:	14 f0       	brlt	.+4      	; 0x73e <signal_to_range+0x118>
				referance -= step;
     73a:	c0 1a       	sub	r12, r16
     73c:	d1 0a       	sbc	r13, r17
     73e:	c6 01       	movw	r24, r12
     740:	80 1b       	sub	r24, r16
     742:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		referance = output_max;
	}else if(new_signal <= output_min + step){
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
     744:	96 01       	movw	r18, r12
     746:	20 0f       	add	r18, r16
     748:	31 1f       	adc	r19, r17
     74a:	62 17       	cp	r22, r18
     74c:	73 07       	cpc	r23, r19
     74e:	2c f7       	brge	.-54     	; 0x71a <signal_to_range+0xf4>
     750:	86 17       	cp	r24, r22
     752:	97 07       	cpc	r25, r23
     754:	14 f7       	brge	.-60     	; 0x71a <signal_to_range+0xf4>
     756:	04 c0       	rjmp	.+8      	; 0x760 <signal_to_range+0x13a>
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	if (new_signal >= output_max - step){
		referance = output_max;
     758:	61 01       	movw	r12, r2
     75a:	02 c0       	rjmp	.+4      	; 0x760 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		referance = output_min;
     75c:	cd 80       	ldd	r12, Y+5	; 0x05
     75e:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, referance);
	return referance;
}
     760:	c6 01       	movw	r24, r12
     762:	26 96       	adiw	r28, 0x06	; 6
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	9f 90       	pop	r9
     784:	8f 90       	pop	r8
     786:	7f 90       	pop	r7
     788:	6f 90       	pop	r6
     78a:	5f 90       	pop	r5
     78c:	4f 90       	pop	r4
     78e:	3f 90       	pop	r3
     790:	2f 90       	pop	r2
     792:	08 95       	ret

00000794 <read_control_input>:
	}
	calibrate_x /= CALIBRATE_READINGS;
	calibrate_y /= CALIBRATE_READINGS;
}

int read_control_input(char channel){
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
	switch(channel){
     7a4:	82 35       	cpi	r24, 0x52	; 82
     7a6:	09 f4       	brne	.+2      	; 0x7aa <read_control_input+0x16>
     7a8:	74 c0       	rjmp	.+232    	; 0x892 <read_control_input+0xfe>
     7aa:	20 f4       	brcc	.+8      	; 0x7b4 <read_control_input+0x20>
     7ac:	8c 34       	cpi	r24, 0x4C	; 76
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <read_control_input+0x1e>
     7b0:	4e c0       	rjmp	.+156    	; 0x84e <read_control_input+0xba>
     7b2:	91 c0       	rjmp	.+290    	; 0x8d6 <read_control_input+0x142>
     7b4:	88 35       	cpi	r24, 0x58	; 88
     7b6:	19 f0       	breq	.+6      	; 0x7be <read_control_input+0x2a>
     7b8:	89 35       	cpi	r24, 0x59	; 89
     7ba:	29 f1       	breq	.+74     	; 0x806 <read_control_input+0x72>
     7bc:	8c c0       	rjmp	.+280    	; 0x8d6 <read_control_input+0x142>
		case 'X': 
			ref_X = signal_to_range(readADC(1), 0, 255, -100, 100, calibrate_x, ref_X, 10); 
     7be:	c0 90 32 04 	lds	r12, 0x0432
     7c2:	d0 90 33 04 	lds	r13, 0x0433
     7c6:	e0 90 36 04 	lds	r14, 0x0436
     7ca:	f0 90 37 04 	lds	r15, 0x0437
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 0f 02 	call	0x41e	; 0x41e <readADC>
     7d6:	0f 2e       	mov	r0, r31
     7d8:	fa e0       	ldi	r31, 0x0A	; 10
     7da:	af 2e       	mov	r10, r31
     7dc:	b1 2c       	mov	r11, r1
     7de:	f0 2d       	mov	r31, r0
     7e0:	04 e6       	ldi	r16, 0x64	; 100
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	2c e9       	ldi	r18, 0x9C	; 156
     7e6:	3f ef       	ldi	r19, 0xFF	; 255
     7e8:	4f ef       	ldi	r20, 0xFF	; 255
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	0e 94 13 03 	call	0x626	; 0x626 <signal_to_range>
     7f4:	90 93 33 04 	sts	0x0433, r25
     7f8:	80 93 32 04 	sts	0x0432, r24
			return ref_X;
     7fc:	80 91 32 04 	lds	r24, 0x0432
     800:	90 91 33 04 	lds	r25, 0x0433
     804:	6a c0       	rjmp	.+212    	; 0x8da <read_control_input+0x146>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), 0, 255, -100, 100, calibrate_y, ref_Y, 10);
     806:	c0 90 30 04 	lds	r12, 0x0430
     80a:	d0 90 31 04 	lds	r13, 0x0431
     80e:	e0 90 34 04 	lds	r14, 0x0434
     812:	f0 90 35 04 	lds	r15, 0x0435
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 0f 02 	call	0x41e	; 0x41e <readADC>
     81e:	0f 2e       	mov	r0, r31
     820:	fa e0       	ldi	r31, 0x0A	; 10
     822:	af 2e       	mov	r10, r31
     824:	b1 2c       	mov	r11, r1
     826:	f0 2d       	mov	r31, r0
     828:	04 e6       	ldi	r16, 0x64	; 100
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	2c e9       	ldi	r18, 0x9C	; 156
     82e:	3f ef       	ldi	r19, 0xFF	; 255
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	0e 94 13 03 	call	0x626	; 0x626 <signal_to_range>
     83c:	90 93 31 04 	sts	0x0431, r25
     840:	80 93 30 04 	sts	0x0430, r24
			return ref_Y;
     844:	80 91 30 04 	lds	r24, 0x0430
     848:	90 91 31 04 	lds	r25, 0x0431
     84c:	46 c0       	rjmp	.+140    	; 0x8da <read_control_input+0x146>
		case 'L':
		ref_L = signal_to_range(readADC(3), 0, 255, 0, 100, 0, ref_L, 10);
     84e:	c0 90 2e 04 	lds	r12, 0x042E
     852:	d0 90 2f 04 	lds	r13, 0x042F
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 0f 02 	call	0x41e	; 0x41e <readADC>
     85e:	0f 2e       	mov	r0, r31
     860:	fa e0       	ldi	r31, 0x0A	; 10
     862:	af 2e       	mov	r10, r31
     864:	b1 2c       	mov	r11, r1
     866:	f0 2d       	mov	r31, r0
     868:	e1 2c       	mov	r14, r1
     86a:	f1 2c       	mov	r15, r1
     86c:	04 e6       	ldi	r16, 0x64	; 100
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	4f ef       	ldi	r20, 0xFF	; 255
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0e 94 13 03 	call	0x626	; 0x626 <signal_to_range>
     880:	90 93 2f 04 	sts	0x042F, r25
     884:	80 93 2e 04 	sts	0x042E, r24
		return ref_L;
     888:	80 91 2e 04 	lds	r24, 0x042E
     88c:	90 91 2f 04 	lds	r25, 0x042F
     890:	24 c0       	rjmp	.+72     	; 0x8da <read_control_input+0x146>
		case 'R': 
			ref_R = signal_to_range(readADC(4), 0, 255, 0, 100, 0, ref_R, 10);
     892:	c0 90 2c 04 	lds	r12, 0x042C
     896:	d0 90 2d 04 	lds	r13, 0x042D
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 0f 02 	call	0x41e	; 0x41e <readADC>
     8a2:	0f 2e       	mov	r0, r31
     8a4:	fa e0       	ldi	r31, 0x0A	; 10
     8a6:	af 2e       	mov	r10, r31
     8a8:	b1 2c       	mov	r11, r1
     8aa:	f0 2d       	mov	r31, r0
     8ac:	e1 2c       	mov	r14, r1
     8ae:	f1 2c       	mov	r15, r1
     8b0:	04 e6       	ldi	r16, 0x64	; 100
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	4f ef       	ldi	r20, 0xFF	; 255
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	0e 94 13 03 	call	0x626	; 0x626 <signal_to_range>
     8c4:	90 93 2d 04 	sts	0x042D, r25
     8c8:	80 93 2c 04 	sts	0x042C, r24
			return ref_R;
     8cc:	80 91 2c 04 	lds	r24, 0x042C
     8d0:	90 91 2d 04 	lds	r25, 0x042D
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <read_control_input+0x146>
	}
	return 0;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
}
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	08 95       	ret

000008ec <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     8ec:	0e 94 cd 02 	call	0x59a	; 0x59a <calibrate_joystick>
	ref_X = read_control_input('X');
     8f0:	88 e5       	ldi	r24, 0x58	; 88
     8f2:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     8f6:	90 93 33 04 	sts	0x0433, r25
     8fa:	80 93 32 04 	sts	0x0432, r24
	ref_Y = read_control_input('Y');
     8fe:	89 e5       	ldi	r24, 0x59	; 89
     900:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     904:	90 93 31 04 	sts	0x0431, r25
     908:	80 93 30 04 	sts	0x0430, r24
	ref_L = read_control_input('L');
     90c:	8c e4       	ldi	r24, 0x4C	; 76
     90e:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     912:	90 93 2f 04 	sts	0x042F, r25
     916:	80 93 2e 04 	sts	0x042E, r24
	ref_R = read_control_input('R');
     91a:	82 e5       	ldi	r24, 0x52	; 82
     91c:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
     920:	90 93 2d 04 	sts	0x042D, r25
     924:	80 93 2c 04 	sts	0x042C, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     928:	20 91 34 04 	lds	r18, 0x0434
     92c:	30 91 35 04 	lds	r19, 0x0435
     930:	80 91 36 04 	lds	r24, 0x0436
     934:	90 91 37 04 	lds	r25, 0x0437
     938:	3f 93       	push	r19
     93a:	2f 93       	push	r18
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	84 e6       	ldi	r24, 0x64	; 100
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     94c:	60 91 2c 04 	lds	r22, 0x042C
     950:	70 91 2d 04 	lds	r23, 0x042D
     954:	40 91 2e 04 	lds	r20, 0x042E
     958:	50 91 2f 04 	lds	r21, 0x042F
     95c:	20 91 30 04 	lds	r18, 0x0430
     960:	30 91 31 04 	lds	r19, 0x0431
     964:	80 91 32 04 	lds	r24, 0x0432
     968:	90 91 33 04 	lds	r25, 0x0433
     96c:	7f 93       	push	r23
     96e:	6f 93       	push	r22
     970:	5f 93       	push	r21
     972:	4f 93       	push	r20
     974:	3f 93       	push	r19
     976:	2f 93       	push	r18
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	8d e8       	ldi	r24, 0x8D	; 141
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9f 93       	push	r25
     982:	8f 93       	push	r24
     984:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
     988:	8d b7       	in	r24, 0x3d	; 61
     98a:	9e b7       	in	r25, 0x3e	; 62
     98c:	40 96       	adiw	r24, 0x10	; 16
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	9e bf       	out	0x3e, r25	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	8d bf       	out	0x3d, r24	; 61
     998:	08 95       	ret

0000099a <SRAM_test>:
	printf("\nINITIALIZATION COMPLETE\n");
}

#include <stdlib.h>
void SRAM_test(void)
{
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     9aa:	86 eb       	ldi	r24, 0xB6	; 182
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9b2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <rand>
     9b6:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9bc:	c0 e0       	ldi	r28, 0x00	; 0
     9be:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9c0:	00 e0       	ldi	r16, 0x00	; 0
     9c2:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9c4:	0f 2e       	mov	r0, r31
     9c6:	fc ec       	ldi	r31, 0xCC	; 204
     9c8:	ef 2e       	mov	r14, r31
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	ff 2e       	mov	r15, r31
     9ce:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9d0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <rand>
     9d4:	fe 01       	movw	r30, r28
     9d6:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9d8:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9da:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9dc:	28 17       	cp	r18, r24
     9de:	a9 f0       	breq	.+42     	; 0xa0a <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9e0:	99 27       	eor	r25, r25
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	1f 92       	push	r1
     9e8:	2f 93       	push	r18
     9ea:	df 93       	push	r29
     9ec:	cf 93       	push	r28
     9ee:	ff 92       	push	r15
     9f0:	ef 92       	push	r14
     9f2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
			write_errors++;
     9f6:	0f 5f       	subi	r16, 0xFF	; 255
     9f8:	1f 4f       	sbci	r17, 0xFF	; 255
     9fa:	8d b7       	in	r24, 0x3d	; 61
     9fc:	9e b7       	in	r25, 0x3e	; 62
     9fe:	08 96       	adiw	r24, 0x08	; 8
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	9e bf       	out	0x3e, r25	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a0a:	21 96       	adiw	r28, 0x01	; 1
     a0c:	c1 15       	cp	r28, r1
     a0e:	98 e0       	ldi	r25, 0x08	; 8
     a10:	d9 07       	cpc	r29, r25
     a12:	f1 f6       	brne	.-68     	; 0x9d0 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     a14:	c6 01       	movw	r24, r12
     a16:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a1a:	c0 e0       	ldi	r28, 0x00	; 0
     a1c:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a1e:	e1 2c       	mov	r14, r1
     a20:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a22:	0f 2e       	mov	r0, r31
     a24:	f5 e0       	ldi	r31, 0x05	; 5
     a26:	cf 2e       	mov	r12, r31
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	df 2e       	mov	r13, r31
     a2c:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a2e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <rand>
     a32:	fe 01       	movw	r30, r28
     a34:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a36:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a38:	28 17       	cp	r18, r24
     a3a:	b1 f0       	breq	.+44     	; 0xa68 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a3c:	99 27       	eor	r25, r25
     a3e:	9f 93       	push	r25
     a40:	8f 93       	push	r24
     a42:	1f 92       	push	r1
     a44:	2f 93       	push	r18
     a46:	df 93       	push	r29
     a48:	cf 93       	push	r28
     a4a:	df 92       	push	r13
     a4c:	cf 92       	push	r12
     a4e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
			retrieval_errors++;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 1a       	sub	r14, r24
     a56:	f8 0a       	sbc	r15, r24
     a58:	8d b7       	in	r24, 0x3d	; 61
     a5a:	9e b7       	in	r25, 0x3e	; 62
     a5c:	08 96       	adiw	r24, 0x08	; 8
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	9e bf       	out	0x3e, r25	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a68:	21 96       	adiw	r28, 0x01	; 1
     a6a:	c1 15       	cp	r28, r1
     a6c:	98 e0       	ldi	r25, 0x08	; 8
     a6e:	d9 07       	cpc	r29, r25
     a70:	f1 f6       	brne	.-68     	; 0xa2e <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     a72:	ff 92       	push	r15
     a74:	ef 92       	push	r14
     a76:	1f 93       	push	r17
     a78:	0f 93       	push	r16
     a7a:	82 e4       	ldi	r24, 0x42	; 66
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	08 95       	ret

00000aa4 <initalize>:



void initalize(void){
	
	init_UART(UBBR);
     aa4:	8f e1       	ldi	r24, 0x1F	; 31
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 83 08 	call	0x1106	; 0x1106 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     aac:	89 e9       	ldi	r24, 0x99	; 153
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	82 ea       	ldi	r24, 0xA2	; 162
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	8e ea       	ldi	r24, 0xAE	; 174
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	9f 93       	push	r25
     ac2:	8f 93       	push	r24
     ac4:	83 eb       	ldi	r24, 0xB3	; 179
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     ad0:	85 b7       	in	r24, 0x35	; 53
     ad2:	80 68       	ori	r24, 0x80	; 128
     ad4:	85 bf       	out	0x35, r24	; 53
	
	
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     ad6:	80 b7       	in	r24, 0x30	; 48
     ad8:	80 62       	ori	r24, 0x20	; 32
     ada:	80 bf       	out	0x30, r24	; 48
	
	//initialize_menu();
	
	initialize_control_input();
     adc:	0e 94 76 04 	call	0x8ec	; 0x8ec <initialize_control_input>
	printf("control input successfully initialized\n\n");
     ae0:	89 ef       	ldi	r24, 0xF9	; 249
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
	SRAM_test();
     ae8:	0e 94 cd 04 	call	0x99a	; 0x99a <SRAM_test>
	printf("SRAM successfully initialized\n");
     aec:	81 e2       	ldi	r24, 0x21	; 33
     aee:	93 e0       	ldi	r25, 0x03	; 3
     af0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
	initalize_interrupts();
     af4:	0e 94 35 02 	call	0x46a	; 0x46a <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
	printf("Interrupts activated\n");
     b00:	83 e6       	ldi	r24, 0x63	; 99
     b02:	93 e0       	ldi	r25, 0x03	; 3
     b04:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     b08:	88 e7       	ldi	r24, 0x78	; 120
     b0a:	93 e0       	ldi	r25, 0x03	; 3
     b0c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
     b10:	8d b7       	in	r24, 0x3d	; 61
     b12:	9e b7       	in	r25, 0x3e	; 62
     b14:	08 96       	adiw	r24, 0x08	; 8
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	9e bf       	out	0x3e, r25	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	8d bf       	out	0x3d, r24	; 61
     b20:	08 95       	ret

00000b22 <main>:
#include "menu.h"

int main(void)
{
	
	initalize();	
     b22:	0e 94 52 05 	call	0xaa4	; 0xaa4 <initalize>
	oled_ini();
     b26:	0e 94 b6 07 	call	0xf6c	; 0xf6c <oled_ini>
	oled_reset();
     b2a:	0e 94 a8 07 	call	0xf50	; 0xf50 <oled_reset>
	oled_print_char(129);
	//char * abc = "penis\0";
	//oled_print(abc);
	*/
	
	initialize_menu();
     b2e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <initialize_menu>
	//oled_print_effect(__TIME__,STREAKTROUGH);
	oled_reset();
     b32:	0e 94 a8 07 	call	0xf50	; 0xf50 <oled_reset>
	
	
	while(1){
		
		
		menu_update();
     b36:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <menu_update>
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <main+0x14>

00000b3c <initialize_menu>:
//menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b40:	20 e4       	ldi	r18, 0x40	; 64
     b42:	34 e0       	ldi	r19, 0x04	; 4
     b44:	30 93 87 04 	sts	0x0487, r19
     b48:	20 93 86 04 	sts	0x0486, r18
	new_menu->ptr_child = ptr_child;
     b4c:	6e e6       	ldi	r22, 0x6E	; 110
     b4e:	74 e0       	ldi	r23, 0x04	; 4
     b50:	70 93 89 04 	sts	0x0489, r23
     b54:	60 93 88 04 	sts	0x0488, r22
	new_menu->ptr_parent = ptr_parent;
     b58:	10 92 8b 04 	sts	0x048B, r1
     b5c:	10 92 8a 04 	sts	0x048A, r1
	
	new_menu->title = title;
     b60:	e2 e8       	ldi	r30, 0x82	; 130
     b62:	f4 e0       	ldi	r31, 0x04	; 4
     b64:	80 ec       	ldi	r24, 0xC0	; 192
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 85 04 	sts	0x0485, r25
     b74:	80 93 84 04 	sts	0x0484, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     b78:	f0 93 45 04 	sts	0x0445, r31
     b7c:	e0 93 44 04 	sts	0x0444, r30
	new_menu->ptr_child = ptr_child;
     b80:	ca e5       	ldi	r28, 0x5A	; 90
     b82:	d4 e0       	ldi	r29, 0x04	; 4
     b84:	d0 93 47 04 	sts	0x0447, r29
     b88:	c0 93 46 04 	sts	0x0446, r28
	new_menu->ptr_parent = ptr_parent;
     b8c:	10 92 49 04 	sts	0x0449, r1
     b90:	10 92 48 04 	sts	0x0448, r1
	
	new_menu->title = title;
     b94:	40 eb       	ldi	r20, 0xB0	; 176
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	d9 01       	movw	r26, r18
     b9a:	4d 93       	st	X+, r20
     b9c:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     b9e:	90 93 43 04 	sts	0x0443, r25
     ba2:	80 93 42 04 	sts	0x0442, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     ba6:	24 e6       	ldi	r18, 0x64	; 100
     ba8:	34 e0       	ldi	r19, 0x04	; 4
     baa:	30 93 5f 04 	sts	0x045F, r19
     bae:	20 93 5e 04 	sts	0x045E, r18
	new_menu->ptr_child = ptr_child;
     bb2:	10 92 61 04 	sts	0x0461, r1
     bb6:	10 92 60 04 	sts	0x0460, r1
	new_menu->ptr_parent = ptr_parent;
     bba:	f0 93 63 04 	sts	0x0463, r31
     bbe:	e0 93 62 04 	sts	0x0462, r30
	
	new_menu->title = title;
     bc2:	40 ea       	ldi	r20, 0xA0	; 160
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	59 83       	std	Y+1, r21	; 0x01
     bc8:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     bca:	90 93 5d 04 	sts	0x045D, r25
     bce:	80 93 5c 04 	sts	0x045C, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     bd2:	d0 93 69 04 	sts	0x0469, r29
     bd6:	c0 93 68 04 	sts	0x0468, r28
	new_menu->ptr_child = ptr_child;
     bda:	10 92 6b 04 	sts	0x046B, r1
     bde:	10 92 6a 04 	sts	0x046A, r1
	new_menu->ptr_parent = ptr_parent;
     be2:	f0 93 6d 04 	sts	0x046D, r31
     be6:	e0 93 6c 04 	sts	0x046C, r30
	
	new_menu->title = title;
     bea:	40 e9       	ldi	r20, 0x90	; 144
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	d9 01       	movw	r26, r18
     bf0:	4d 93       	st	X+, r20
     bf2:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     bf4:	90 93 67 04 	sts	0x0467, r25
     bf8:	80 93 66 04 	sts	0x0466, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     bfc:	c8 e7       	ldi	r28, 0x78	; 120
     bfe:	d4 e0       	ldi	r29, 0x04	; 4
     c00:	d0 93 73 04 	sts	0x0473, r29
     c04:	c0 93 72 04 	sts	0x0472, r28
	new_menu->ptr_child = ptr_child;
     c08:	10 92 75 04 	sts	0x0475, r1
     c0c:	10 92 74 04 	sts	0x0474, r1
	new_menu->ptr_parent = ptr_parent;
     c10:	f0 93 77 04 	sts	0x0477, r31
     c14:	e0 93 76 04 	sts	0x0476, r30
	
	new_menu->title = title;
     c18:	20 e8       	ldi	r18, 0x80	; 128
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	db 01       	movw	r26, r22
     c1e:	2d 93       	st	X+, r18
     c20:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     c22:	90 93 71 04 	sts	0x0471, r25
     c26:	80 93 70 04 	sts	0x0470, r24
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c2a:	70 93 7d 04 	sts	0x047D, r23
     c2e:	60 93 7c 04 	sts	0x047C, r22
	new_menu->ptr_child = ptr_child;
     c32:	10 92 7f 04 	sts	0x047F, r1
     c36:	10 92 7e 04 	sts	0x047E, r1
	new_menu->ptr_parent = ptr_parent;
     c3a:	f0 93 81 04 	sts	0x0481, r31
     c3e:	e0 93 80 04 	sts	0x0480, r30
	
	new_menu->title = title;
     c42:	20 e7       	ldi	r18, 0x70	; 112
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	39 83       	std	Y+1, r19	; 0x01
     c48:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     c4a:	90 93 7b 04 	sts	0x047B, r25
     c4e:	80 93 7a 04 	sts	0x047A, r24
	
	setup_menu(&debug_0,&debug_1,&mainmenu_1,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_1,NULL,2,debug_entry_1);
	
	
	current_head = &mainmenu_1;
     c52:	f0 93 3d 04 	sts	0x043D, r31
     c56:	e0 93 3c 04 	sts	0x043C, r30
	current_selected = &mainmenu_1;
     c5a:	f0 93 3f 04 	sts	0x043F, r31
     c5e:	e0 93 3e 04 	sts	0x043E, r30
	
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <navigate_menu>:

int x = 0;
int y = 0;
#define NAVIGATION_TRHESHOLD 50
int navigate_menu(void){
	int joystick_reading = read_control_input('Y');
     c68:	89 e5       	ldi	r24, 0x59	; 89
     c6a:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
	if(joystick_reading > NAVIGATION_TRHESHOLD && y <= NAVIGATION_TRHESHOLD){
     c6e:	83 33       	cpi	r24, 0x33	; 51
     c70:	91 05       	cpc	r25, r1
     c72:	5c f1       	brlt	.+86     	; 0xcca <navigate_menu+0x62>
     c74:	20 91 38 04 	lds	r18, 0x0438
     c78:	30 91 39 04 	lds	r19, 0x0439
     c7c:	23 33       	cpi	r18, 0x33	; 51
     c7e:	31 05       	cpc	r19, r1
     c80:	24 f5       	brge	.+72     	; 0xcca <navigate_menu+0x62>
		for(int i = 0; i < current_selected->n_sib-1; i++){
     c82:	e0 91 3e 04 	lds	r30, 0x043E
     c86:	f0 91 3f 04 	lds	r31, 0x043F
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	18 16       	cp	r1, r24
     c92:	19 06       	cpc	r1, r25
     c94:	8c f4       	brge	.+34     	; 0xcb8 <navigate_menu+0x50>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
     c9a:	04 80       	ldd	r0, Z+4	; 0x04
     c9c:	f5 81       	ldd	r31, Z+5	; 0x05
     c9e:	e0 2d       	mov	r30, r0
int y = 0;
#define NAVIGATION_TRHESHOLD 50
int navigate_menu(void){
	int joystick_reading = read_control_input('Y');
	if(joystick_reading > NAVIGATION_TRHESHOLD && y <= NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	22 81       	ldd	r18, Z+2	; 0x02
     ca4:	33 81       	ldd	r19, Z+3	; 0x03
     ca6:	21 50       	subi	r18, 0x01	; 1
     ca8:	31 09       	sbc	r19, r1
     caa:	82 17       	cp	r24, r18
     cac:	93 07       	cpc	r25, r19
     cae:	ac f3       	brlt	.-22     	; 0xc9a <navigate_menu+0x32>
     cb0:	f0 93 3f 04 	sts	0x043F, r31
     cb4:	e0 93 3e 04 	sts	0x043E, r30
			current_selected = current_selected->ptr_sib_down;
		}
		y = 100;
     cb8:	84 e6       	ldi	r24, 0x64	; 100
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	90 93 39 04 	sts	0x0439, r25
     cc0:	80 93 38 04 	sts	0x0438, r24
		return 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	08 95       	ret
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && y >= -NAVIGATION_TRHESHOLD)
     cca:	8e 3c       	cpi	r24, 0xCE	; 206
     ccc:	2f ef       	ldi	r18, 0xFF	; 255
     cce:	92 07       	cpc	r25, r18
     cd0:	d4 f4       	brge	.+52     	; 0xd06 <navigate_menu+0x9e>
     cd2:	20 91 38 04 	lds	r18, 0x0438
     cd6:	30 91 39 04 	lds	r19, 0x0439
     cda:	2e 3c       	cpi	r18, 0xCE	; 206
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	9c f0       	brlt	.+38     	; 0xd06 <navigate_menu+0x9e>
	{
		current_selected = current_selected->ptr_sib_down;
     ce0:	e0 91 3e 04 	lds	r30, 0x043E
     ce4:	f0 91 3f 04 	lds	r31, 0x043F
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	95 81       	ldd	r25, Z+5	; 0x05
     cec:	90 93 3f 04 	sts	0x043F, r25
     cf0:	80 93 3e 04 	sts	0x043E, r24
		y = -100;
     cf4:	8c e9       	ldi	r24, 0x9C	; 156
     cf6:	9f ef       	ldi	r25, 0xFF	; 255
     cf8:	90 93 39 04 	sts	0x0439, r25
     cfc:	80 93 38 04 	sts	0x0438, r24
		return 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	08 95       	ret
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
     d06:	c1 96       	adiw	r24, 0x31	; 49
     d08:	83 36       	cpi	r24, 0x63	; 99
     d0a:	91 05       	cpc	r25, r1
     d0c:	20 f4       	brcc	.+8      	; 0xd16 <navigate_menu+0xae>
		y = 0;
     d0e:	10 92 39 04 	sts	0x0439, r1
     d12:	10 92 38 04 	sts	0x0438, r1
	}
	
	
	joystick_reading = read_control_input('X');
     d16:	88 e5       	ldi	r24, 0x58	; 88
     d18:	0e 94 ca 03 	call	0x794	; 0x794 <read_control_input>
	if(joystick_reading > NAVIGATION_TRHESHOLD && x <= NAVIGATION_TRHESHOLD){
     d1c:	83 33       	cpi	r24, 0x33	; 51
     d1e:	91 05       	cpc	r25, r1
     d20:	ac f1       	brlt	.+106    	; 0xd8c <navigate_menu+0x124>
     d22:	20 91 3a 04 	lds	r18, 0x043A
     d26:	30 91 3b 04 	lds	r19, 0x043B
     d2a:	23 33       	cpi	r18, 0x33	; 51
     d2c:	31 05       	cpc	r19, r1
     d2e:	74 f5       	brge	.+92     	; 0xd8c <navigate_menu+0x124>
		if(current_selected->ptr_child != NULL){
     d30:	e0 91 3e 04 	lds	r30, 0x043E
     d34:	f0 91 3f 04 	lds	r31, 0x043F
     d38:	86 81       	ldd	r24, Z+6	; 0x06
     d3a:	97 81       	ldd	r25, Z+7	; 0x07
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	49 f0       	breq	.+18     	; 0xd52 <navigate_menu+0xea>
			current_head = current_selected->ptr_child;
     d40:	90 93 3d 04 	sts	0x043D, r25
     d44:	80 93 3c 04 	sts	0x043C, r24
			current_selected = current_selected->ptr_child;
     d48:	90 93 3f 04 	sts	0x043F, r25
     d4c:	80 93 3e 04 	sts	0x043E, r24
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <navigate_menu+0x112>
		}else{
			strcpy_P(temp,current_selected->title);
     d52:	60 81       	ld	r22, Z
     d54:	71 81       	ldd	r23, Z+1	; 0x01
     d56:	8a e4       	ldi	r24, 0x4A	; 74
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	0e 94 03 0b 	call	0x1606	; 0x1606 <strcpy_P>
			printf("running function %s\n",temp);
     d5e:	8a e4       	ldi	r24, 0x4A	; 74
     d60:	94 e0       	ldi	r25, 0x04	; 4
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	81 e9       	ldi	r24, 0x91	; 145
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <printf>
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
		}
		x = 100;
     d7a:	84 e6       	ldi	r24, 0x64	; 100
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	90 93 3b 04 	sts	0x043B, r25
     d82:	80 93 3a 04 	sts	0x043A, r24
		return 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	08 95       	ret
		
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && x >= -NAVIGATION_TRHESHOLD)
     d8c:	8e 3c       	cpi	r24, 0xCE	; 206
     d8e:	2f ef       	ldi	r18, 0xFF	; 255
     d90:	92 07       	cpc	r25, r18
     d92:	04 f5       	brge	.+64     	; 0xdd4 <navigate_menu+0x16c>
     d94:	20 91 3a 04 	lds	r18, 0x043A
     d98:	30 91 3b 04 	lds	r19, 0x043B
     d9c:	2e 3c       	cpi	r18, 0xCE	; 206
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	cc f0       	brlt	.+50     	; 0xdd4 <navigate_menu+0x16c>
	{
		if(current_selected->ptr_parent != NULL){
     da2:	e0 91 3e 04 	lds	r30, 0x043E
     da6:	f0 91 3f 04 	lds	r31, 0x043F
     daa:	80 85       	ldd	r24, Z+8	; 0x08
     dac:	91 85       	ldd	r25, Z+9	; 0x09
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	e1 f0       	breq	.+56     	; 0xdea <navigate_menu+0x182>
			current_head = current_selected->ptr_parent;
     db2:	90 93 3d 04 	sts	0x043D, r25
     db6:	80 93 3c 04 	sts	0x043C, r24
			current_selected = current_selected->ptr_parent;
     dba:	90 93 3f 04 	sts	0x043F, r25
     dbe:	80 93 3e 04 	sts	0x043E, r24
			x = -100;
     dc2:	8c e9       	ldi	r24, 0x9C	; 156
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	90 93 3b 04 	sts	0x043B, r25
     dca:	80 93 3a 04 	sts	0x043A, r24
			return 1;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	08 95       	ret
		}
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
     dd4:	c1 96       	adiw	r24, 0x31	; 49
     dd6:	83 36       	cpi	r24, 0x63	; 99
     dd8:	91 05       	cpc	r25, r1
     dda:	50 f4       	brcc	.+20     	; 0xdf0 <navigate_menu+0x188>
		x = 0;
     ddc:	10 92 3b 04 	sts	0x043B, r1
     de0:	10 92 3a 04 	sts	0x043A, r1
	
	
	
	
	
	return 0;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	08 95       	ret
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	08 95       	ret
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	08 95       	ret

00000df6 <menu_update>:
	current_selected = &mainmenu_1;
	
}
	

void menu_update(void){
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
	if(navigate_menu()){
     dfa:	0e 94 34 06 	call	0xc68	; 0xc68 <navigate_menu>
     dfe:	89 2b       	or	r24, r25
     e00:	09 f4       	brne	.+2      	; 0xe04 <menu_update+0xe>
     e02:	41 c0       	rjmp	.+130    	; 0xe86 <menu_update+0x90>
		oled_reset();
     e04:	0e 94 a8 07 	call	0xf50	; 0xf50 <oled_reset>
		//printf("\n%i\n",current_head->n_sib);
		for (int i = 0; i < current_head->n_sib; i++)
     e08:	e0 91 3c 04 	lds	r30, 0x043C
     e0c:	f0 91 3d 04 	lds	r31, 0x043D
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	18 16       	cp	r1, r24
     e16:	19 06       	cpc	r1, r25
     e18:	b4 f5       	brge	.+108    	; 0xe86 <menu_update+0x90>
     e1a:	c0 e0       	ldi	r28, 0x00	; 0
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			oled_goto_line(i);
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 71 07 	call	0xee2	; 0xee2 <oled_goto_line>
			
			strcpy_P(temp,current_head->title);
     e24:	e0 91 3c 04 	lds	r30, 0x043C
     e28:	f0 91 3d 04 	lds	r31, 0x043D
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	8a e4       	ldi	r24, 0x4A	; 74
     e32:	94 e0       	ldi	r25, 0x04	; 4
     e34:	0e 94 03 0b 	call	0x1606	; 0x1606 <strcpy_P>
			if(current_head == current_selected){
     e38:	20 91 3c 04 	lds	r18, 0x043C
     e3c:	30 91 3d 04 	lds	r19, 0x043D
     e40:	80 91 3e 04 	lds	r24, 0x043E
     e44:	90 91 3f 04 	lds	r25, 0x043F
     e48:	28 17       	cp	r18, r24
     e4a:	39 07       	cpc	r19, r25
     e4c:	21 f4       	brne	.+8      	; 0xe56 <menu_update+0x60>
				oled_print_char(129);
     e4e:	81 e8       	ldi	r24, 0x81	; 129
     e50:	0e 94 4f 08 	call	0x109e	; 0x109e <oled_print_char>
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <menu_update+0x66>
				}else{
				oled_print_char(128);
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	0e 94 4f 08 	call	0x109e	; 0x109e <oled_print_char>
			}
			oled_print(temp);
     e5c:	8a e4       	ldi	r24, 0x4A	; 74
     e5e:	94 e0       	ldi	r25, 0x04	; 4
     e60:	0e 94 6f 08 	call	0x10de	; 0x10de <oled_print>
			current_head = current_head->ptr_sib_down;
     e64:	e0 91 3c 04 	lds	r30, 0x043C
     e68:	f0 91 3d 04 	lds	r31, 0x043D
     e6c:	04 80       	ldd	r0, Z+4	; 0x04
     e6e:	f5 81       	ldd	r31, Z+5	; 0x05
     e70:	e0 2d       	mov	r30, r0
     e72:	f0 93 3d 04 	sts	0x043D, r31
     e76:	e0 93 3c 04 	sts	0x043C, r30

void menu_update(void){
	if(navigate_menu()){
		oled_reset();
		//printf("\n%i\n",current_head->n_sib);
		for (int i = 0; i < current_head->n_sib; i++)
     e7a:	21 96       	adiw	r28, 0x01	; 1
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	c8 17       	cp	r28, r24
     e82:	d9 07       	cpc	r29, r25
     e84:	64 f2       	brlt	.-104    	; 0xe1e <menu_update+0x28>
			oled_print(temp);
			current_head = current_head->ptr_sib_down;
			
		}
	}	
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <oled_home>:
	}
}

void oled_home(void)
{
	page = 0;
     e8c:	10 92 8f 04 	sts	0x048F, r1
     e90:	10 92 8e 04 	sts	0x048E, r1
	col = 0;
     e94:	10 92 8d 04 	sts	0x048D, r1
     e98:	10 92 8c 04 	sts	0x048C, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     e9c:	e0 91 0c 01 	lds	r30, 0x010C
     ea0:	f0 91 0d 01 	lds	r31, 0x010D
     ea4:	81 e2       	ldi	r24, 0x21	; 33
     ea6:	80 83       	st	Z, r24
     ea8:	e0 91 0c 01 	lds	r30, 0x010C
     eac:	f0 91 0d 01 	lds	r31, 0x010D
     eb0:	10 82       	st	Z, r1
     eb2:	e0 91 0c 01 	lds	r30, 0x010C
     eb6:	f0 91 0d 01 	lds	r31, 0x010D
     eba:	8f e7       	ldi	r24, 0x7F	; 127
     ebc:	80 83       	st	Z, r24
     ebe:	e0 91 0c 01 	lds	r30, 0x010C
     ec2:	f0 91 0d 01 	lds	r31, 0x010D
     ec6:	82 e2       	ldi	r24, 0x22	; 34
     ec8:	80 83       	st	Z, r24
     eca:	e0 91 0c 01 	lds	r30, 0x010C
     ece:	f0 91 0d 01 	lds	r31, 0x010D
     ed2:	10 82       	st	Z, r1
     ed4:	e0 91 0c 01 	lds	r30, 0x010C
     ed8:	f0 91 0d 01 	lds	r31, 0x010D
     edc:	87 e0       	ldi	r24, 0x07	; 7
     ede:	80 83       	st	Z, r24
     ee0:	08 95       	ret

00000ee2 <oled_goto_line>:
	
	//write_c(0x00);
	//write_c(0x10);
}

void oled_goto_line(unsigned int line){
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ec 01       	movw	r28, r24
	oled_home();
     ee8:	0e 94 46 07 	call	0xe8c	; 0xe8c <oled_home>
	page = line;
     eec:	d0 93 8f 04 	sts	0x048F, r29
     ef0:	c0 93 8e 04 	sts	0x048E, r28
	if(line >= 8){
     ef4:	c8 30       	cpi	r28, 0x08	; 8
     ef6:	d1 05       	cpc	r29, r1
     ef8:	28 f0       	brcs	.+10     	; 0xf04 <oled_goto_line+0x22>
		printf("parameter too big, oled_goto_line\n");
     efa:	86 ea       	ldi	r24, 0xA6	; 166
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <oled_goto_line+0x44>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     f04:	e0 91 0c 01 	lds	r30, 0x010C
     f08:	f0 91 0d 01 	lds	r31, 0x010D
     f0c:	10 82       	st	Z, r1
     f0e:	e0 91 0c 01 	lds	r30, 0x010C
     f12:	f0 91 0d 01 	lds	r31, 0x010D
     f16:	80 e1       	ldi	r24, 0x10	; 16
     f18:	80 83       	st	Z, r24
	if(line >= 8){
		printf("parameter too big, oled_goto_line\n");
	}else{
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
     f1a:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     f1c:	e0 91 0c 01 	lds	r30, 0x010C
     f20:	f0 91 0d 01 	lds	r31, 0x010D
     f24:	c0 83       	st	Z, r28
	}else{
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <oled_clear_line>:
	
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
     f2c:	08 97       	sbiw	r24, 0x08	; 8
     f2e:	58 f4       	brcc	.+22     	; 0xf46 <oled_clear_line+0x1a>
     f30:	80 e8       	ldi	r24, 0x80	; 128
     f32:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
     f34:	e0 91 0a 01 	lds	r30, 0x010A
     f38:	f0 91 0b 01 	lds	r31, 0x010B
     f3c:	10 82       	st	Z, r1
     f3e:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	c1 f7       	brne	.-16     	; 0xf34 <oled_clear_line+0x8>
     f44:	08 95       	ret
			write_d(0b00000000);
		}
	}else{
		printf("parameter too big, oled_clear_line\n");
     f46:	8c ee       	ldi	r24, 0xEC	; 236
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <puts>
     f4e:	08 95       	ret

00000f50 <oled_reset>:

}


void oled_reset(void)
{		
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
     f54:	c0 e0       	ldi	r28, 0x00	; 0
     f56:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
     f58:	ce 01       	movw	r24, r28
     f5a:	0e 94 96 07 	call	0xf2c	; 0xf2c <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
     f5e:	21 96       	adiw	r28, 0x01	; 1
     f60:	c8 30       	cpi	r28, 0x08	; 8
     f62:	d1 05       	cpc	r29, r1
     f64:	c9 f7       	brne	.-14     	; 0xf58 <oled_reset+0x8>
		oled_clear_line(i);
	}
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <oled_ini>:
}

void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
     f6c:	85 b7       	in	r24, 0x35	; 53
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     f72:	80 b7       	in	r24, 0x30	; 48
     f74:	80 62       	ori	r24, 0x20	; 32
     f76:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     f78:	e0 91 0c 01 	lds	r30, 0x010C
     f7c:	f0 91 0d 01 	lds	r31, 0x010D
     f80:	8e ea       	ldi	r24, 0xAE	; 174
     f82:	80 83       	st	Z, r24
     f84:	e0 91 0c 01 	lds	r30, 0x010C
     f88:	f0 91 0d 01 	lds	r31, 0x010D
     f8c:	81 ea       	ldi	r24, 0xA1	; 161
     f8e:	80 83       	st	Z, r24
     f90:	e0 91 0c 01 	lds	r30, 0x010C
     f94:	f0 91 0d 01 	lds	r31, 0x010D
     f98:	8a ed       	ldi	r24, 0xDA	; 218
     f9a:	80 83       	st	Z, r24
     f9c:	e0 91 0c 01 	lds	r30, 0x010C
     fa0:	f0 91 0d 01 	lds	r31, 0x010D
     fa4:	82 e1       	ldi	r24, 0x12	; 18
     fa6:	80 83       	st	Z, r24
     fa8:	e0 91 0c 01 	lds	r30, 0x010C
     fac:	f0 91 0d 01 	lds	r31, 0x010D
     fb0:	88 ec       	ldi	r24, 0xC8	; 200
     fb2:	80 83       	st	Z, r24
     fb4:	e0 91 0c 01 	lds	r30, 0x010C
     fb8:	f0 91 0d 01 	lds	r31, 0x010D
     fbc:	88 ea       	ldi	r24, 0xA8	; 168
     fbe:	80 83       	st	Z, r24
     fc0:	e0 91 0c 01 	lds	r30, 0x010C
     fc4:	f0 91 0d 01 	lds	r31, 0x010D
     fc8:	8f e3       	ldi	r24, 0x3F	; 63
     fca:	80 83       	st	Z, r24
     fcc:	e0 91 0c 01 	lds	r30, 0x010C
     fd0:	f0 91 0d 01 	lds	r31, 0x010D
     fd4:	85 ed       	ldi	r24, 0xD5	; 213
     fd6:	80 83       	st	Z, r24
     fd8:	e0 91 0c 01 	lds	r30, 0x010C
     fdc:	f0 91 0d 01 	lds	r31, 0x010D
     fe0:	80 e8       	ldi	r24, 0x80	; 128
     fe2:	80 83       	st	Z, r24
     fe4:	e0 91 0c 01 	lds	r30, 0x010C
     fe8:	f0 91 0d 01 	lds	r31, 0x010D
     fec:	81 e8       	ldi	r24, 0x81	; 129
     fee:	80 83       	st	Z, r24
     ff0:	e0 91 0c 01 	lds	r30, 0x010C
     ff4:	f0 91 0d 01 	lds	r31, 0x010D
     ff8:	80 e5       	ldi	r24, 0x50	; 80
     ffa:	80 83       	st	Z, r24
     ffc:	e0 91 0c 01 	lds	r30, 0x010C
    1000:	f0 91 0d 01 	lds	r31, 0x010D
    1004:	89 ed       	ldi	r24, 0xD9	; 217
    1006:	80 83       	st	Z, r24
    1008:	e0 91 0c 01 	lds	r30, 0x010C
    100c:	f0 91 0d 01 	lds	r31, 0x010D
    1010:	81 e2       	ldi	r24, 0x21	; 33
    1012:	80 83       	st	Z, r24
    1014:	e0 91 0c 01 	lds	r30, 0x010C
    1018:	f0 91 0d 01 	lds	r31, 0x010D
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	80 83       	st	Z, r24
    1020:	e0 91 0c 01 	lds	r30, 0x010C
    1024:	f0 91 0d 01 	lds	r31, 0x010D
    1028:	10 82       	st	Z, r1
    102a:	e0 91 0c 01 	lds	r30, 0x010C
    102e:	f0 91 0d 01 	lds	r31, 0x010D
    1032:	8b ed       	ldi	r24, 0xDB	; 219
    1034:	80 83       	st	Z, r24
    1036:	e0 91 0c 01 	lds	r30, 0x010C
    103a:	f0 91 0d 01 	lds	r31, 0x010D
    103e:	80 e3       	ldi	r24, 0x30	; 48
    1040:	80 83       	st	Z, r24
    1042:	e0 91 0c 01 	lds	r30, 0x010C
    1046:	f0 91 0d 01 	lds	r31, 0x010D
    104a:	8d ea       	ldi	r24, 0xAD	; 173
    104c:	80 83       	st	Z, r24
    104e:	e0 91 0c 01 	lds	r30, 0x010C
    1052:	f0 91 0d 01 	lds	r31, 0x010D
    1056:	10 82       	st	Z, r1
    1058:	e0 91 0c 01 	lds	r30, 0x010C
    105c:	f0 91 0d 01 	lds	r31, 0x010D
    1060:	84 ea       	ldi	r24, 0xA4	; 164
    1062:	80 83       	st	Z, r24
    1064:	e0 91 0c 01 	lds	r30, 0x010C
    1068:	f0 91 0d 01 	lds	r31, 0x010D
    106c:	86 ea       	ldi	r24, 0xA6	; 166
    106e:	80 83       	st	Z, r24
    1070:	e0 91 0c 01 	lds	r30, 0x010C
    1074:	f0 91 0d 01 	lds	r31, 0x010D
    1078:	8f ea       	ldi	r24, 0xAF	; 175
    107a:	80 83       	st	Z, r24
    107c:	e0 91 0c 01 	lds	r30, 0x010C
    1080:	f0 91 0d 01 	lds	r31, 0x010D
    1084:	83 ed       	ldi	r24, 0xD3	; 211
    1086:	80 83       	st	Z, r24
    1088:	e0 91 0c 01 	lds	r30, 0x010C
    108c:	f0 91 0d 01 	lds	r31, 0x010D
    1090:	86 e7       	ldi	r24, 0x76	; 118
    1092:	80 83       	st	Z, r24
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	write_c(0xd3);			//offset fix on the screen
	write_c(0x76);			//value of the offset
	oled_reset();
    1094:	0e 94 a8 07 	call	0xf50	; 0xf50 <oled_reset>
	oled_home();
    1098:	0e 94 46 07 	call	0xe8c	; 0xe8c <oled_home>
    109c:	08 95       	ret

0000109e <oled_print_char>:
	}else{
		
	}
}
int oled_print_char(char letter){
	if(letter != '\0'){
    109e:	88 23       	and	r24, r24
    10a0:	c1 f0       	breq	.+48     	; 0x10d2 <oled_print_char+0x34>
    10a2:	e8 2f       	mov	r30, r24
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	e0 53       	subi	r30, 0x30	; 48
    10b4:	f0 40       	sbci	r31, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
    10ba:	a0 91 0a 01 	lds	r26, 0x010A
    10be:	b0 91 0b 01 	lds	r27, 0x010B
    10c2:	24 91       	lpm	r18, Z
    10c4:	2c 93       	st	X, r18
	}
}
int oled_print_char(char letter){
	if(letter != '\0'){
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	31 96       	adiw	r30, 0x01	; 1
    10ca:	88 30       	cpi	r24, 0x08	; 8
    10cc:	91 05       	cpc	r25, r1
    10ce:	a9 f7       	brne	.-22     	; 0x10ba <oled_print_char+0x1c>
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <oled_print_char+0x3a>
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
	}else{
		return 0;	
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	08 95       	ret
	if(letter != '\0'){
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 0;	
	}
}
    10dc:	08 95       	ret

000010de <oled_print>:
		return 0;
	}
}


void oled_print(char* letters){
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (oled_print_char(letters[i++])){
    10e4:	89 91       	ld	r24, Y+
    10e6:	0e 94 4f 08 	call	0x109e	; 0x109e <oled_print_char>
    10ea:	89 2b       	or	r24, r25
    10ec:	d9 f7       	brne	.-10     	; 0x10e4 <oled_print+0x6>
	}
}
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <send_UART>:
    10f4:	5d 9b       	sbis	0x0b, 5	; 11
    10f6:	fe cf       	rjmp	.-4      	; 0x10f4 <send_UART>
    10f8:	8c b9       	out	0x0c, r24	; 12
    10fa:	08 95       	ret

000010fc <recieve_UART>:
    10fc:	5f 9b       	sbis	0x0b, 7	; 11
    10fe:	fe cf       	rjmp	.-4      	; 0x10fc <recieve_UART>
    1100:	8c b1       	in	r24, 0x0c	; 12
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	08 95       	ret

00001106 <init_UART>:
    1106:	90 bd       	out	0x20, r25	; 32
    1108:	89 b9       	out	0x09, r24	; 9
    110a:	88 e1       	ldi	r24, 0x18	; 24
    110c:	8a b9       	out	0x0a, r24	; 10
    110e:	6e e7       	ldi	r22, 0x7E	; 126
    1110:	78 e0       	ldi	r23, 0x08	; 8
    1112:	8a e7       	ldi	r24, 0x7A	; 122
    1114:	98 e0       	ldi	r25, 0x08	; 8
    1116:	0e 94 0a 0b 	call	0x1614	; 0x1614 <fdevopen>
    111a:	08 95       	ret

0000111c <__subsf3>:
    111c:	50 58       	subi	r21, 0x80	; 128

0000111e <__addsf3>:
    111e:	bb 27       	eor	r27, r27
    1120:	aa 27       	eor	r26, r26
    1122:	0e d0       	rcall	.+28     	; 0x1140 <__addsf3x>
    1124:	4d c1       	rjmp	.+666    	; 0x13c0 <__fp_round>
    1126:	3e d1       	rcall	.+636    	; 0x13a4 <__fp_pscA>
    1128:	30 f0       	brcs	.+12     	; 0x1136 <__addsf3+0x18>
    112a:	43 d1       	rcall	.+646    	; 0x13b2 <__fp_pscB>
    112c:	20 f0       	brcs	.+8      	; 0x1136 <__addsf3+0x18>
    112e:	31 f4       	brne	.+12     	; 0x113c <__addsf3+0x1e>
    1130:	9f 3f       	cpi	r25, 0xFF	; 255
    1132:	11 f4       	brne	.+4      	; 0x1138 <__addsf3+0x1a>
    1134:	1e f4       	brtc	.+6      	; 0x113c <__addsf3+0x1e>
    1136:	33 c1       	rjmp	.+614    	; 0x139e <__fp_nan>
    1138:	0e f4       	brtc	.+2      	; 0x113c <__addsf3+0x1e>
    113a:	e0 95       	com	r30
    113c:	e7 fb       	bst	r30, 7
    113e:	29 c1       	rjmp	.+594    	; 0x1392 <__fp_inf>

00001140 <__addsf3x>:
    1140:	e9 2f       	mov	r30, r25
    1142:	4f d1       	rcall	.+670    	; 0x13e2 <__fp_split3>
    1144:	80 f3       	brcs	.-32     	; 0x1126 <__addsf3+0x8>
    1146:	ba 17       	cp	r27, r26
    1148:	62 07       	cpc	r22, r18
    114a:	73 07       	cpc	r23, r19
    114c:	84 07       	cpc	r24, r20
    114e:	95 07       	cpc	r25, r21
    1150:	18 f0       	brcs	.+6      	; 0x1158 <__addsf3x+0x18>
    1152:	71 f4       	brne	.+28     	; 0x1170 <__addsf3x+0x30>
    1154:	9e f5       	brtc	.+102    	; 0x11bc <__addsf3x+0x7c>
    1156:	67 c1       	rjmp	.+718    	; 0x1426 <__fp_zero>
    1158:	0e f4       	brtc	.+2      	; 0x115c <__addsf3x+0x1c>
    115a:	e0 95       	com	r30
    115c:	0b 2e       	mov	r0, r27
    115e:	ba 2f       	mov	r27, r26
    1160:	a0 2d       	mov	r26, r0
    1162:	0b 01       	movw	r0, r22
    1164:	b9 01       	movw	r22, r18
    1166:	90 01       	movw	r18, r0
    1168:	0c 01       	movw	r0, r24
    116a:	ca 01       	movw	r24, r20
    116c:	a0 01       	movw	r20, r0
    116e:	11 24       	eor	r1, r1
    1170:	ff 27       	eor	r31, r31
    1172:	59 1b       	sub	r21, r25
    1174:	99 f0       	breq	.+38     	; 0x119c <__addsf3x+0x5c>
    1176:	59 3f       	cpi	r21, 0xF9	; 249
    1178:	50 f4       	brcc	.+20     	; 0x118e <__addsf3x+0x4e>
    117a:	50 3e       	cpi	r21, 0xE0	; 224
    117c:	68 f1       	brcs	.+90     	; 0x11d8 <__addsf3x+0x98>
    117e:	1a 16       	cp	r1, r26
    1180:	f0 40       	sbci	r31, 0x00	; 0
    1182:	a2 2f       	mov	r26, r18
    1184:	23 2f       	mov	r18, r19
    1186:	34 2f       	mov	r19, r20
    1188:	44 27       	eor	r20, r20
    118a:	58 5f       	subi	r21, 0xF8	; 248
    118c:	f3 cf       	rjmp	.-26     	; 0x1174 <__addsf3x+0x34>
    118e:	46 95       	lsr	r20
    1190:	37 95       	ror	r19
    1192:	27 95       	ror	r18
    1194:	a7 95       	ror	r26
    1196:	f0 40       	sbci	r31, 0x00	; 0
    1198:	53 95       	inc	r21
    119a:	c9 f7       	brne	.-14     	; 0x118e <__addsf3x+0x4e>
    119c:	7e f4       	brtc	.+30     	; 0x11bc <__addsf3x+0x7c>
    119e:	1f 16       	cp	r1, r31
    11a0:	ba 0b       	sbc	r27, r26
    11a2:	62 0b       	sbc	r22, r18
    11a4:	73 0b       	sbc	r23, r19
    11a6:	84 0b       	sbc	r24, r20
    11a8:	ba f0       	brmi	.+46     	; 0x11d8 <__addsf3x+0x98>
    11aa:	91 50       	subi	r25, 0x01	; 1
    11ac:	a1 f0       	breq	.+40     	; 0x11d6 <__addsf3x+0x96>
    11ae:	ff 0f       	add	r31, r31
    11b0:	bb 1f       	adc	r27, r27
    11b2:	66 1f       	adc	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	c2 f7       	brpl	.-16     	; 0x11aa <__addsf3x+0x6a>
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <__addsf3x+0x98>
    11bc:	ba 0f       	add	r27, r26
    11be:	62 1f       	adc	r22, r18
    11c0:	73 1f       	adc	r23, r19
    11c2:	84 1f       	adc	r24, r20
    11c4:	48 f4       	brcc	.+18     	; 0x11d8 <__addsf3x+0x98>
    11c6:	87 95       	ror	r24
    11c8:	77 95       	ror	r23
    11ca:	67 95       	ror	r22
    11cc:	b7 95       	ror	r27
    11ce:	f7 95       	ror	r31
    11d0:	9e 3f       	cpi	r25, 0xFE	; 254
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <__addsf3x+0x96>
    11d4:	b3 cf       	rjmp	.-154    	; 0x113c <__addsf3+0x1e>
    11d6:	93 95       	inc	r25
    11d8:	88 0f       	add	r24, r24
    11da:	08 f0       	brcs	.+2      	; 0x11de <__addsf3x+0x9e>
    11dc:	99 27       	eor	r25, r25
    11de:	ee 0f       	add	r30, r30
    11e0:	97 95       	ror	r25
    11e2:	87 95       	ror	r24
    11e4:	08 95       	ret

000011e6 <__divsf3>:
    11e6:	0c d0       	rcall	.+24     	; 0x1200 <__divsf3x>
    11e8:	eb c0       	rjmp	.+470    	; 0x13c0 <__fp_round>
    11ea:	e3 d0       	rcall	.+454    	; 0x13b2 <__fp_pscB>
    11ec:	40 f0       	brcs	.+16     	; 0x11fe <__divsf3+0x18>
    11ee:	da d0       	rcall	.+436    	; 0x13a4 <__fp_pscA>
    11f0:	30 f0       	brcs	.+12     	; 0x11fe <__divsf3+0x18>
    11f2:	21 f4       	brne	.+8      	; 0x11fc <__divsf3+0x16>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	19 f0       	breq	.+6      	; 0x11fe <__divsf3+0x18>
    11f8:	cc c0       	rjmp	.+408    	; 0x1392 <__fp_inf>
    11fa:	51 11       	cpse	r21, r1
    11fc:	15 c1       	rjmp	.+554    	; 0x1428 <__fp_szero>
    11fe:	cf c0       	rjmp	.+414    	; 0x139e <__fp_nan>

00001200 <__divsf3x>:
    1200:	f0 d0       	rcall	.+480    	; 0x13e2 <__fp_split3>
    1202:	98 f3       	brcs	.-26     	; 0x11ea <__divsf3+0x4>

00001204 <__divsf3_pse>:
    1204:	99 23       	and	r25, r25
    1206:	c9 f3       	breq	.-14     	; 0x11fa <__divsf3+0x14>
    1208:	55 23       	and	r21, r21
    120a:	b1 f3       	breq	.-20     	; 0x11f8 <__divsf3+0x12>
    120c:	95 1b       	sub	r25, r21
    120e:	55 0b       	sbc	r21, r21
    1210:	bb 27       	eor	r27, r27
    1212:	aa 27       	eor	r26, r26
    1214:	62 17       	cp	r22, r18
    1216:	73 07       	cpc	r23, r19
    1218:	84 07       	cpc	r24, r20
    121a:	38 f0       	brcs	.+14     	; 0x122a <__divsf3_pse+0x26>
    121c:	9f 5f       	subi	r25, 0xFF	; 255
    121e:	5f 4f       	sbci	r21, 0xFF	; 255
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	44 1f       	adc	r20, r20
    1226:	aa 1f       	adc	r26, r26
    1228:	a9 f3       	breq	.-22     	; 0x1214 <__divsf3_pse+0x10>
    122a:	33 d0       	rcall	.+102    	; 0x1292 <__divsf3_pse+0x8e>
    122c:	0e 2e       	mov	r0, r30
    122e:	3a f0       	brmi	.+14     	; 0x123e <__divsf3_pse+0x3a>
    1230:	e0 e8       	ldi	r30, 0x80	; 128
    1232:	30 d0       	rcall	.+96     	; 0x1294 <__divsf3_pse+0x90>
    1234:	91 50       	subi	r25, 0x01	; 1
    1236:	50 40       	sbci	r21, 0x00	; 0
    1238:	e6 95       	lsr	r30
    123a:	00 1c       	adc	r0, r0
    123c:	ca f7       	brpl	.-14     	; 0x1230 <__divsf3_pse+0x2c>
    123e:	29 d0       	rcall	.+82     	; 0x1292 <__divsf3_pse+0x8e>
    1240:	fe 2f       	mov	r31, r30
    1242:	27 d0       	rcall	.+78     	; 0x1292 <__divsf3_pse+0x8e>
    1244:	66 0f       	add	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	bb 1f       	adc	r27, r27
    124c:	26 17       	cp	r18, r22
    124e:	37 07       	cpc	r19, r23
    1250:	48 07       	cpc	r20, r24
    1252:	ab 07       	cpc	r26, r27
    1254:	b0 e8       	ldi	r27, 0x80	; 128
    1256:	09 f0       	breq	.+2      	; 0x125a <__divsf3_pse+0x56>
    1258:	bb 0b       	sbc	r27, r27
    125a:	80 2d       	mov	r24, r0
    125c:	bf 01       	movw	r22, r30
    125e:	ff 27       	eor	r31, r31
    1260:	93 58       	subi	r25, 0x83	; 131
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	2a f0       	brmi	.+10     	; 0x1270 <__divsf3_pse+0x6c>
    1266:	9e 3f       	cpi	r25, 0xFE	; 254
    1268:	51 05       	cpc	r21, r1
    126a:	68 f0       	brcs	.+26     	; 0x1286 <__divsf3_pse+0x82>
    126c:	92 c0       	rjmp	.+292    	; 0x1392 <__fp_inf>
    126e:	dc c0       	rjmp	.+440    	; 0x1428 <__fp_szero>
    1270:	5f 3f       	cpi	r21, 0xFF	; 255
    1272:	ec f3       	brlt	.-6      	; 0x126e <__divsf3_pse+0x6a>
    1274:	98 3e       	cpi	r25, 0xE8	; 232
    1276:	dc f3       	brlt	.-10     	; 0x126e <__divsf3_pse+0x6a>
    1278:	86 95       	lsr	r24
    127a:	77 95       	ror	r23
    127c:	67 95       	ror	r22
    127e:	b7 95       	ror	r27
    1280:	f7 95       	ror	r31
    1282:	9f 5f       	subi	r25, 0xFF	; 255
    1284:	c9 f7       	brne	.-14     	; 0x1278 <__divsf3_pse+0x74>
    1286:	88 0f       	add	r24, r24
    1288:	91 1d       	adc	r25, r1
    128a:	96 95       	lsr	r25
    128c:	87 95       	ror	r24
    128e:	97 f9       	bld	r25, 7
    1290:	08 95       	ret
    1292:	e1 e0       	ldi	r30, 0x01	; 1
    1294:	66 0f       	add	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	88 1f       	adc	r24, r24
    129a:	bb 1f       	adc	r27, r27
    129c:	62 17       	cp	r22, r18
    129e:	73 07       	cpc	r23, r19
    12a0:	84 07       	cpc	r24, r20
    12a2:	ba 07       	cpc	r27, r26
    12a4:	20 f0       	brcs	.+8      	; 0x12ae <__divsf3_pse+0xaa>
    12a6:	62 1b       	sub	r22, r18
    12a8:	73 0b       	sbc	r23, r19
    12aa:	84 0b       	sbc	r24, r20
    12ac:	ba 0b       	sbc	r27, r26
    12ae:	ee 1f       	adc	r30, r30
    12b0:	88 f7       	brcc	.-30     	; 0x1294 <__divsf3_pse+0x90>
    12b2:	e0 95       	com	r30
    12b4:	08 95       	ret

000012b6 <__fixsfsi>:
    12b6:	04 d0       	rcall	.+8      	; 0x12c0 <__fixunssfsi>
    12b8:	68 94       	set
    12ba:	b1 11       	cpse	r27, r1
    12bc:	b5 c0       	rjmp	.+362    	; 0x1428 <__fp_szero>
    12be:	08 95       	ret

000012c0 <__fixunssfsi>:
    12c0:	98 d0       	rcall	.+304    	; 0x13f2 <__fp_splitA>
    12c2:	88 f0       	brcs	.+34     	; 0x12e6 <__fixunssfsi+0x26>
    12c4:	9f 57       	subi	r25, 0x7F	; 127
    12c6:	90 f0       	brcs	.+36     	; 0x12ec <__fixunssfsi+0x2c>
    12c8:	b9 2f       	mov	r27, r25
    12ca:	99 27       	eor	r25, r25
    12cc:	b7 51       	subi	r27, 0x17	; 23
    12ce:	a0 f0       	brcs	.+40     	; 0x12f8 <__fixunssfsi+0x38>
    12d0:	d1 f0       	breq	.+52     	; 0x1306 <__fixunssfsi+0x46>
    12d2:	66 0f       	add	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	1a f0       	brmi	.+6      	; 0x12e2 <__fixunssfsi+0x22>
    12dc:	ba 95       	dec	r27
    12de:	c9 f7       	brne	.-14     	; 0x12d2 <__fixunssfsi+0x12>
    12e0:	12 c0       	rjmp	.+36     	; 0x1306 <__fixunssfsi+0x46>
    12e2:	b1 30       	cpi	r27, 0x01	; 1
    12e4:	81 f0       	breq	.+32     	; 0x1306 <__fixunssfsi+0x46>
    12e6:	9f d0       	rcall	.+318    	; 0x1426 <__fp_zero>
    12e8:	b1 e0       	ldi	r27, 0x01	; 1
    12ea:	08 95       	ret
    12ec:	9c c0       	rjmp	.+312    	; 0x1426 <__fp_zero>
    12ee:	67 2f       	mov	r22, r23
    12f0:	78 2f       	mov	r23, r24
    12f2:	88 27       	eor	r24, r24
    12f4:	b8 5f       	subi	r27, 0xF8	; 248
    12f6:	39 f0       	breq	.+14     	; 0x1306 <__fixunssfsi+0x46>
    12f8:	b9 3f       	cpi	r27, 0xF9	; 249
    12fa:	cc f3       	brlt	.-14     	; 0x12ee <__fixunssfsi+0x2e>
    12fc:	86 95       	lsr	r24
    12fe:	77 95       	ror	r23
    1300:	67 95       	ror	r22
    1302:	b3 95       	inc	r27
    1304:	d9 f7       	brne	.-10     	; 0x12fc <__fixunssfsi+0x3c>
    1306:	3e f4       	brtc	.+14     	; 0x1316 <__fixunssfsi+0x56>
    1308:	90 95       	com	r25
    130a:	80 95       	com	r24
    130c:	70 95       	com	r23
    130e:	61 95       	neg	r22
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	8f 4f       	sbci	r24, 0xFF	; 255
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	08 95       	ret

00001318 <__floatunsisf>:
    1318:	e8 94       	clt
    131a:	09 c0       	rjmp	.+18     	; 0x132e <__floatsisf+0x12>

0000131c <__floatsisf>:
    131c:	97 fb       	bst	r25, 7
    131e:	3e f4       	brtc	.+14     	; 0x132e <__floatsisf+0x12>
    1320:	90 95       	com	r25
    1322:	80 95       	com	r24
    1324:	70 95       	com	r23
    1326:	61 95       	neg	r22
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	99 23       	and	r25, r25
    1330:	a9 f0       	breq	.+42     	; 0x135c <__floatsisf+0x40>
    1332:	f9 2f       	mov	r31, r25
    1334:	96 e9       	ldi	r25, 0x96	; 150
    1336:	bb 27       	eor	r27, r27
    1338:	93 95       	inc	r25
    133a:	f6 95       	lsr	r31
    133c:	87 95       	ror	r24
    133e:	77 95       	ror	r23
    1340:	67 95       	ror	r22
    1342:	b7 95       	ror	r27
    1344:	f1 11       	cpse	r31, r1
    1346:	f8 cf       	rjmp	.-16     	; 0x1338 <__floatsisf+0x1c>
    1348:	fa f4       	brpl	.+62     	; 0x1388 <__floatsisf+0x6c>
    134a:	bb 0f       	add	r27, r27
    134c:	11 f4       	brne	.+4      	; 0x1352 <__floatsisf+0x36>
    134e:	60 ff       	sbrs	r22, 0
    1350:	1b c0       	rjmp	.+54     	; 0x1388 <__floatsisf+0x6c>
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	8f 4f       	sbci	r24, 0xFF	; 255
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	16 c0       	rjmp	.+44     	; 0x1388 <__floatsisf+0x6c>
    135c:	88 23       	and	r24, r24
    135e:	11 f0       	breq	.+4      	; 0x1364 <__floatsisf+0x48>
    1360:	96 e9       	ldi	r25, 0x96	; 150
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <__floatsisf+0x6a>
    1364:	77 23       	and	r23, r23
    1366:	21 f0       	breq	.+8      	; 0x1370 <__floatsisf+0x54>
    1368:	9e e8       	ldi	r25, 0x8E	; 142
    136a:	87 2f       	mov	r24, r23
    136c:	76 2f       	mov	r23, r22
    136e:	05 c0       	rjmp	.+10     	; 0x137a <__floatsisf+0x5e>
    1370:	66 23       	and	r22, r22
    1372:	71 f0       	breq	.+28     	; 0x1390 <__floatsisf+0x74>
    1374:	96 e8       	ldi	r25, 0x86	; 134
    1376:	86 2f       	mov	r24, r22
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	2a f0       	brmi	.+10     	; 0x1388 <__floatsisf+0x6c>
    137e:	9a 95       	dec	r25
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	da f7       	brpl	.-10     	; 0x137e <__floatsisf+0x62>
    1388:	88 0f       	add	r24, r24
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret

00001392 <__fp_inf>:
    1392:	97 f9       	bld	r25, 7
    1394:	9f 67       	ori	r25, 0x7F	; 127
    1396:	80 e8       	ldi	r24, 0x80	; 128
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	08 95       	ret

0000139e <__fp_nan>:
    139e:	9f ef       	ldi	r25, 0xFF	; 255
    13a0:	80 ec       	ldi	r24, 0xC0	; 192
    13a2:	08 95       	ret

000013a4 <__fp_pscA>:
    13a4:	00 24       	eor	r0, r0
    13a6:	0a 94       	dec	r0
    13a8:	16 16       	cp	r1, r22
    13aa:	17 06       	cpc	r1, r23
    13ac:	18 06       	cpc	r1, r24
    13ae:	09 06       	cpc	r0, r25
    13b0:	08 95       	ret

000013b2 <__fp_pscB>:
    13b2:	00 24       	eor	r0, r0
    13b4:	0a 94       	dec	r0
    13b6:	12 16       	cp	r1, r18
    13b8:	13 06       	cpc	r1, r19
    13ba:	14 06       	cpc	r1, r20
    13bc:	05 06       	cpc	r0, r21
    13be:	08 95       	ret

000013c0 <__fp_round>:
    13c0:	09 2e       	mov	r0, r25
    13c2:	03 94       	inc	r0
    13c4:	00 0c       	add	r0, r0
    13c6:	11 f4       	brne	.+4      	; 0x13cc <__fp_round+0xc>
    13c8:	88 23       	and	r24, r24
    13ca:	52 f0       	brmi	.+20     	; 0x13e0 <__fp_round+0x20>
    13cc:	bb 0f       	add	r27, r27
    13ce:	40 f4       	brcc	.+16     	; 0x13e0 <__fp_round+0x20>
    13d0:	bf 2b       	or	r27, r31
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <__fp_round+0x18>
    13d4:	60 ff       	sbrs	r22, 0
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <__fp_round+0x20>
    13d8:	6f 5f       	subi	r22, 0xFF	; 255
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	8f 4f       	sbci	r24, 0xFF	; 255
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	08 95       	ret

000013e2 <__fp_split3>:
    13e2:	57 fd       	sbrc	r21, 7
    13e4:	90 58       	subi	r25, 0x80	; 128
    13e6:	44 0f       	add	r20, r20
    13e8:	55 1f       	adc	r21, r21
    13ea:	59 f0       	breq	.+22     	; 0x1402 <__fp_splitA+0x10>
    13ec:	5f 3f       	cpi	r21, 0xFF	; 255
    13ee:	71 f0       	breq	.+28     	; 0x140c <__fp_splitA+0x1a>
    13f0:	47 95       	ror	r20

000013f2 <__fp_splitA>:
    13f2:	88 0f       	add	r24, r24
    13f4:	97 fb       	bst	r25, 7
    13f6:	99 1f       	adc	r25, r25
    13f8:	61 f0       	breq	.+24     	; 0x1412 <__fp_splitA+0x20>
    13fa:	9f 3f       	cpi	r25, 0xFF	; 255
    13fc:	79 f0       	breq	.+30     	; 0x141c <__fp_splitA+0x2a>
    13fe:	87 95       	ror	r24
    1400:	08 95       	ret
    1402:	12 16       	cp	r1, r18
    1404:	13 06       	cpc	r1, r19
    1406:	14 06       	cpc	r1, r20
    1408:	55 1f       	adc	r21, r21
    140a:	f2 cf       	rjmp	.-28     	; 0x13f0 <__fp_split3+0xe>
    140c:	46 95       	lsr	r20
    140e:	f1 df       	rcall	.-30     	; 0x13f2 <__fp_splitA>
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <__fp_splitA+0x30>
    1412:	16 16       	cp	r1, r22
    1414:	17 06       	cpc	r1, r23
    1416:	18 06       	cpc	r1, r24
    1418:	99 1f       	adc	r25, r25
    141a:	f1 cf       	rjmp	.-30     	; 0x13fe <__fp_splitA+0xc>
    141c:	86 95       	lsr	r24
    141e:	71 05       	cpc	r23, r1
    1420:	61 05       	cpc	r22, r1
    1422:	08 94       	sec
    1424:	08 95       	ret

00001426 <__fp_zero>:
    1426:	e8 94       	clt

00001428 <__fp_szero>:
    1428:	bb 27       	eor	r27, r27
    142a:	66 27       	eor	r22, r22
    142c:	77 27       	eor	r23, r23
    142e:	cb 01       	movw	r24, r22
    1430:	97 f9       	bld	r25, 7
    1432:	08 95       	ret

00001434 <__mulsf3>:
    1434:	0b d0       	rcall	.+22     	; 0x144c <__mulsf3x>
    1436:	c4 cf       	rjmp	.-120    	; 0x13c0 <__fp_round>
    1438:	b5 df       	rcall	.-150    	; 0x13a4 <__fp_pscA>
    143a:	28 f0       	brcs	.+10     	; 0x1446 <__mulsf3+0x12>
    143c:	ba df       	rcall	.-140    	; 0x13b2 <__fp_pscB>
    143e:	18 f0       	brcs	.+6      	; 0x1446 <__mulsf3+0x12>
    1440:	95 23       	and	r25, r21
    1442:	09 f0       	breq	.+2      	; 0x1446 <__mulsf3+0x12>
    1444:	a6 cf       	rjmp	.-180    	; 0x1392 <__fp_inf>
    1446:	ab cf       	rjmp	.-170    	; 0x139e <__fp_nan>
    1448:	11 24       	eor	r1, r1
    144a:	ee cf       	rjmp	.-36     	; 0x1428 <__fp_szero>

0000144c <__mulsf3x>:
    144c:	ca df       	rcall	.-108    	; 0x13e2 <__fp_split3>
    144e:	a0 f3       	brcs	.-24     	; 0x1438 <__mulsf3+0x4>

00001450 <__mulsf3_pse>:
    1450:	95 9f       	mul	r25, r21
    1452:	d1 f3       	breq	.-12     	; 0x1448 <__mulsf3+0x14>
    1454:	95 0f       	add	r25, r21
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	55 1f       	adc	r21, r21
    145a:	62 9f       	mul	r22, r18
    145c:	f0 01       	movw	r30, r0
    145e:	72 9f       	mul	r23, r18
    1460:	bb 27       	eor	r27, r27
    1462:	f0 0d       	add	r31, r0
    1464:	b1 1d       	adc	r27, r1
    1466:	63 9f       	mul	r22, r19
    1468:	aa 27       	eor	r26, r26
    146a:	f0 0d       	add	r31, r0
    146c:	b1 1d       	adc	r27, r1
    146e:	aa 1f       	adc	r26, r26
    1470:	64 9f       	mul	r22, r20
    1472:	66 27       	eor	r22, r22
    1474:	b0 0d       	add	r27, r0
    1476:	a1 1d       	adc	r26, r1
    1478:	66 1f       	adc	r22, r22
    147a:	82 9f       	mul	r24, r18
    147c:	22 27       	eor	r18, r18
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	62 1f       	adc	r22, r18
    1484:	73 9f       	mul	r23, r19
    1486:	b0 0d       	add	r27, r0
    1488:	a1 1d       	adc	r26, r1
    148a:	62 1f       	adc	r22, r18
    148c:	83 9f       	mul	r24, r19
    148e:	a0 0d       	add	r26, r0
    1490:	61 1d       	adc	r22, r1
    1492:	22 1f       	adc	r18, r18
    1494:	74 9f       	mul	r23, r20
    1496:	33 27       	eor	r19, r19
    1498:	a0 0d       	add	r26, r0
    149a:	61 1d       	adc	r22, r1
    149c:	23 1f       	adc	r18, r19
    149e:	84 9f       	mul	r24, r20
    14a0:	60 0d       	add	r22, r0
    14a2:	21 1d       	adc	r18, r1
    14a4:	82 2f       	mov	r24, r18
    14a6:	76 2f       	mov	r23, r22
    14a8:	6a 2f       	mov	r22, r26
    14aa:	11 24       	eor	r1, r1
    14ac:	9f 57       	subi	r25, 0x7F	; 127
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	8a f0       	brmi	.+34     	; 0x14d4 <__mulsf3_pse+0x84>
    14b2:	e1 f0       	breq	.+56     	; 0x14ec <__mulsf3_pse+0x9c>
    14b4:	88 23       	and	r24, r24
    14b6:	4a f0       	brmi	.+18     	; 0x14ca <__mulsf3_pse+0x7a>
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	bb 1f       	adc	r27, r27
    14be:	66 1f       	adc	r22, r22
    14c0:	77 1f       	adc	r23, r23
    14c2:	88 1f       	adc	r24, r24
    14c4:	91 50       	subi	r25, 0x01	; 1
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	a9 f7       	brne	.-22     	; 0x14b4 <__mulsf3_pse+0x64>
    14ca:	9e 3f       	cpi	r25, 0xFE	; 254
    14cc:	51 05       	cpc	r21, r1
    14ce:	70 f0       	brcs	.+28     	; 0x14ec <__mulsf3_pse+0x9c>
    14d0:	60 cf       	rjmp	.-320    	; 0x1392 <__fp_inf>
    14d2:	aa cf       	rjmp	.-172    	; 0x1428 <__fp_szero>
    14d4:	5f 3f       	cpi	r21, 0xFF	; 255
    14d6:	ec f3       	brlt	.-6      	; 0x14d2 <__mulsf3_pse+0x82>
    14d8:	98 3e       	cpi	r25, 0xE8	; 232
    14da:	dc f3       	brlt	.-10     	; 0x14d2 <__mulsf3_pse+0x82>
    14dc:	86 95       	lsr	r24
    14de:	77 95       	ror	r23
    14e0:	67 95       	ror	r22
    14e2:	b7 95       	ror	r27
    14e4:	f7 95       	ror	r31
    14e6:	e7 95       	ror	r30
    14e8:	9f 5f       	subi	r25, 0xFF	; 255
    14ea:	c1 f7       	brne	.-16     	; 0x14dc <__mulsf3_pse+0x8c>
    14ec:	fe 2b       	or	r31, r30
    14ee:	88 0f       	add	r24, r24
    14f0:	91 1d       	adc	r25, r1
    14f2:	96 95       	lsr	r25
    14f4:	87 95       	ror	r24
    14f6:	97 f9       	bld	r25, 7
    14f8:	08 95       	ret

000014fa <__divmodhi4>:
    14fa:	97 fb       	bst	r25, 7
    14fc:	07 2e       	mov	r0, r23
    14fe:	16 f4       	brtc	.+4      	; 0x1504 <__divmodhi4+0xa>
    1500:	00 94       	com	r0
    1502:	07 d0       	rcall	.+14     	; 0x1512 <__divmodhi4_neg1>
    1504:	77 fd       	sbrc	r23, 7
    1506:	09 d0       	rcall	.+18     	; 0x151a <__divmodhi4_neg2>
    1508:	0e 94 91 0a 	call	0x1522	; 0x1522 <__udivmodhi4>
    150c:	07 fc       	sbrc	r0, 7
    150e:	05 d0       	rcall	.+10     	; 0x151a <__divmodhi4_neg2>
    1510:	3e f4       	brtc	.+14     	; 0x1520 <__divmodhi4_exit>

00001512 <__divmodhi4_neg1>:
    1512:	90 95       	com	r25
    1514:	81 95       	neg	r24
    1516:	9f 4f       	sbci	r25, 0xFF	; 255
    1518:	08 95       	ret

0000151a <__divmodhi4_neg2>:
    151a:	70 95       	com	r23
    151c:	61 95       	neg	r22
    151e:	7f 4f       	sbci	r23, 0xFF	; 255

00001520 <__divmodhi4_exit>:
    1520:	08 95       	ret

00001522 <__udivmodhi4>:
    1522:	aa 1b       	sub	r26, r26
    1524:	bb 1b       	sub	r27, r27
    1526:	51 e1       	ldi	r21, 0x11	; 17
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <__udivmodhi4_ep>

0000152a <__udivmodhi4_loop>:
    152a:	aa 1f       	adc	r26, r26
    152c:	bb 1f       	adc	r27, r27
    152e:	a6 17       	cp	r26, r22
    1530:	b7 07       	cpc	r27, r23
    1532:	10 f0       	brcs	.+4      	; 0x1538 <__udivmodhi4_ep>
    1534:	a6 1b       	sub	r26, r22
    1536:	b7 0b       	sbc	r27, r23

00001538 <__udivmodhi4_ep>:
    1538:	88 1f       	adc	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	5a 95       	dec	r21
    153e:	a9 f7       	brne	.-22     	; 0x152a <__udivmodhi4_loop>
    1540:	80 95       	com	r24
    1542:	90 95       	com	r25
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	08 95       	ret

0000154a <do_rand>:
    154a:	8f 92       	push	r8
    154c:	9f 92       	push	r9
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ec 01       	movw	r28, r24
    1560:	68 81       	ld	r22, Y
    1562:	79 81       	ldd	r23, Y+1	; 0x01
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	61 15       	cp	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	81 05       	cpc	r24, r1
    156e:	91 05       	cpc	r25, r1
    1570:	21 f4       	brne	.+8      	; 0x157a <do_rand+0x30>
    1572:	64 e2       	ldi	r22, 0x24	; 36
    1574:	79 ed       	ldi	r23, 0xD9	; 217
    1576:	8b e5       	ldi	r24, 0x5B	; 91
    1578:	97 e0       	ldi	r25, 0x07	; 7
    157a:	2d e1       	ldi	r18, 0x1D	; 29
    157c:	33 ef       	ldi	r19, 0xF3	; 243
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__divmodsi4>
    1586:	49 01       	movw	r8, r18
    1588:	5a 01       	movw	r10, r20
    158a:	9b 01       	movw	r18, r22
    158c:	ac 01       	movw	r20, r24
    158e:	a7 ea       	ldi	r26, 0xA7	; 167
    1590:	b1 e4       	ldi	r27, 0x41	; 65
    1592:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__muluhisi3>
    1596:	6b 01       	movw	r12, r22
    1598:	7c 01       	movw	r14, r24
    159a:	ac ee       	ldi	r26, 0xEC	; 236
    159c:	b4 ef       	ldi	r27, 0xF4	; 244
    159e:	a5 01       	movw	r20, r10
    15a0:	94 01       	movw	r18, r8
    15a2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__mulohisi3>
    15a6:	c6 0e       	add	r12, r22
    15a8:	d7 1e       	adc	r13, r23
    15aa:	e8 1e       	adc	r14, r24
    15ac:	f9 1e       	adc	r15, r25
    15ae:	f7 fe       	sbrs	r15, 7
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <do_rand+0x74>
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	c8 1a       	sub	r12, r24
    15b6:	d1 08       	sbc	r13, r1
    15b8:	e1 08       	sbc	r14, r1
    15ba:	80 e8       	ldi	r24, 0x80	; 128
    15bc:	f8 0a       	sbc	r15, r24
    15be:	c8 82       	st	Y, r12
    15c0:	d9 82       	std	Y+1, r13	; 0x01
    15c2:	ea 82       	std	Y+2, r14	; 0x02
    15c4:	fb 82       	std	Y+3, r15	; 0x03
    15c6:	c6 01       	movw	r24, r12
    15c8:	9f 77       	andi	r25, 0x7F	; 127
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	bf 90       	pop	r11
    15d8:	af 90       	pop	r10
    15da:	9f 90       	pop	r9
    15dc:	8f 90       	pop	r8
    15de:	08 95       	ret

000015e0 <rand_r>:
    15e0:	0e 94 a5 0a 	call	0x154a	; 0x154a <do_rand>
    15e4:	08 95       	ret

000015e6 <rand>:
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	0e 94 a5 0a 	call	0x154a	; 0x154a <do_rand>
    15ee:	08 95       	ret

000015f0 <srand>:
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	80 93 00 01 	sts	0x0100, r24
    15f8:	90 93 01 01 	sts	0x0101, r25
    15fc:	a0 93 02 01 	sts	0x0102, r26
    1600:	b0 93 03 01 	sts	0x0103, r27
    1604:	08 95       	ret

00001606 <strcpy_P>:
    1606:	fb 01       	movw	r30, r22
    1608:	dc 01       	movw	r26, r24
    160a:	05 90       	lpm	r0, Z+
    160c:	0d 92       	st	X+, r0
    160e:	00 20       	and	r0, r0
    1610:	e1 f7       	brne	.-8      	; 0x160a <strcpy_P+0x4>
    1612:	08 95       	ret

00001614 <fdevopen>:
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	ec 01       	movw	r28, r24
    161e:	8b 01       	movw	r16, r22
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	31 f4       	brne	.+12     	; 0x1630 <fdevopen+0x1c>
    1624:	61 15       	cp	r22, r1
    1626:	71 05       	cpc	r23, r1
    1628:	19 f4       	brne	.+6      	; 0x1630 <fdevopen+0x1c>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	38 c0       	rjmp	.+112    	; 0x16a0 <fdevopen+0x8c>
    1630:	6e e0       	ldi	r22, 0x0E	; 14
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <calloc>
    163c:	fc 01       	movw	r30, r24
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	a1 f3       	breq	.-24     	; 0x162a <fdevopen+0x16>
    1642:	80 e8       	ldi	r24, 0x80	; 128
    1644:	83 83       	std	Z+3, r24	; 0x03
    1646:	01 15       	cp	r16, r1
    1648:	11 05       	cpc	r17, r1
    164a:	71 f0       	breq	.+28     	; 0x1668 <fdevopen+0x54>
    164c:	13 87       	std	Z+11, r17	; 0x0b
    164e:	02 87       	std	Z+10, r16	; 0x0a
    1650:	81 e8       	ldi	r24, 0x81	; 129
    1652:	83 83       	std	Z+3, r24	; 0x03
    1654:	80 91 90 04 	lds	r24, 0x0490
    1658:	90 91 91 04 	lds	r25, 0x0491
    165c:	89 2b       	or	r24, r25
    165e:	21 f4       	brne	.+8      	; 0x1668 <fdevopen+0x54>
    1660:	f0 93 91 04 	sts	0x0491, r31
    1664:	e0 93 90 04 	sts	0x0490, r30
    1668:	20 97       	sbiw	r28, 0x00	; 0
    166a:	c9 f0       	breq	.+50     	; 0x169e <fdevopen+0x8a>
    166c:	d1 87       	std	Z+9, r29	; 0x09
    166e:	c0 87       	std	Z+8, r28	; 0x08
    1670:	83 81       	ldd	r24, Z+3	; 0x03
    1672:	82 60       	ori	r24, 0x02	; 2
    1674:	83 83       	std	Z+3, r24	; 0x03
    1676:	80 91 92 04 	lds	r24, 0x0492
    167a:	90 91 93 04 	lds	r25, 0x0493
    167e:	89 2b       	or	r24, r25
    1680:	71 f4       	brne	.+28     	; 0x169e <fdevopen+0x8a>
    1682:	f0 93 93 04 	sts	0x0493, r31
    1686:	e0 93 92 04 	sts	0x0492, r30
    168a:	80 91 94 04 	lds	r24, 0x0494
    168e:	90 91 95 04 	lds	r25, 0x0495
    1692:	89 2b       	or	r24, r25
    1694:	21 f4       	brne	.+8      	; 0x169e <fdevopen+0x8a>
    1696:	f0 93 95 04 	sts	0x0495, r31
    169a:	e0 93 94 04 	sts	0x0494, r30
    169e:	cf 01       	movw	r24, r30
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <printf>:
    16aa:	a0 e0       	ldi	r26, 0x00	; 0
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	fb e0       	ldi	r31, 0x0B	; 11
    16b2:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__prologue_saves__+0x20>
    16b6:	fe 01       	movw	r30, r28
    16b8:	35 96       	adiw	r30, 0x05	; 5
    16ba:	61 91       	ld	r22, Z+
    16bc:	71 91       	ld	r23, Z+
    16be:	af 01       	movw	r20, r30
    16c0:	80 91 92 04 	lds	r24, 0x0492
    16c4:	90 91 93 04 	lds	r25, 0x0493
    16c8:	0e 94 96 0b 	call	0x172c	; 0x172c <vfprintf>
    16cc:	e2 e0       	ldi	r30, 0x02	; 2
    16ce:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__epilogue_restores__+0x20>

000016d2 <puts>:
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	e0 91 92 04 	lds	r30, 0x0492
    16de:	f0 91 93 04 	lds	r31, 0x0493
    16e2:	23 81       	ldd	r18, Z+3	; 0x03
    16e4:	21 ff       	sbrs	r18, 1
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <puts+0x4c>
    16e8:	ec 01       	movw	r28, r24
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	10 e0       	ldi	r17, 0x00	; 0
    16ee:	89 91       	ld	r24, Y+
    16f0:	60 91 92 04 	lds	r22, 0x0492
    16f4:	70 91 93 04 	lds	r23, 0x0493
    16f8:	db 01       	movw	r26, r22
    16fa:	18 96       	adiw	r26, 0x08	; 8
    16fc:	ed 91       	ld	r30, X+
    16fe:	fc 91       	ld	r31, X
    1700:	19 97       	sbiw	r26, 0x09	; 9
    1702:	88 23       	and	r24, r24
    1704:	31 f0       	breq	.+12     	; 0x1712 <puts+0x40>
    1706:	09 95       	icall
    1708:	89 2b       	or	r24, r25
    170a:	89 f3       	breq	.-30     	; 0x16ee <puts+0x1c>
    170c:	0f ef       	ldi	r16, 0xFF	; 255
    170e:	1f ef       	ldi	r17, 0xFF	; 255
    1710:	ee cf       	rjmp	.-36     	; 0x16ee <puts+0x1c>
    1712:	8a e0       	ldi	r24, 0x0A	; 10
    1714:	09 95       	icall
    1716:	89 2b       	or	r24, r25
    1718:	11 f4       	brne	.+4      	; 0x171e <puts+0x4c>
    171a:	c8 01       	movw	r24, r16
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <puts+0x50>
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <vfprintf>:
    172c:	ac e0       	ldi	r26, 0x0C	; 12
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ec e9       	ldi	r30, 0x9C	; 156
    1732:	fb e0       	ldi	r31, 0x0B	; 11
    1734:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__prologue_saves__>
    1738:	7c 01       	movw	r14, r24
    173a:	6b 01       	movw	r12, r22
    173c:	8a 01       	movw	r16, r20
    173e:	fc 01       	movw	r30, r24
    1740:	17 82       	std	Z+7, r1	; 0x07
    1742:	16 82       	std	Z+6, r1	; 0x06
    1744:	83 81       	ldd	r24, Z+3	; 0x03
    1746:	81 ff       	sbrs	r24, 1
    1748:	bd c1       	rjmp	.+890    	; 0x1ac4 <vfprintf+0x398>
    174a:	ce 01       	movw	r24, r28
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	4c 01       	movw	r8, r24
    1750:	f7 01       	movw	r30, r14
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	f6 01       	movw	r30, r12
    1756:	93 fd       	sbrc	r25, 3
    1758:	85 91       	lpm	r24, Z+
    175a:	93 ff       	sbrs	r25, 3
    175c:	81 91       	ld	r24, Z+
    175e:	6f 01       	movw	r12, r30
    1760:	88 23       	and	r24, r24
    1762:	09 f4       	brne	.+2      	; 0x1766 <vfprintf+0x3a>
    1764:	ab c1       	rjmp	.+854    	; 0x1abc <vfprintf+0x390>
    1766:	85 32       	cpi	r24, 0x25	; 37
    1768:	39 f4       	brne	.+14     	; 0x1778 <vfprintf+0x4c>
    176a:	93 fd       	sbrc	r25, 3
    176c:	85 91       	lpm	r24, Z+
    176e:	93 ff       	sbrs	r25, 3
    1770:	81 91       	ld	r24, Z+
    1772:	6f 01       	movw	r12, r30
    1774:	85 32       	cpi	r24, 0x25	; 37
    1776:	29 f4       	brne	.+10     	; 0x1782 <vfprintf+0x56>
    1778:	b7 01       	movw	r22, r14
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    1780:	e7 cf       	rjmp	.-50     	; 0x1750 <vfprintf+0x24>
    1782:	51 2c       	mov	r5, r1
    1784:	31 2c       	mov	r3, r1
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	20 32       	cpi	r18, 0x20	; 32
    178a:	a0 f4       	brcc	.+40     	; 0x17b4 <vfprintf+0x88>
    178c:	8b 32       	cpi	r24, 0x2B	; 43
    178e:	69 f0       	breq	.+26     	; 0x17aa <vfprintf+0x7e>
    1790:	30 f4       	brcc	.+12     	; 0x179e <vfprintf+0x72>
    1792:	80 32       	cpi	r24, 0x20	; 32
    1794:	59 f0       	breq	.+22     	; 0x17ac <vfprintf+0x80>
    1796:	83 32       	cpi	r24, 0x23	; 35
    1798:	69 f4       	brne	.+26     	; 0x17b4 <vfprintf+0x88>
    179a:	20 61       	ori	r18, 0x10	; 16
    179c:	2c c0       	rjmp	.+88     	; 0x17f6 <vfprintf+0xca>
    179e:	8d 32       	cpi	r24, 0x2D	; 45
    17a0:	39 f0       	breq	.+14     	; 0x17b0 <vfprintf+0x84>
    17a2:	80 33       	cpi	r24, 0x30	; 48
    17a4:	39 f4       	brne	.+14     	; 0x17b4 <vfprintf+0x88>
    17a6:	21 60       	ori	r18, 0x01	; 1
    17a8:	26 c0       	rjmp	.+76     	; 0x17f6 <vfprintf+0xca>
    17aa:	22 60       	ori	r18, 0x02	; 2
    17ac:	24 60       	ori	r18, 0x04	; 4
    17ae:	23 c0       	rjmp	.+70     	; 0x17f6 <vfprintf+0xca>
    17b0:	28 60       	ori	r18, 0x08	; 8
    17b2:	21 c0       	rjmp	.+66     	; 0x17f6 <vfprintf+0xca>
    17b4:	27 fd       	sbrc	r18, 7
    17b6:	27 c0       	rjmp	.+78     	; 0x1806 <vfprintf+0xda>
    17b8:	30 ed       	ldi	r19, 0xD0	; 208
    17ba:	38 0f       	add	r19, r24
    17bc:	3a 30       	cpi	r19, 0x0A	; 10
    17be:	78 f4       	brcc	.+30     	; 0x17de <vfprintf+0xb2>
    17c0:	26 ff       	sbrs	r18, 6
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <vfprintf+0xa4>
    17c4:	fa e0       	ldi	r31, 0x0A	; 10
    17c6:	5f 9e       	mul	r5, r31
    17c8:	30 0d       	add	r19, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	53 2e       	mov	r5, r19
    17ce:	13 c0       	rjmp	.+38     	; 0x17f6 <vfprintf+0xca>
    17d0:	8a e0       	ldi	r24, 0x0A	; 10
    17d2:	38 9e       	mul	r3, r24
    17d4:	30 0d       	add	r19, r0
    17d6:	11 24       	eor	r1, r1
    17d8:	33 2e       	mov	r3, r19
    17da:	20 62       	ori	r18, 0x20	; 32
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <vfprintf+0xca>
    17de:	8e 32       	cpi	r24, 0x2E	; 46
    17e0:	21 f4       	brne	.+8      	; 0x17ea <vfprintf+0xbe>
    17e2:	26 fd       	sbrc	r18, 6
    17e4:	6b c1       	rjmp	.+726    	; 0x1abc <vfprintf+0x390>
    17e6:	20 64       	ori	r18, 0x40	; 64
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <vfprintf+0xca>
    17ea:	8c 36       	cpi	r24, 0x6C	; 108
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <vfprintf+0xc6>
    17ee:	20 68       	ori	r18, 0x80	; 128
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <vfprintf+0xca>
    17f2:	88 36       	cpi	r24, 0x68	; 104
    17f4:	41 f4       	brne	.+16     	; 0x1806 <vfprintf+0xda>
    17f6:	f6 01       	movw	r30, r12
    17f8:	93 fd       	sbrc	r25, 3
    17fa:	85 91       	lpm	r24, Z+
    17fc:	93 ff       	sbrs	r25, 3
    17fe:	81 91       	ld	r24, Z+
    1800:	6f 01       	movw	r12, r30
    1802:	81 11       	cpse	r24, r1
    1804:	c1 cf       	rjmp	.-126    	; 0x1788 <vfprintf+0x5c>
    1806:	98 2f       	mov	r25, r24
    1808:	9f 7d       	andi	r25, 0xDF	; 223
    180a:	95 54       	subi	r25, 0x45	; 69
    180c:	93 30       	cpi	r25, 0x03	; 3
    180e:	28 f4       	brcc	.+10     	; 0x181a <vfprintf+0xee>
    1810:	0c 5f       	subi	r16, 0xFC	; 252
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	ff e3       	ldi	r31, 0x3F	; 63
    1816:	f9 83       	std	Y+1, r31	; 0x01
    1818:	0d c0       	rjmp	.+26     	; 0x1834 <vfprintf+0x108>
    181a:	83 36       	cpi	r24, 0x63	; 99
    181c:	31 f0       	breq	.+12     	; 0x182a <vfprintf+0xfe>
    181e:	83 37       	cpi	r24, 0x73	; 115
    1820:	71 f0       	breq	.+28     	; 0x183e <vfprintf+0x112>
    1822:	83 35       	cpi	r24, 0x53	; 83
    1824:	09 f0       	breq	.+2      	; 0x1828 <vfprintf+0xfc>
    1826:	5b c0       	rjmp	.+182    	; 0x18de <vfprintf+0x1b2>
    1828:	22 c0       	rjmp	.+68     	; 0x186e <vfprintf+0x142>
    182a:	f8 01       	movw	r30, r16
    182c:	80 81       	ld	r24, Z
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	0e 5f       	subi	r16, 0xFE	; 254
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	44 24       	eor	r4, r4
    1836:	43 94       	inc	r4
    1838:	51 2c       	mov	r5, r1
    183a:	54 01       	movw	r10, r8
    183c:	15 c0       	rjmp	.+42     	; 0x1868 <vfprintf+0x13c>
    183e:	38 01       	movw	r6, r16
    1840:	f2 e0       	ldi	r31, 0x02	; 2
    1842:	6f 0e       	add	r6, r31
    1844:	71 1c       	adc	r7, r1
    1846:	f8 01       	movw	r30, r16
    1848:	a0 80       	ld	r10, Z
    184a:	b1 80       	ldd	r11, Z+1	; 0x01
    184c:	26 ff       	sbrs	r18, 6
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <vfprintf+0x12a>
    1850:	65 2d       	mov	r22, r5
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x12e>
    1856:	6f ef       	ldi	r22, 0xFF	; 255
    1858:	7f ef       	ldi	r23, 0xFF	; 255
    185a:	c5 01       	movw	r24, r10
    185c:	2c 87       	std	Y+12, r18	; 0x0c
    185e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <strnlen>
    1862:	2c 01       	movw	r4, r24
    1864:	83 01       	movw	r16, r6
    1866:	2c 85       	ldd	r18, Y+12	; 0x0c
    1868:	2f 77       	andi	r18, 0x7F	; 127
    186a:	22 2e       	mov	r2, r18
    186c:	17 c0       	rjmp	.+46     	; 0x189c <vfprintf+0x170>
    186e:	38 01       	movw	r6, r16
    1870:	f2 e0       	ldi	r31, 0x02	; 2
    1872:	6f 0e       	add	r6, r31
    1874:	71 1c       	adc	r7, r1
    1876:	f8 01       	movw	r30, r16
    1878:	a0 80       	ld	r10, Z
    187a:	b1 80       	ldd	r11, Z+1	; 0x01
    187c:	26 ff       	sbrs	r18, 6
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <vfprintf+0x15a>
    1880:	65 2d       	mov	r22, r5
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x15e>
    1886:	6f ef       	ldi	r22, 0xFF	; 255
    1888:	7f ef       	ldi	r23, 0xFF	; 255
    188a:	c5 01       	movw	r24, r10
    188c:	2c 87       	std	Y+12, r18	; 0x0c
    188e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <strnlen_P>
    1892:	2c 01       	movw	r4, r24
    1894:	2c 85       	ldd	r18, Y+12	; 0x0c
    1896:	20 68       	ori	r18, 0x80	; 128
    1898:	22 2e       	mov	r2, r18
    189a:	83 01       	movw	r16, r6
    189c:	23 fc       	sbrc	r2, 3
    189e:	1b c0       	rjmp	.+54     	; 0x18d6 <vfprintf+0x1aa>
    18a0:	83 2d       	mov	r24, r3
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	48 16       	cp	r4, r24
    18a6:	59 06       	cpc	r5, r25
    18a8:	b0 f4       	brcc	.+44     	; 0x18d6 <vfprintf+0x1aa>
    18aa:	b7 01       	movw	r22, r14
    18ac:	80 e2       	ldi	r24, 0x20	; 32
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    18b4:	3a 94       	dec	r3
    18b6:	f4 cf       	rjmp	.-24     	; 0x18a0 <vfprintf+0x174>
    18b8:	f5 01       	movw	r30, r10
    18ba:	27 fc       	sbrc	r2, 7
    18bc:	85 91       	lpm	r24, Z+
    18be:	27 fe       	sbrs	r2, 7
    18c0:	81 91       	ld	r24, Z+
    18c2:	5f 01       	movw	r10, r30
    18c4:	b7 01       	movw	r22, r14
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    18cc:	31 10       	cpse	r3, r1
    18ce:	3a 94       	dec	r3
    18d0:	f1 e0       	ldi	r31, 0x01	; 1
    18d2:	4f 1a       	sub	r4, r31
    18d4:	51 08       	sbc	r5, r1
    18d6:	41 14       	cp	r4, r1
    18d8:	51 04       	cpc	r5, r1
    18da:	71 f7       	brne	.-36     	; 0x18b8 <vfprintf+0x18c>
    18dc:	e5 c0       	rjmp	.+458    	; 0x1aa8 <vfprintf+0x37c>
    18de:	84 36       	cpi	r24, 0x64	; 100
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <vfprintf+0x1ba>
    18e2:	89 36       	cpi	r24, 0x69	; 105
    18e4:	39 f5       	brne	.+78     	; 0x1934 <vfprintf+0x208>
    18e6:	f8 01       	movw	r30, r16
    18e8:	27 ff       	sbrs	r18, 7
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <vfprintf+0x1ce>
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	0c 5f       	subi	r16, 0xFC	; 252
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	08 c0       	rjmp	.+16     	; 0x190a <vfprintf+0x1de>
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	88 27       	eor	r24, r24
    1900:	77 fd       	sbrc	r23, 7
    1902:	80 95       	com	r24
    1904:	98 2f       	mov	r25, r24
    1906:	0e 5f       	subi	r16, 0xFE	; 254
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	2f 76       	andi	r18, 0x6F	; 111
    190c:	b2 2e       	mov	r11, r18
    190e:	97 ff       	sbrs	r25, 7
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <vfprintf+0x1f8>
    1912:	90 95       	com	r25
    1914:	80 95       	com	r24
    1916:	70 95       	com	r23
    1918:	61 95       	neg	r22
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	20 68       	ori	r18, 0x80	; 128
    1922:	b2 2e       	mov	r11, r18
    1924:	2a e0       	ldi	r18, 0x0A	; 10
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	a4 01       	movw	r20, r8
    192a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__ultoa_invert>
    192e:	a8 2e       	mov	r10, r24
    1930:	a8 18       	sub	r10, r8
    1932:	44 c0       	rjmp	.+136    	; 0x19bc <vfprintf+0x290>
    1934:	85 37       	cpi	r24, 0x75	; 117
    1936:	29 f4       	brne	.+10     	; 0x1942 <vfprintf+0x216>
    1938:	2f 7e       	andi	r18, 0xEF	; 239
    193a:	b2 2e       	mov	r11, r18
    193c:	2a e0       	ldi	r18, 0x0A	; 10
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	25 c0       	rjmp	.+74     	; 0x198c <vfprintf+0x260>
    1942:	f2 2f       	mov	r31, r18
    1944:	f9 7f       	andi	r31, 0xF9	; 249
    1946:	bf 2e       	mov	r11, r31
    1948:	8f 36       	cpi	r24, 0x6F	; 111
    194a:	c1 f0       	breq	.+48     	; 0x197c <vfprintf+0x250>
    194c:	18 f4       	brcc	.+6      	; 0x1954 <vfprintf+0x228>
    194e:	88 35       	cpi	r24, 0x58	; 88
    1950:	79 f0       	breq	.+30     	; 0x1970 <vfprintf+0x244>
    1952:	b4 c0       	rjmp	.+360    	; 0x1abc <vfprintf+0x390>
    1954:	80 37       	cpi	r24, 0x70	; 112
    1956:	19 f0       	breq	.+6      	; 0x195e <vfprintf+0x232>
    1958:	88 37       	cpi	r24, 0x78	; 120
    195a:	21 f0       	breq	.+8      	; 0x1964 <vfprintf+0x238>
    195c:	af c0       	rjmp	.+350    	; 0x1abc <vfprintf+0x390>
    195e:	2f 2f       	mov	r18, r31
    1960:	20 61       	ori	r18, 0x10	; 16
    1962:	b2 2e       	mov	r11, r18
    1964:	b4 fe       	sbrs	r11, 4
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <vfprintf+0x256>
    1968:	8b 2d       	mov	r24, r11
    196a:	84 60       	ori	r24, 0x04	; 4
    196c:	b8 2e       	mov	r11, r24
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <vfprintf+0x256>
    1970:	24 ff       	sbrs	r18, 4
    1972:	0a c0       	rjmp	.+20     	; 0x1988 <vfprintf+0x25c>
    1974:	9f 2f       	mov	r25, r31
    1976:	96 60       	ori	r25, 0x06	; 6
    1978:	b9 2e       	mov	r11, r25
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0x25c>
    197c:	28 e0       	ldi	r18, 0x08	; 8
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	05 c0       	rjmp	.+10     	; 0x198c <vfprintf+0x260>
    1982:	20 e1       	ldi	r18, 0x10	; 16
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	02 c0       	rjmp	.+4      	; 0x198c <vfprintf+0x260>
    1988:	20 e1       	ldi	r18, 0x10	; 16
    198a:	32 e0       	ldi	r19, 0x02	; 2
    198c:	f8 01       	movw	r30, r16
    198e:	b7 fe       	sbrs	r11, 7
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <vfprintf+0x274>
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	0c 5f       	subi	r16, 0xFC	; 252
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <vfprintf+0x280>
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 5f       	subi	r16, 0xFE	; 254
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	a4 01       	movw	r20, r8
    19ae:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__ultoa_invert>
    19b2:	a8 2e       	mov	r10, r24
    19b4:	a8 18       	sub	r10, r8
    19b6:	fb 2d       	mov	r31, r11
    19b8:	ff 77       	andi	r31, 0x7F	; 127
    19ba:	bf 2e       	mov	r11, r31
    19bc:	b6 fe       	sbrs	r11, 6
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <vfprintf+0x2aa>
    19c0:	2b 2d       	mov	r18, r11
    19c2:	2e 7f       	andi	r18, 0xFE	; 254
    19c4:	a5 14       	cp	r10, r5
    19c6:	50 f4       	brcc	.+20     	; 0x19dc <vfprintf+0x2b0>
    19c8:	b4 fe       	sbrs	r11, 4
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <vfprintf+0x2b4>
    19cc:	b2 fc       	sbrc	r11, 2
    19ce:	08 c0       	rjmp	.+16     	; 0x19e0 <vfprintf+0x2b4>
    19d0:	2b 2d       	mov	r18, r11
    19d2:	2e 7e       	andi	r18, 0xEE	; 238
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <vfprintf+0x2b4>
    19d6:	7a 2c       	mov	r7, r10
    19d8:	2b 2d       	mov	r18, r11
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <vfprintf+0x2b6>
    19dc:	7a 2c       	mov	r7, r10
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <vfprintf+0x2b6>
    19e0:	75 2c       	mov	r7, r5
    19e2:	24 ff       	sbrs	r18, 4
    19e4:	0d c0       	rjmp	.+26     	; 0x1a00 <vfprintf+0x2d4>
    19e6:	fe 01       	movw	r30, r28
    19e8:	ea 0d       	add	r30, r10
    19ea:	f1 1d       	adc	r31, r1
    19ec:	80 81       	ld	r24, Z
    19ee:	80 33       	cpi	r24, 0x30	; 48
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <vfprintf+0x2ca>
    19f2:	29 7e       	andi	r18, 0xE9	; 233
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <vfprintf+0x2dc>
    19f6:	22 ff       	sbrs	r18, 2
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <vfprintf+0x2da>
    19fa:	73 94       	inc	r7
    19fc:	73 94       	inc	r7
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <vfprintf+0x2dc>
    1a00:	82 2f       	mov	r24, r18
    1a02:	86 78       	andi	r24, 0x86	; 134
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <vfprintf+0x2dc>
    1a06:	73 94       	inc	r7
    1a08:	23 fd       	sbrc	r18, 3
    1a0a:	13 c0       	rjmp	.+38     	; 0x1a32 <vfprintf+0x306>
    1a0c:	20 ff       	sbrs	r18, 0
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <vfprintf+0x2f0>
    1a10:	5a 2c       	mov	r5, r10
    1a12:	73 14       	cp	r7, r3
    1a14:	18 f4       	brcc	.+6      	; 0x1a1c <vfprintf+0x2f0>
    1a16:	53 0c       	add	r5, r3
    1a18:	57 18       	sub	r5, r7
    1a1a:	73 2c       	mov	r7, r3
    1a1c:	73 14       	cp	r7, r3
    1a1e:	68 f4       	brcc	.+26     	; 0x1a3a <vfprintf+0x30e>
    1a20:	b7 01       	movw	r22, r14
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	2c 87       	std	Y+12, r18	; 0x0c
    1a28:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    1a2c:	73 94       	inc	r7
    1a2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a30:	f5 cf       	rjmp	.-22     	; 0x1a1c <vfprintf+0x2f0>
    1a32:	73 14       	cp	r7, r3
    1a34:	10 f4       	brcc	.+4      	; 0x1a3a <vfprintf+0x30e>
    1a36:	37 18       	sub	r3, r7
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <vfprintf+0x310>
    1a3a:	31 2c       	mov	r3, r1
    1a3c:	24 ff       	sbrs	r18, 4
    1a3e:	12 c0       	rjmp	.+36     	; 0x1a64 <vfprintf+0x338>
    1a40:	b7 01       	movw	r22, r14
    1a42:	80 e3       	ldi	r24, 0x30	; 48
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	2c 87       	std	Y+12, r18	; 0x0c
    1a48:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    1a4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a4e:	22 ff       	sbrs	r18, 2
    1a50:	17 c0       	rjmp	.+46     	; 0x1a80 <vfprintf+0x354>
    1a52:	21 ff       	sbrs	r18, 1
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <vfprintf+0x330>
    1a56:	88 e5       	ldi	r24, 0x58	; 88
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <vfprintf+0x334>
    1a5c:	88 e7       	ldi	r24, 0x78	; 120
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	b7 01       	movw	r22, r14
    1a62:	0c c0       	rjmp	.+24     	; 0x1a7c <vfprintf+0x350>
    1a64:	82 2f       	mov	r24, r18
    1a66:	86 78       	andi	r24, 0x86	; 134
    1a68:	59 f0       	breq	.+22     	; 0x1a80 <vfprintf+0x354>
    1a6a:	21 fd       	sbrc	r18, 1
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <vfprintf+0x346>
    1a6e:	80 e2       	ldi	r24, 0x20	; 32
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <vfprintf+0x348>
    1a72:	8b e2       	ldi	r24, 0x2B	; 43
    1a74:	27 fd       	sbrc	r18, 7
    1a76:	8d e2       	ldi	r24, 0x2D	; 45
    1a78:	b7 01       	movw	r22, r14
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    1a80:	a5 14       	cp	r10, r5
    1a82:	38 f4       	brcc	.+14     	; 0x1a92 <vfprintf+0x366>
    1a84:	b7 01       	movw	r22, r14
    1a86:	80 e3       	ldi	r24, 0x30	; 48
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    1a8e:	5a 94       	dec	r5
    1a90:	f7 cf       	rjmp	.-18     	; 0x1a80 <vfprintf+0x354>
    1a92:	aa 94       	dec	r10
    1a94:	f4 01       	movw	r30, r8
    1a96:	ea 0d       	add	r30, r10
    1a98:	f1 1d       	adc	r31, r1
    1a9a:	80 81       	ld	r24, Z
    1a9c:	b7 01       	movw	r22, r14
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    1aa4:	a1 10       	cpse	r10, r1
    1aa6:	f5 cf       	rjmp	.-22     	; 0x1a92 <vfprintf+0x366>
    1aa8:	33 20       	and	r3, r3
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <vfprintf+0x382>
    1aac:	51 ce       	rjmp	.-862    	; 0x1750 <vfprintf+0x24>
    1aae:	b7 01       	movw	r22, r14
    1ab0:	80 e2       	ldi	r24, 0x20	; 32
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fputc>
    1ab8:	3a 94       	dec	r3
    1aba:	f6 cf       	rjmp	.-20     	; 0x1aa8 <vfprintf+0x37c>
    1abc:	f7 01       	movw	r30, r14
    1abe:	86 81       	ldd	r24, Z+6	; 0x06
    1ac0:	97 81       	ldd	r25, Z+7	; 0x07
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <vfprintf+0x39c>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	2c 96       	adiw	r28, 0x0c	; 12
    1aca:	e2 e1       	ldi	r30, 0x12	; 18
    1acc:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__epilogue_restores__>

00001ad0 <calloc>:
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	86 9f       	mul	r24, r22
    1ada:	80 01       	movw	r16, r0
    1adc:	87 9f       	mul	r24, r23
    1ade:	10 0d       	add	r17, r0
    1ae0:	96 9f       	mul	r25, r22
    1ae2:	10 0d       	add	r17, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <malloc>
    1aec:	ec 01       	movw	r28, r24
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	29 f0       	breq	.+10     	; 0x1afc <calloc+0x2c>
    1af2:	a8 01       	movw	r20, r16
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <memset>
    1afc:	ce 01       	movw	r24, r28
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	08 95       	ret

00001b08 <malloc>:
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	91 05       	cpc	r25, r1
    1b10:	10 f4       	brcc	.+4      	; 0x1b16 <malloc+0xe>
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	e0 91 98 04 	lds	r30, 0x0498
    1b1a:	f0 91 99 04 	lds	r31, 0x0499
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	a0 e0       	ldi	r26, 0x00	; 0
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	39 f1       	breq	.+78     	; 0x1b78 <malloc+0x70>
    1b2a:	40 81       	ld	r20, Z
    1b2c:	51 81       	ldd	r21, Z+1	; 0x01
    1b2e:	48 17       	cp	r20, r24
    1b30:	59 07       	cpc	r21, r25
    1b32:	b8 f0       	brcs	.+46     	; 0x1b62 <malloc+0x5a>
    1b34:	48 17       	cp	r20, r24
    1b36:	59 07       	cpc	r21, r25
    1b38:	71 f4       	brne	.+28     	; 0x1b56 <malloc+0x4e>
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	10 97       	sbiw	r26, 0x00	; 0
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <malloc+0x44>
    1b42:	13 96       	adiw	r26, 0x03	; 3
    1b44:	9c 93       	st	X, r25
    1b46:	8e 93       	st	-X, r24
    1b48:	12 97       	sbiw	r26, 0x02	; 2
    1b4a:	2c c0       	rjmp	.+88     	; 0x1ba4 <malloc+0x9c>
    1b4c:	90 93 99 04 	sts	0x0499, r25
    1b50:	80 93 98 04 	sts	0x0498, r24
    1b54:	27 c0       	rjmp	.+78     	; 0x1ba4 <malloc+0x9c>
    1b56:	21 15       	cp	r18, r1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <malloc+0x60>
    1b5c:	42 17       	cp	r20, r18
    1b5e:	53 07       	cpc	r21, r19
    1b60:	18 f0       	brcs	.+6      	; 0x1b68 <malloc+0x60>
    1b62:	a9 01       	movw	r20, r18
    1b64:	db 01       	movw	r26, r22
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <malloc+0x62>
    1b68:	ef 01       	movw	r28, r30
    1b6a:	9a 01       	movw	r18, r20
    1b6c:	bd 01       	movw	r22, r26
    1b6e:	df 01       	movw	r26, r30
    1b70:	02 80       	ldd	r0, Z+2	; 0x02
    1b72:	f3 81       	ldd	r31, Z+3	; 0x03
    1b74:	e0 2d       	mov	r30, r0
    1b76:	d7 cf       	rjmp	.-82     	; 0x1b26 <malloc+0x1e>
    1b78:	21 15       	cp	r18, r1
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	f9 f0       	breq	.+62     	; 0x1bbc <malloc+0xb4>
    1b7e:	28 1b       	sub	r18, r24
    1b80:	39 0b       	sbc	r19, r25
    1b82:	24 30       	cpi	r18, 0x04	; 4
    1b84:	31 05       	cpc	r19, r1
    1b86:	80 f4       	brcc	.+32     	; 0x1ba8 <malloc+0xa0>
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	61 15       	cp	r22, r1
    1b8e:	71 05       	cpc	r23, r1
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <malloc+0x92>
    1b92:	fb 01       	movw	r30, r22
    1b94:	93 83       	std	Z+3, r25	; 0x03
    1b96:	82 83       	std	Z+2, r24	; 0x02
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <malloc+0x9a>
    1b9a:	90 93 99 04 	sts	0x0499, r25
    1b9e:	80 93 98 04 	sts	0x0498, r24
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	32 96       	adiw	r30, 0x02	; 2
    1ba6:	44 c0       	rjmp	.+136    	; 0x1c30 <malloc+0x128>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e2 0f       	add	r30, r18
    1bac:	f3 1f       	adc	r31, r19
    1bae:	81 93       	st	Z+, r24
    1bb0:	91 93       	st	Z+, r25
    1bb2:	22 50       	subi	r18, 0x02	; 2
    1bb4:	31 09       	sbc	r19, r1
    1bb6:	39 83       	std	Y+1, r19	; 0x01
    1bb8:	28 83       	st	Y, r18
    1bba:	3a c0       	rjmp	.+116    	; 0x1c30 <malloc+0x128>
    1bbc:	20 91 96 04 	lds	r18, 0x0496
    1bc0:	30 91 97 04 	lds	r19, 0x0497
    1bc4:	23 2b       	or	r18, r19
    1bc6:	41 f4       	brne	.+16     	; 0x1bd8 <malloc+0xd0>
    1bc8:	20 91 06 01 	lds	r18, 0x0106
    1bcc:	30 91 07 01 	lds	r19, 0x0107
    1bd0:	30 93 97 04 	sts	0x0497, r19
    1bd4:	20 93 96 04 	sts	0x0496, r18
    1bd8:	20 91 04 01 	lds	r18, 0x0104
    1bdc:	30 91 05 01 	lds	r19, 0x0105
    1be0:	21 15       	cp	r18, r1
    1be2:	31 05       	cpc	r19, r1
    1be4:	41 f4       	brne	.+16     	; 0x1bf6 <malloc+0xee>
    1be6:	2d b7       	in	r18, 0x3d	; 61
    1be8:	3e b7       	in	r19, 0x3e	; 62
    1bea:	40 91 08 01 	lds	r20, 0x0108
    1bee:	50 91 09 01 	lds	r21, 0x0109
    1bf2:	24 1b       	sub	r18, r20
    1bf4:	35 0b       	sbc	r19, r21
    1bf6:	e0 91 96 04 	lds	r30, 0x0496
    1bfa:	f0 91 97 04 	lds	r31, 0x0497
    1bfe:	e2 17       	cp	r30, r18
    1c00:	f3 07       	cpc	r31, r19
    1c02:	a0 f4       	brcc	.+40     	; 0x1c2c <malloc+0x124>
    1c04:	2e 1b       	sub	r18, r30
    1c06:	3f 0b       	sbc	r19, r31
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	78 f0       	brcs	.+30     	; 0x1c2c <malloc+0x124>
    1c0e:	ac 01       	movw	r20, r24
    1c10:	4e 5f       	subi	r20, 0xFE	; 254
    1c12:	5f 4f       	sbci	r21, 0xFF	; 255
    1c14:	24 17       	cp	r18, r20
    1c16:	35 07       	cpc	r19, r21
    1c18:	48 f0       	brcs	.+18     	; 0x1c2c <malloc+0x124>
    1c1a:	4e 0f       	add	r20, r30
    1c1c:	5f 1f       	adc	r21, r31
    1c1e:	50 93 97 04 	sts	0x0497, r21
    1c22:	40 93 96 04 	sts	0x0496, r20
    1c26:	81 93       	st	Z+, r24
    1c28:	91 93       	st	Z+, r25
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <malloc+0x128>
    1c2c:	e0 e0       	ldi	r30, 0x00	; 0
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	cf 01       	movw	r24, r30
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <free>:
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <free+0xa>
    1c40:	87 c0       	rjmp	.+270    	; 0x1d50 <free+0x118>
    1c42:	fc 01       	movw	r30, r24
    1c44:	32 97       	sbiw	r30, 0x02	; 2
    1c46:	13 82       	std	Z+3, r1	; 0x03
    1c48:	12 82       	std	Z+2, r1	; 0x02
    1c4a:	c0 91 98 04 	lds	r28, 0x0498
    1c4e:	d0 91 99 04 	lds	r29, 0x0499
    1c52:	20 97       	sbiw	r28, 0x00	; 0
    1c54:	81 f4       	brne	.+32     	; 0x1c76 <free+0x3e>
    1c56:	20 81       	ld	r18, Z
    1c58:	31 81       	ldd	r19, Z+1	; 0x01
    1c5a:	28 0f       	add	r18, r24
    1c5c:	39 1f       	adc	r19, r25
    1c5e:	80 91 96 04 	lds	r24, 0x0496
    1c62:	90 91 97 04 	lds	r25, 0x0497
    1c66:	82 17       	cp	r24, r18
    1c68:	93 07       	cpc	r25, r19
    1c6a:	79 f5       	brne	.+94     	; 0x1cca <free+0x92>
    1c6c:	f0 93 97 04 	sts	0x0497, r31
    1c70:	e0 93 96 04 	sts	0x0496, r30
    1c74:	6d c0       	rjmp	.+218    	; 0x1d50 <free+0x118>
    1c76:	de 01       	movw	r26, r28
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	ae 17       	cp	r26, r30
    1c7e:	bf 07       	cpc	r27, r31
    1c80:	50 f4       	brcc	.+20     	; 0x1c96 <free+0x5e>
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	4d 91       	ld	r20, X+
    1c86:	5c 91       	ld	r21, X
    1c88:	13 97       	sbiw	r26, 0x03	; 3
    1c8a:	9d 01       	movw	r18, r26
    1c8c:	41 15       	cp	r20, r1
    1c8e:	51 05       	cpc	r21, r1
    1c90:	09 f1       	breq	.+66     	; 0x1cd4 <free+0x9c>
    1c92:	da 01       	movw	r26, r20
    1c94:	f3 cf       	rjmp	.-26     	; 0x1c7c <free+0x44>
    1c96:	b3 83       	std	Z+3, r27	; 0x03
    1c98:	a2 83       	std	Z+2, r26	; 0x02
    1c9a:	40 81       	ld	r20, Z
    1c9c:	51 81       	ldd	r21, Z+1	; 0x01
    1c9e:	84 0f       	add	r24, r20
    1ca0:	95 1f       	adc	r25, r21
    1ca2:	8a 17       	cp	r24, r26
    1ca4:	9b 07       	cpc	r25, r27
    1ca6:	71 f4       	brne	.+28     	; 0x1cc4 <free+0x8c>
    1ca8:	8d 91       	ld	r24, X+
    1caa:	9c 91       	ld	r25, X
    1cac:	11 97       	sbiw	r26, 0x01	; 1
    1cae:	84 0f       	add	r24, r20
    1cb0:	95 1f       	adc	r25, r21
    1cb2:	02 96       	adiw	r24, 0x02	; 2
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    1cb8:	12 96       	adiw	r26, 0x02	; 2
    1cba:	8d 91       	ld	r24, X+
    1cbc:	9c 91       	ld	r25, X
    1cbe:	13 97       	sbiw	r26, 0x03	; 3
    1cc0:	93 83       	std	Z+3, r25	; 0x03
    1cc2:	82 83       	std	Z+2, r24	; 0x02
    1cc4:	21 15       	cp	r18, r1
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	29 f4       	brne	.+10     	; 0x1cd4 <free+0x9c>
    1cca:	f0 93 99 04 	sts	0x0499, r31
    1cce:	e0 93 98 04 	sts	0x0498, r30
    1cd2:	3e c0       	rjmp	.+124    	; 0x1d50 <free+0x118>
    1cd4:	d9 01       	movw	r26, r18
    1cd6:	13 96       	adiw	r26, 0x03	; 3
    1cd8:	fc 93       	st	X, r31
    1cda:	ee 93       	st	-X, r30
    1cdc:	12 97       	sbiw	r26, 0x02	; 2
    1cde:	4d 91       	ld	r20, X+
    1ce0:	5d 91       	ld	r21, X+
    1ce2:	a4 0f       	add	r26, r20
    1ce4:	b5 1f       	adc	r27, r21
    1ce6:	ea 17       	cp	r30, r26
    1ce8:	fb 07       	cpc	r31, r27
    1cea:	79 f4       	brne	.+30     	; 0x1d0a <free+0xd2>
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	84 0f       	add	r24, r20
    1cf2:	95 1f       	adc	r25, r21
    1cf4:	02 96       	adiw	r24, 0x02	; 2
    1cf6:	d9 01       	movw	r26, r18
    1cf8:	11 96       	adiw	r26, 0x01	; 1
    1cfa:	9c 93       	st	X, r25
    1cfc:	8e 93       	st	-X, r24
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	13 96       	adiw	r26, 0x03	; 3
    1d04:	9c 93       	st	X, r25
    1d06:	8e 93       	st	-X, r24
    1d08:	12 97       	sbiw	r26, 0x02	; 2
    1d0a:	e0 e0       	ldi	r30, 0x00	; 0
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	19 f0       	breq	.+6      	; 0x1d1c <free+0xe4>
    1d16:	fe 01       	movw	r30, r28
    1d18:	ec 01       	movw	r28, r24
    1d1a:	f9 cf       	rjmp	.-14     	; 0x1d0e <free+0xd6>
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	02 96       	adiw	r24, 0x02	; 2
    1d20:	28 81       	ld	r18, Y
    1d22:	39 81       	ldd	r19, Y+1	; 0x01
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	20 91 96 04 	lds	r18, 0x0496
    1d2c:	30 91 97 04 	lds	r19, 0x0497
    1d30:	28 17       	cp	r18, r24
    1d32:	39 07       	cpc	r19, r25
    1d34:	69 f4       	brne	.+26     	; 0x1d50 <free+0x118>
    1d36:	30 97       	sbiw	r30, 0x00	; 0
    1d38:	29 f4       	brne	.+10     	; 0x1d44 <free+0x10c>
    1d3a:	10 92 99 04 	sts	0x0499, r1
    1d3e:	10 92 98 04 	sts	0x0498, r1
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <free+0x110>
    1d44:	13 82       	std	Z+3, r1	; 0x03
    1d46:	12 82       	std	Z+2, r1	; 0x02
    1d48:	d0 93 97 04 	sts	0x0497, r29
    1d4c:	c0 93 96 04 	sts	0x0496, r28
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <strnlen_P>:
    1d56:	fc 01       	movw	r30, r24
    1d58:	05 90       	lpm	r0, Z+
    1d5a:	61 50       	subi	r22, 0x01	; 1
    1d5c:	70 40       	sbci	r23, 0x00	; 0
    1d5e:	01 10       	cpse	r0, r1
    1d60:	d8 f7       	brcc	.-10     	; 0x1d58 <strnlen_P+0x2>
    1d62:	80 95       	com	r24
    1d64:	90 95       	com	r25
    1d66:	8e 0f       	add	r24, r30
    1d68:	9f 1f       	adc	r25, r31
    1d6a:	08 95       	ret

00001d6c <memset>:
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <memset+0x6>
    1d70:	6d 93       	st	X+, r22
    1d72:	41 50       	subi	r20, 0x01	; 1
    1d74:	50 40       	sbci	r21, 0x00	; 0
    1d76:	e0 f7       	brcc	.-8      	; 0x1d70 <memset+0x4>
    1d78:	08 95       	ret

00001d7a <strnlen>:
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	61 50       	subi	r22, 0x01	; 1
    1d7e:	70 40       	sbci	r23, 0x00	; 0
    1d80:	01 90       	ld	r0, Z+
    1d82:	01 10       	cpse	r0, r1
    1d84:	d8 f7       	brcc	.-10     	; 0x1d7c <strnlen+0x2>
    1d86:	80 95       	com	r24
    1d88:	90 95       	com	r25
    1d8a:	8e 0f       	add	r24, r30
    1d8c:	9f 1f       	adc	r25, r31
    1d8e:	08 95       	ret

00001d90 <fputc>:
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	18 2f       	mov	r17, r24
    1d9a:	09 2f       	mov	r16, r25
    1d9c:	eb 01       	movw	r28, r22
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	81 fd       	sbrc	r24, 1
    1da2:	03 c0       	rjmp	.+6      	; 0x1daa <fputc+0x1a>
    1da4:	8f ef       	ldi	r24, 0xFF	; 255
    1da6:	9f ef       	ldi	r25, 0xFF	; 255
    1da8:	20 c0       	rjmp	.+64     	; 0x1dea <fputc+0x5a>
    1daa:	82 ff       	sbrs	r24, 2
    1dac:	10 c0       	rjmp	.+32     	; 0x1dce <fputc+0x3e>
    1dae:	4e 81       	ldd	r20, Y+6	; 0x06
    1db0:	5f 81       	ldd	r21, Y+7	; 0x07
    1db2:	2c 81       	ldd	r18, Y+4	; 0x04
    1db4:	3d 81       	ldd	r19, Y+5	; 0x05
    1db6:	42 17       	cp	r20, r18
    1db8:	53 07       	cpc	r21, r19
    1dba:	7c f4       	brge	.+30     	; 0x1dda <fputc+0x4a>
    1dbc:	e8 81       	ld	r30, Y
    1dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc0:	9f 01       	movw	r18, r30
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	39 83       	std	Y+1, r19	; 0x01
    1dc8:	28 83       	st	Y, r18
    1dca:	10 83       	st	Z, r17
    1dcc:	06 c0       	rjmp	.+12     	; 0x1dda <fputc+0x4a>
    1dce:	e8 85       	ldd	r30, Y+8	; 0x08
    1dd0:	f9 85       	ldd	r31, Y+9	; 0x09
    1dd2:	81 2f       	mov	r24, r17
    1dd4:	09 95       	icall
    1dd6:	89 2b       	or	r24, r25
    1dd8:	29 f7       	brne	.-54     	; 0x1da4 <fputc+0x14>
    1dda:	2e 81       	ldd	r18, Y+6	; 0x06
    1ddc:	3f 81       	ldd	r19, Y+7	; 0x07
    1dde:	2f 5f       	subi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	3f 83       	std	Y+7, r19	; 0x07
    1de4:	2e 83       	std	Y+6, r18	; 0x06
    1de6:	81 2f       	mov	r24, r17
    1de8:	90 2f       	mov	r25, r16
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	08 95       	ret

00001df4 <__ultoa_invert>:
    1df4:	fa 01       	movw	r30, r20
    1df6:	aa 27       	eor	r26, r26
    1df8:	28 30       	cpi	r18, 0x08	; 8
    1dfa:	51 f1       	breq	.+84     	; 0x1e50 <__ultoa_invert+0x5c>
    1dfc:	20 31       	cpi	r18, 0x10	; 16
    1dfe:	81 f1       	breq	.+96     	; 0x1e60 <__ultoa_invert+0x6c>
    1e00:	e8 94       	clt
    1e02:	6f 93       	push	r22
    1e04:	6e 7f       	andi	r22, 0xFE	; 254
    1e06:	6e 5f       	subi	r22, 0xFE	; 254
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	af 4f       	sbci	r26, 0xFF	; 255
    1e10:	b1 e0       	ldi	r27, 0x01	; 1
    1e12:	3e d0       	rcall	.+124    	; 0x1e90 <__ultoa_invert+0x9c>
    1e14:	b4 e0       	ldi	r27, 0x04	; 4
    1e16:	3c d0       	rcall	.+120    	; 0x1e90 <__ultoa_invert+0x9c>
    1e18:	67 0f       	add	r22, r23
    1e1a:	78 1f       	adc	r23, r24
    1e1c:	89 1f       	adc	r24, r25
    1e1e:	9a 1f       	adc	r25, r26
    1e20:	a1 1d       	adc	r26, r1
    1e22:	68 0f       	add	r22, r24
    1e24:	79 1f       	adc	r23, r25
    1e26:	8a 1f       	adc	r24, r26
    1e28:	91 1d       	adc	r25, r1
    1e2a:	a1 1d       	adc	r26, r1
    1e2c:	6a 0f       	add	r22, r26
    1e2e:	71 1d       	adc	r23, r1
    1e30:	81 1d       	adc	r24, r1
    1e32:	91 1d       	adc	r25, r1
    1e34:	a1 1d       	adc	r26, r1
    1e36:	20 d0       	rcall	.+64     	; 0x1e78 <__ultoa_invert+0x84>
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <__ultoa_invert+0x48>
    1e3a:	68 94       	set
    1e3c:	3f 91       	pop	r19
    1e3e:	2a e0       	ldi	r18, 0x0A	; 10
    1e40:	26 9f       	mul	r18, r22
    1e42:	11 24       	eor	r1, r1
    1e44:	30 19       	sub	r19, r0
    1e46:	30 5d       	subi	r19, 0xD0	; 208
    1e48:	31 93       	st	Z+, r19
    1e4a:	de f6       	brtc	.-74     	; 0x1e02 <__ultoa_invert+0xe>
    1e4c:	cf 01       	movw	r24, r30
    1e4e:	08 95       	ret
    1e50:	46 2f       	mov	r20, r22
    1e52:	47 70       	andi	r20, 0x07	; 7
    1e54:	40 5d       	subi	r20, 0xD0	; 208
    1e56:	41 93       	st	Z+, r20
    1e58:	b3 e0       	ldi	r27, 0x03	; 3
    1e5a:	0f d0       	rcall	.+30     	; 0x1e7a <__ultoa_invert+0x86>
    1e5c:	c9 f7       	brne	.-14     	; 0x1e50 <__ultoa_invert+0x5c>
    1e5e:	f6 cf       	rjmp	.-20     	; 0x1e4c <__ultoa_invert+0x58>
    1e60:	46 2f       	mov	r20, r22
    1e62:	4f 70       	andi	r20, 0x0F	; 15
    1e64:	40 5d       	subi	r20, 0xD0	; 208
    1e66:	4a 33       	cpi	r20, 0x3A	; 58
    1e68:	18 f0       	brcs	.+6      	; 0x1e70 <__ultoa_invert+0x7c>
    1e6a:	49 5d       	subi	r20, 0xD9	; 217
    1e6c:	31 fd       	sbrc	r19, 1
    1e6e:	40 52       	subi	r20, 0x20	; 32
    1e70:	41 93       	st	Z+, r20
    1e72:	02 d0       	rcall	.+4      	; 0x1e78 <__ultoa_invert+0x84>
    1e74:	a9 f7       	brne	.-22     	; 0x1e60 <__ultoa_invert+0x6c>
    1e76:	ea cf       	rjmp	.-44     	; 0x1e4c <__ultoa_invert+0x58>
    1e78:	b4 e0       	ldi	r27, 0x04	; 4
    1e7a:	a6 95       	lsr	r26
    1e7c:	97 95       	ror	r25
    1e7e:	87 95       	ror	r24
    1e80:	77 95       	ror	r23
    1e82:	67 95       	ror	r22
    1e84:	ba 95       	dec	r27
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__ultoa_invert+0x86>
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	61 05       	cpc	r22, r1
    1e8c:	71 05       	cpc	r23, r1
    1e8e:	08 95       	ret
    1e90:	9b 01       	movw	r18, r22
    1e92:	ac 01       	movw	r20, r24
    1e94:	0a 2e       	mov	r0, r26
    1e96:	06 94       	lsr	r0
    1e98:	57 95       	ror	r21
    1e9a:	47 95       	ror	r20
    1e9c:	37 95       	ror	r19
    1e9e:	27 95       	ror	r18
    1ea0:	ba 95       	dec	r27
    1ea2:	c9 f7       	brne	.-14     	; 0x1e96 <__ultoa_invert+0xa2>
    1ea4:	62 0f       	add	r22, r18
    1ea6:	73 1f       	adc	r23, r19
    1ea8:	84 1f       	adc	r24, r20
    1eaa:	95 1f       	adc	r25, r21
    1eac:	a0 1d       	adc	r26, r0
    1eae:	08 95       	ret

00001eb0 <__divmodsi4>:
    1eb0:	05 2e       	mov	r0, r21
    1eb2:	97 fb       	bst	r25, 7
    1eb4:	1e f4       	brtc	.+6      	; 0x1ebc <__divmodsi4+0xc>
    1eb6:	00 94       	com	r0
    1eb8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__negsi2>
    1ebc:	57 fd       	sbrc	r21, 7
    1ebe:	07 d0       	rcall	.+14     	; 0x1ece <__divmodsi4_neg2>
    1ec0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__udivmodsi4>
    1ec4:	07 fc       	sbrc	r0, 7
    1ec6:	03 d0       	rcall	.+6      	; 0x1ece <__divmodsi4_neg2>
    1ec8:	4e f4       	brtc	.+18     	; 0x1edc <__divmodsi4_exit>
    1eca:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__negsi2>

00001ece <__divmodsi4_neg2>:
    1ece:	50 95       	com	r21
    1ed0:	40 95       	com	r20
    1ed2:	30 95       	com	r19
    1ed4:	21 95       	neg	r18
    1ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eda:	5f 4f       	sbci	r21, 0xFF	; 255

00001edc <__divmodsi4_exit>:
    1edc:	08 95       	ret

00001ede <__negsi2>:
    1ede:	90 95       	com	r25
    1ee0:	80 95       	com	r24
    1ee2:	70 95       	com	r23
    1ee4:	61 95       	neg	r22
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	08 95       	ret

00001eee <__muluhisi3>:
    1eee:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__umulhisi3>
    1ef2:	a5 9f       	mul	r26, r21
    1ef4:	90 0d       	add	r25, r0
    1ef6:	b4 9f       	mul	r27, r20
    1ef8:	90 0d       	add	r25, r0
    1efa:	a4 9f       	mul	r26, r20
    1efc:	80 0d       	add	r24, r0
    1efe:	91 1d       	adc	r25, r1
    1f00:	11 24       	eor	r1, r1
    1f02:	08 95       	ret

00001f04 <__mulshisi3>:
    1f04:	b7 ff       	sbrs	r27, 7
    1f06:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__muluhisi3>

00001f0a <__mulohisi3>:
    1f0a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__muluhisi3>
    1f0e:	82 1b       	sub	r24, r18
    1f10:	93 0b       	sbc	r25, r19
    1f12:	08 95       	ret

00001f14 <__prologue_saves__>:
    1f14:	2f 92       	push	r2
    1f16:	3f 92       	push	r3
    1f18:	4f 92       	push	r4
    1f1a:	5f 92       	push	r5
    1f1c:	6f 92       	push	r6
    1f1e:	7f 92       	push	r7
    1f20:	8f 92       	push	r8
    1f22:	9f 92       	push	r9
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	ca 1b       	sub	r28, r26
    1f3e:	db 0b       	sbc	r29, r27
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	09 94       	ijmp

00001f4c <__epilogue_restores__>:
    1f4c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f4e:	39 88       	ldd	r3, Y+17	; 0x11
    1f50:	48 88       	ldd	r4, Y+16	; 0x10
    1f52:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f54:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f56:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f58:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f5e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f60:	c8 84       	ldd	r12, Y+8	; 0x08
    1f62:	df 80       	ldd	r13, Y+7	; 0x07
    1f64:	ee 80       	ldd	r14, Y+6	; 0x06
    1f66:	fd 80       	ldd	r15, Y+5	; 0x05
    1f68:	0c 81       	ldd	r16, Y+4	; 0x04
    1f6a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f6c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f70:	ce 0f       	add	r28, r30
    1f72:	d1 1d       	adc	r29, r1
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	ed 01       	movw	r28, r26
    1f80:	08 95       	ret

00001f82 <__udivmodsi4>:
    1f82:	a1 e2       	ldi	r26, 0x21	; 33
    1f84:	1a 2e       	mov	r1, r26
    1f86:	aa 1b       	sub	r26, r26
    1f88:	bb 1b       	sub	r27, r27
    1f8a:	fd 01       	movw	r30, r26
    1f8c:	0d c0       	rjmp	.+26     	; 0x1fa8 <__udivmodsi4_ep>

00001f8e <__udivmodsi4_loop>:
    1f8e:	aa 1f       	adc	r26, r26
    1f90:	bb 1f       	adc	r27, r27
    1f92:	ee 1f       	adc	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	a2 17       	cp	r26, r18
    1f98:	b3 07       	cpc	r27, r19
    1f9a:	e4 07       	cpc	r30, r20
    1f9c:	f5 07       	cpc	r31, r21
    1f9e:	20 f0       	brcs	.+8      	; 0x1fa8 <__udivmodsi4_ep>
    1fa0:	a2 1b       	sub	r26, r18
    1fa2:	b3 0b       	sbc	r27, r19
    1fa4:	e4 0b       	sbc	r30, r20
    1fa6:	f5 0b       	sbc	r31, r21

00001fa8 <__udivmodsi4_ep>:
    1fa8:	66 1f       	adc	r22, r22
    1faa:	77 1f       	adc	r23, r23
    1fac:	88 1f       	adc	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	1a 94       	dec	r1
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <__udivmodsi4_loop>
    1fb4:	60 95       	com	r22
    1fb6:	70 95       	com	r23
    1fb8:	80 95       	com	r24
    1fba:	90 95       	com	r25
    1fbc:	9b 01       	movw	r18, r22
    1fbe:	ac 01       	movw	r20, r24
    1fc0:	bd 01       	movw	r22, r26
    1fc2:	cf 01       	movw	r24, r30
    1fc4:	08 95       	ret

00001fc6 <__umulhisi3>:
    1fc6:	a2 9f       	mul	r26, r18
    1fc8:	b0 01       	movw	r22, r0
    1fca:	b3 9f       	mul	r27, r19
    1fcc:	c0 01       	movw	r24, r0
    1fce:	a3 9f       	mul	r26, r19
    1fd0:	70 0d       	add	r23, r0
    1fd2:	81 1d       	adc	r24, r1
    1fd4:	11 24       	eor	r1, r1
    1fd6:	91 1d       	adc	r25, r1
    1fd8:	b2 9f       	mul	r27, r18
    1fda:	70 0d       	add	r23, r0
    1fdc:	81 1d       	adc	r24, r1
    1fde:	11 24       	eor	r1, r1
    1fe0:	91 1d       	adc	r25, r1
    1fe2:	08 95       	ret

00001fe4 <_exit>:
    1fe4:	f8 94       	cli

00001fe6 <__stop_program>:
    1fe6:	ff cf       	rjmp	.-2      	; 0x1fe6 <__stop_program>
