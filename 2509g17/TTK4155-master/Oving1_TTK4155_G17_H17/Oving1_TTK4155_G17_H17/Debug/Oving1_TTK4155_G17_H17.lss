
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000320  00800100  00001d90  00001e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  00800420  00800420  00002144  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b0c  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000994  00000000  00000000  00003e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000866  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000518  00000000  00000000  00005048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007b1  00000000  00000000  00005560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000110a  00000000  00000000  00005d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00006e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__ctors_end>
       4:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_1>
       8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_2>
       c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      10:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      18:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      1c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      20:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      24:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      28:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      2c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      30:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      34:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      38:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      3c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      40:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      44:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      48:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      4c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      50:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      54:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      58:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      5c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      60:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      64:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      68:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      6c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	44 69       	ori	r20, 0x94	; 148
      72:	72 6b       	ori	r23, 0xB2	; 178
      74:	5f 74       	andi	r21, 0x4F	; 79
      76:	72 79       	andi	r23, 0x92	; 146
      78:	68 61       	ori	r22, 0x18	; 24
      7a:	72 64       	ori	r23, 0x42	; 66
      7c:	74 00       	.word	0x0074	; ????
	...

00000080 <highscore_entry_1>:
      80:	58 5f 78 4d 6c 47 50 72 30 5f 78 5f 59 00 00 00     X_xMlGPr0_x_Y...

00000090 <highscore_entry_0>:
      90:	50 75 7a 7a 79 7a 6c 61 79 65 72 36 39 00 00 00     Puzzyzlayer69...

000000a0 <font>:
	...
      a8:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      b8:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
      c8:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
      d8:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
      e8:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
      f8:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     108:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     118:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     128:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     138:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     148:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     158:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     168:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     178:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     188:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     198:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1a8:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1b8:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1c8:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     1d8:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     1e8:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     1f8:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     208:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     218:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     228:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     238:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     248:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     258:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     268:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     278:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     288:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     298:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2a8:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2b8:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2c8:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     2d8:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     2e8:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     2f8:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     308:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     318:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     328:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     338:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     348:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     358:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     368:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     378:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     388:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     398:	66 86 b0 70 70 b0 86 66 ff 81 81 81 81 81 81 ff     f..pp..f........
     3a8:	ff 81 91 a1 99 85 81 ff                             ........

000003b0 <__ctors_end>:
     3b0:	11 24       	eor	r1, r1
     3b2:	1f be       	out	0x3f, r1	; 63
     3b4:	cf ef       	ldi	r28, 0xFF	; 255
     3b6:	d4 e0       	ldi	r29, 0x04	; 4
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	cd bf       	out	0x3d, r28	; 61

000003bc <__do_copy_data>:
     3bc:	14 e0       	ldi	r17, 0x04	; 4
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	b1 e0       	ldi	r27, 0x01	; 1
     3c2:	e0 e9       	ldi	r30, 0x90	; 144
     3c4:	fd e1       	ldi	r31, 0x1D	; 29
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <__do_copy_data+0x10>
     3c8:	05 90       	lpm	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	a0 32       	cpi	r26, 0x20	; 32
     3ce:	b1 07       	cpc	r27, r17
     3d0:	d9 f7       	brne	.-10     	; 0x3c8 <__do_copy_data+0xc>

000003d2 <__do_clear_bss>:
     3d2:	24 e0       	ldi	r18, 0x04	; 4
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b4 e0       	ldi	r27, 0x04	; 4
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <.do_clear_bss_start>

000003da <.do_clear_bss_loop>:
     3da:	1d 92       	st	X+, r1

000003dc <.do_clear_bss_start>:
     3dc:	a8 3e       	cpi	r26, 0xE8	; 232
     3de:	b2 07       	cpc	r27, r18
     3e0:	e1 f7       	brne	.-8      	; 0x3da <.do_clear_bss_loop>
     3e2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <main>
     3e6:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <_exit>

000003ea <__bad_interrupt>:
     3ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ee <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	91 05       	cpc	r25, r1
     3f2:	71 f0       	breq	.+28     	; 0x410 <readADC+0x22>
     3f4:	1c f4       	brge	.+6      	; 0x3fc <readADC+0xe>
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	39 f0       	breq	.+14     	; 0x408 <readADC+0x1a>
     3fa:	1c c0       	rjmp	.+56     	; 0x434 <readADC+0x46>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	91 05       	cpc	r25, r1
     400:	59 f0       	breq	.+22     	; 0x418 <readADC+0x2a>
     402:	04 97       	sbiw	r24, 0x04	; 4
     404:	69 f0       	breq	.+26     	; 0x420 <readADC+0x32>
     406:	16 c0       	rjmp	.+44     	; 0x434 <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
     408:	84 e1       	ldi	r24, 0x14	; 20
     40a:	80 93 00 14 	sts	0x1400, r24
     40e:	0b c0       	rjmp	.+22     	; 0x426 <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
     410:	85 e1       	ldi	r24, 0x15	; 21
     412:	80 93 00 14 	sts	0x1400, r24
     416:	07 c0       	rjmp	.+14     	; 0x426 <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
     418:	86 e1       	ldi	r24, 0x16	; 22
     41a:	80 93 00 14 	sts	0x1400, r24
     41e:	03 c0       	rjmp	.+6      	; 0x426 <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
     420:	87 e1       	ldi	r24, 0x17	; 23
     422:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     426:	82 e5       	ldi	r24, 0x52	; 82
     428:	8a 95       	dec	r24
     42a:	f1 f7       	brne	.-4      	; 0x428 <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
     42c:	80 91 00 14 	lds	r24, 0x1400
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
     438:	08 95       	ret

0000043a <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     43a:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     43c:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     43e:	85 b7       	in	r24, 0x35	; 53
     440:	81 60       	ori	r24, 0x01	; 1
     442:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     444:	85 b7       	in	r24, 0x35	; 53
     446:	82 60       	ori	r24, 0x02	; 2
     448:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     44a:	85 b7       	in	r24, 0x35	; 53
     44c:	84 60       	ori	r24, 0x04	; 4
     44e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     450:	85 b7       	in	r24, 0x35	; 53
     452:	88 60       	ori	r24, 0x08	; 8
     454:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     456:	8b b7       	in	r24, 0x3b	; 59
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     45c:	8b b7       	in	r24, 0x3b	; 59
     45e:	80 68       	ori	r24, 0x80	; 128
     460:	8b bf       	out	0x3b, r24	; 59
	sei();//enabling interrupts globaly
     462:	78 94       	sei
     464:	08 95       	ret

00000466 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	2f 93       	push	r18
     47a:	3f 93       	push	r19
     47c:	4f 93       	push	r20
     47e:	5f 93       	push	r21
     480:	6f 93       	push	r22
     482:	7f 93       	push	r23
     484:	8f 93       	push	r24
     486:	9f 93       	push	r25
     488:	af 93       	push	r26
     48a:	bf 93       	push	r27
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     4a0:	82 e5       	ldi	r24, 0x52	; 82
     4a2:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     4a6:	f8 2e       	mov	r15, r24
     4a8:	e9 2e       	mov	r14, r25
     4aa:	8c e4       	ldi	r24, 0x4C	; 76
     4ac:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     4b0:	18 2f       	mov	r17, r24
     4b2:	09 2f       	mov	r16, r25
     4b4:	89 e5       	ldi	r24, 0x59	; 89
     4b6:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     4ba:	c8 2f       	mov	r28, r24
     4bc:	d9 2f       	mov	r29, r25
     4be:	88 e5       	ldi	r24, 0x58	; 88
     4c0:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	87 e3       	ldi	r24, 0x37	; 55
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	9f 93       	push	r25
     4da:	8f 93       	push	r24
     4dc:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
     4e0:	8d b7       	in	r24, 0x3d	; 61
     4e2:	9e b7       	in	r25, 0x3e	; 62
     4e4:	0c 96       	adiw	r24, 0x0c	; 12
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	9e bf       	out	0x3e, r25	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	8d bf       	out	0x3d, r24	; 61
}
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	bf 91       	pop	r27
     4fa:	af 91       	pop	r26
     4fc:	9f 91       	pop	r25
     4fe:	8f 91       	pop	r24
     500:	7f 91       	pop	r23
     502:	6f 91       	pop	r22
     504:	5f 91       	pop	r21
     506:	4f 91       	pop	r20
     508:	3f 91       	pop	r19
     50a:	2f 91       	pop	r18
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	0f 92       	push	r0
     526:	11 24       	eor	r1, r1
     528:	2f 93       	push	r18
     52a:	3f 93       	push	r19
     52c:	4f 93       	push	r20
     52e:	5f 93       	push	r21
     530:	6f 93       	push	r22
     532:	7f 93       	push	r23
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	af 93       	push	r26
     53a:	bf 93       	push	r27
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	printf("Left Button Pressed\n");
     540:	80 e5       	ldi	r24, 0x50	; 80
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
     548:	ff 91       	pop	r31
     54a:	ef 91       	pop	r30
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	c4 e6       	ldi	r28, 0x64	; 100
     574:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     576:	00 91 2a 04 	lds	r16, 0x042A
     57a:	10 91 2b 04 	lds	r17, 0x042B
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 f7 01 	call	0x3ee	; 0x3ee <readADC>
     586:	01 58       	subi	r16, 0x81	; 129
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	08 1b       	sub	r16, r24
     58c:	19 0b       	sbc	r17, r25
     58e:	10 93 2b 04 	sts	0x042B, r17
     592:	00 93 2a 04 	sts	0x042A, r16
		calibrate_y += 127 - readADC(2);
     596:	00 91 28 04 	lds	r16, 0x0428
     59a:	10 91 29 04 	lds	r17, 0x0429
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <readADC>
     5a6:	01 58       	subi	r16, 0x81	; 129
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	08 1b       	sub	r16, r24
     5ac:	19 0b       	sbc	r17, r25
     5ae:	10 93 29 04 	sts	0x0429, r17
     5b2:	00 93 28 04 	sts	0x0428, r16
     5b6:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     5b8:	20 97       	sbiw	r28, 0x00	; 0
     5ba:	e9 f6       	brne	.-70     	; 0x576 <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     5bc:	80 91 2a 04 	lds	r24, 0x042A
     5c0:	90 91 2b 04 	lds	r25, 0x042B
     5c4:	24 e6       	ldi	r18, 0x64	; 100
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	b9 01       	movw	r22, r18
     5ca:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divmodhi4>
     5ce:	70 93 2b 04 	sts	0x042B, r23
     5d2:	60 93 2a 04 	sts	0x042A, r22
	calibrate_y /= CALIBRATE_READINGS;
     5d6:	80 91 28 04 	lds	r24, 0x0428
     5da:	90 91 29 04 	lds	r25, 0x0429
     5de:	b9 01       	movw	r22, r18
     5e0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divmodhi4>
     5e4:	70 93 29 04 	sts	0x0429, r23
     5e8:	60 93 28 04 	sts	0x0428, r22
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int referance, int step){
     5f6:	2f 92       	push	r2
     5f8:	3f 92       	push	r3
     5fa:	4f 92       	push	r4
     5fc:	5f 92       	push	r5
     5fe:	6f 92       	push	r6
     600:	7f 92       	push	r7
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	00 d0       	rcall	.+0      	; 0x61c <signal_to_range+0x26>
     61c:	00 d0       	rcall	.+0      	; 0x61e <signal_to_range+0x28>
     61e:	00 d0       	rcall	.+0      	; 0x620 <signal_to_range+0x2a>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	3c 01       	movw	r6, r24
     626:	7a 83       	std	Y+2, r23	; 0x02
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	5c 83       	std	Y+4, r21	; 0x04
     62c:	4b 83       	std	Y+3, r20	; 0x03
     62e:	3e 83       	std	Y+6, r19	; 0x06
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	18 01       	movw	r2, r16
     634:	85 01       	movw	r16, r10
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     636:	b9 01       	movw	r22, r18
     638:	88 27       	eor	r24, r24
     63a:	77 fd       	sbrc	r23, 7
     63c:	80 95       	com	r24
     63e:	98 2f       	mov	r25, r24
     640:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__floatsisf>
     644:	4b 01       	movw	r8, r22
     646:	5c 01       	movw	r10, r24
     648:	b3 01       	movw	r22, r6
     64a:	6e 0d       	add	r22, r14
     64c:	7f 1d       	adc	r23, r15
     64e:	29 81       	ldd	r18, Y+1	; 0x01
     650:	3a 81       	ldd	r19, Y+2	; 0x02
     652:	62 1b       	sub	r22, r18
     654:	73 0b       	sbc	r23, r19
     656:	88 27       	eor	r24, r24
     658:	77 fd       	sbrc	r23, 7
     65a:	80 95       	com	r24
     65c:	98 2f       	mov	r25, r24
     65e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__floatsisf>
     662:	2b 01       	movw	r4, r22
     664:	3c 01       	movw	r6, r24
     666:	b1 01       	movw	r22, r2
     668:	8d 81       	ldd	r24, Y+5	; 0x05
     66a:	9e 81       	ldd	r25, Y+6	; 0x06
     66c:	68 1b       	sub	r22, r24
     66e:	79 0b       	sbc	r23, r25
     670:	88 27       	eor	r24, r24
     672:	77 fd       	sbrc	r23, 7
     674:	80 95       	com	r24
     676:	98 2f       	mov	r25, r24
     678:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__floatsisf>
     67c:	9b 01       	movw	r18, r22
     67e:	ac 01       	movw	r20, r24
     680:	c3 01       	movw	r24, r6
     682:	b2 01       	movw	r22, r4
     684:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3>
     688:	2b 01       	movw	r4, r22
     68a:	3c 01       	movw	r6, r24
     68c:	6b 81       	ldd	r22, Y+3	; 0x03
     68e:	7c 81       	ldd	r23, Y+4	; 0x04
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	6e 1b       	sub	r22, r30
     696:	7f 0b       	sbc	r23, r31
     698:	88 27       	eor	r24, r24
     69a:	77 fd       	sbrc	r23, 7
     69c:	80 95       	com	r24
     69e:	98 2f       	mov	r25, r24
     6a0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__floatsisf>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	c3 01       	movw	r24, r6
     6aa:	b2 01       	movw	r22, r4
     6ac:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__divsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c5 01       	movw	r24, r10
     6b6:	b4 01       	movw	r22, r8
     6b8:	0e 94 6a 07 	call	0xed4	; 0xed4 <__addsf3>
     6bc:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
	
		
	if (new_signal >= output_max - step){
     6c0:	c1 01       	movw	r24, r2
     6c2:	80 1b       	sub	r24, r16
     6c4:	91 0b       	sbc	r25, r17
     6c6:	68 17       	cp	r22, r24
     6c8:	79 07       	cpc	r23, r25
     6ca:	74 f5       	brge	.+92     	; 0x728 <signal_to_range+0x132>
		referance = output_max;
	}else if(new_signal <= output_min + step){
     6cc:	8d 81       	ldd	r24, Y+5	; 0x05
     6ce:	9e 81       	ldd	r25, Y+6	; 0x06
     6d0:	80 0f       	add	r24, r16
     6d2:	91 1f       	adc	r25, r17
     6d4:	86 17       	cp	r24, r22
     6d6:	97 07       	cpc	r25, r23
     6d8:	4c f5       	brge	.+82     	; 0x72c <signal_to_range+0x136>
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
			if((new_signal >= referance + step/2)){
     6da:	f8 01       	movw	r30, r16
     6dc:	11 23       	and	r17, r17
     6de:	0c f4       	brge	.+2      	; 0x6e2 <signal_to_range+0xec>
     6e0:	31 96       	adiw	r30, 0x01	; 1
     6e2:	f5 95       	asr	r31
     6e4:	e7 95       	ror	r30
     6e6:	d8 01       	movw	r26, r16
     6e8:	12 c0       	rjmp	.+36     	; 0x70e <signal_to_range+0x118>
     6ea:	8a 0f       	add	r24, r26
     6ec:	9b 1f       	adc	r25, r27
     6ee:	ac 01       	movw	r20, r24
     6f0:	4e 0f       	add	r20, r30
     6f2:	5f 1f       	adc	r21, r31
     6f4:	64 17       	cp	r22, r20
     6f6:	75 07       	cpc	r23, r21
     6f8:	14 f0       	brlt	.+4      	; 0x6fe <signal_to_range+0x108>
				referance += step;
     6fa:	69 01       	movw	r12, r18
     6fc:	0b c0       	rjmp	.+22     	; 0x714 <signal_to_range+0x11e>
			}
			else if (new_signal <= referance - step/2){
     6fe:	c6 01       	movw	r24, r12
     700:	8e 1b       	sub	r24, r30
     702:	9f 0b       	sbc	r25, r31
     704:	86 17       	cp	r24, r22
     706:	97 07       	cpc	r25, r23
     708:	14 f0       	brlt	.+4      	; 0x70e <signal_to_range+0x118>
				referance -= step;
     70a:	c0 1a       	sub	r12, r16
     70c:	d1 0a       	sbc	r13, r17
     70e:	c6 01       	movw	r24, r12
     710:	80 1b       	sub	r24, r16
     712:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		referance = output_max;
	}else if(new_signal <= output_min + step){
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
     714:	96 01       	movw	r18, r12
     716:	20 0f       	add	r18, r16
     718:	31 1f       	adc	r19, r17
     71a:	62 17       	cp	r22, r18
     71c:	73 07       	cpc	r23, r19
     71e:	2c f7       	brge	.-54     	; 0x6ea <signal_to_range+0xf4>
     720:	86 17       	cp	r24, r22
     722:	97 07       	cpc	r25, r23
     724:	14 f7       	brge	.-60     	; 0x6ea <signal_to_range+0xf4>
     726:	04 c0       	rjmp	.+8      	; 0x730 <signal_to_range+0x13a>
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	if (new_signal >= output_max - step){
		referance = output_max;
     728:	61 01       	movw	r12, r2
     72a:	02 c0       	rjmp	.+4      	; 0x730 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		referance = output_min;
     72c:	cd 80       	ldd	r12, Y+5	; 0x05
     72e:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, referance);
	return referance;
}
     730:	c6 01       	movw	r24, r12
     732:	26 96       	adiw	r28, 0x06	; 6
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	9f 90       	pop	r9
     754:	8f 90       	pop	r8
     756:	7f 90       	pop	r7
     758:	6f 90       	pop	r6
     75a:	5f 90       	pop	r5
     75c:	4f 90       	pop	r4
     75e:	3f 90       	pop	r3
     760:	2f 90       	pop	r2
     762:	08 95       	ret

00000764 <read_control_input>:
	}
	calibrate_x /= CALIBRATE_READINGS;
	calibrate_y /= CALIBRATE_READINGS;
}

int read_control_input(char channel){
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
	switch(channel){
     774:	82 35       	cpi	r24, 0x52	; 82
     776:	09 f4       	brne	.+2      	; 0x77a <read_control_input+0x16>
     778:	74 c0       	rjmp	.+232    	; 0x862 <read_control_input+0xfe>
     77a:	20 f4       	brcc	.+8      	; 0x784 <read_control_input+0x20>
     77c:	8c 34       	cpi	r24, 0x4C	; 76
     77e:	09 f4       	brne	.+2      	; 0x782 <read_control_input+0x1e>
     780:	4e c0       	rjmp	.+156    	; 0x81e <read_control_input+0xba>
     782:	91 c0       	rjmp	.+290    	; 0x8a6 <read_control_input+0x142>
     784:	88 35       	cpi	r24, 0x58	; 88
     786:	19 f0       	breq	.+6      	; 0x78e <read_control_input+0x2a>
     788:	89 35       	cpi	r24, 0x59	; 89
     78a:	29 f1       	breq	.+74     	; 0x7d6 <read_control_input+0x72>
     78c:	8c c0       	rjmp	.+280    	; 0x8a6 <read_control_input+0x142>
		case 'X': 
			ref_X = signal_to_range(readADC(1), 0, 255, -100, 100, calibrate_x, ref_X, 10); 
     78e:	c0 90 26 04 	lds	r12, 0x0426
     792:	d0 90 27 04 	lds	r13, 0x0427
     796:	e0 90 2a 04 	lds	r14, 0x042A
     79a:	f0 90 2b 04 	lds	r15, 0x042B
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <readADC>
     7a6:	0f 2e       	mov	r0, r31
     7a8:	fa e0       	ldi	r31, 0x0A	; 10
     7aa:	af 2e       	mov	r10, r31
     7ac:	b1 2c       	mov	r11, r1
     7ae:	f0 2d       	mov	r31, r0
     7b0:	04 e6       	ldi	r16, 0x64	; 100
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	2c e9       	ldi	r18, 0x9C	; 156
     7b6:	3f ef       	ldi	r19, 0xFF	; 255
     7b8:	4f ef       	ldi	r20, 0xFF	; 255
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <signal_to_range>
     7c4:	90 93 27 04 	sts	0x0427, r25
     7c8:	80 93 26 04 	sts	0x0426, r24
			return ref_X;
     7cc:	80 91 26 04 	lds	r24, 0x0426
     7d0:	90 91 27 04 	lds	r25, 0x0427
     7d4:	6a c0       	rjmp	.+212    	; 0x8aa <read_control_input+0x146>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), 0, 255, -100, 100, calibrate_y, ref_Y, 10);
     7d6:	c0 90 24 04 	lds	r12, 0x0424
     7da:	d0 90 25 04 	lds	r13, 0x0425
     7de:	e0 90 28 04 	lds	r14, 0x0428
     7e2:	f0 90 29 04 	lds	r15, 0x0429
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 f7 01 	call	0x3ee	; 0x3ee <readADC>
     7ee:	0f 2e       	mov	r0, r31
     7f0:	fa e0       	ldi	r31, 0x0A	; 10
     7f2:	af 2e       	mov	r10, r31
     7f4:	b1 2c       	mov	r11, r1
     7f6:	f0 2d       	mov	r31, r0
     7f8:	04 e6       	ldi	r16, 0x64	; 100
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	2c e9       	ldi	r18, 0x9C	; 156
     7fe:	3f ef       	ldi	r19, 0xFF	; 255
     800:	4f ef       	ldi	r20, 0xFF	; 255
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <signal_to_range>
     80c:	90 93 25 04 	sts	0x0425, r25
     810:	80 93 24 04 	sts	0x0424, r24
			return ref_Y;
     814:	80 91 24 04 	lds	r24, 0x0424
     818:	90 91 25 04 	lds	r25, 0x0425
     81c:	46 c0       	rjmp	.+140    	; 0x8aa <read_control_input+0x146>
		case 'L':
		ref_L = signal_to_range(readADC(3), 0, 255, 0, 100, 0, ref_L, 10);
     81e:	c0 90 22 04 	lds	r12, 0x0422
     822:	d0 90 23 04 	lds	r13, 0x0423
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <readADC>
     82e:	0f 2e       	mov	r0, r31
     830:	fa e0       	ldi	r31, 0x0A	; 10
     832:	af 2e       	mov	r10, r31
     834:	b1 2c       	mov	r11, r1
     836:	f0 2d       	mov	r31, r0
     838:	e1 2c       	mov	r14, r1
     83a:	f1 2c       	mov	r15, r1
     83c:	04 e6       	ldi	r16, 0x64	; 100
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	4f ef       	ldi	r20, 0xFF	; 255
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <signal_to_range>
     850:	90 93 23 04 	sts	0x0423, r25
     854:	80 93 22 04 	sts	0x0422, r24
		return ref_L;
     858:	80 91 22 04 	lds	r24, 0x0422
     85c:	90 91 23 04 	lds	r25, 0x0423
     860:	24 c0       	rjmp	.+72     	; 0x8aa <read_control_input+0x146>
		case 'R': 
			ref_R = signal_to_range(readADC(4), 0, 255, 0, 100, 0, ref_R, 10);
     862:	c0 90 20 04 	lds	r12, 0x0420
     866:	d0 90 21 04 	lds	r13, 0x0421
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <readADC>
     872:	0f 2e       	mov	r0, r31
     874:	fa e0       	ldi	r31, 0x0A	; 10
     876:	af 2e       	mov	r10, r31
     878:	b1 2c       	mov	r11, r1
     87a:	f0 2d       	mov	r31, r0
     87c:	e1 2c       	mov	r14, r1
     87e:	f1 2c       	mov	r15, r1
     880:	04 e6       	ldi	r16, 0x64	; 100
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	4f ef       	ldi	r20, 0xFF	; 255
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <signal_to_range>
     894:	90 93 21 04 	sts	0x0421, r25
     898:	80 93 20 04 	sts	0x0420, r24
			return ref_R;
     89c:	80 91 20 04 	lds	r24, 0x0420
     8a0:	90 91 21 04 	lds	r25, 0x0421
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <read_control_input+0x146>
	}
	return 0;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
}
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	bf 90       	pop	r11
     8b8:	af 90       	pop	r10
     8ba:	08 95       	ret

000008bc <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     8bc:	0e 94 b5 02 	call	0x56a	; 0x56a <calibrate_joystick>
	ref_X = read_control_input('X');
     8c0:	88 e5       	ldi	r24, 0x58	; 88
     8c2:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     8c6:	90 93 27 04 	sts	0x0427, r25
     8ca:	80 93 26 04 	sts	0x0426, r24
	ref_Y = read_control_input('Y');
     8ce:	89 e5       	ldi	r24, 0x59	; 89
     8d0:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     8d4:	90 93 25 04 	sts	0x0425, r25
     8d8:	80 93 24 04 	sts	0x0424, r24
	ref_L = read_control_input('L');
     8dc:	8c e4       	ldi	r24, 0x4C	; 76
     8de:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     8e2:	90 93 23 04 	sts	0x0423, r25
     8e6:	80 93 22 04 	sts	0x0422, r24
	ref_R = read_control_input('R');
     8ea:	82 e5       	ldi	r24, 0x52	; 82
     8ec:	0e 94 b2 03 	call	0x764	; 0x764 <read_control_input>
     8f0:	90 93 21 04 	sts	0x0421, r25
     8f4:	80 93 20 04 	sts	0x0420, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     8f8:	20 91 28 04 	lds	r18, 0x0428
     8fc:	30 91 29 04 	lds	r19, 0x0429
     900:	80 91 2a 04 	lds	r24, 0x042A
     904:	90 91 2b 04 	lds	r25, 0x042B
     908:	3f 93       	push	r19
     90a:	2f 93       	push	r18
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	84 e6       	ldi	r24, 0x64	; 100
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     91c:	60 91 20 04 	lds	r22, 0x0420
     920:	70 91 21 04 	lds	r23, 0x0421
     924:	40 91 22 04 	lds	r20, 0x0422
     928:	50 91 23 04 	lds	r21, 0x0423
     92c:	20 91 24 04 	lds	r18, 0x0424
     930:	30 91 25 04 	lds	r19, 0x0425
     934:	80 91 26 04 	lds	r24, 0x0426
     938:	90 91 27 04 	lds	r25, 0x0427
     93c:	7f 93       	push	r23
     93e:	6f 93       	push	r22
     940:	5f 93       	push	r21
     942:	4f 93       	push	r20
     944:	3f 93       	push	r19
     946:	2f 93       	push	r18
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	8d e8       	ldi	r24, 0x8D	; 141
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
     958:	8d b7       	in	r24, 0x3d	; 61
     95a:	9e b7       	in	r25, 0x3e	; 62
     95c:	40 96       	adiw	r24, 0x10	; 16
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	9e bf       	out	0x3e, r25	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	8d bf       	out	0x3d, r24	; 61
     968:	08 95       	ret

0000096a <SRAM_test>:
	printf("\nINITIALIZATION COMPLETE\n");
}

#include <stdlib.h>
void SRAM_test(void)
{
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     97a:	86 eb       	ldi	r24, 0xB6	; 182
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     982:	0e 94 ce 09 	call	0x139c	; 0x139c <rand>
     986:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     988:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     990:	00 e0       	ldi	r16, 0x00	; 0
     992:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     994:	0f 2e       	mov	r0, r31
     996:	fc ec       	ldi	r31, 0xCC	; 204
     998:	ef 2e       	mov	r14, r31
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	ff 2e       	mov	r15, r31
     99e:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9a0:	0e 94 ce 09 	call	0x139c	; 0x139c <rand>
     9a4:	fe 01       	movw	r30, r28
     9a6:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     9a8:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     9aa:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     9ac:	28 17       	cp	r18, r24
     9ae:	a9 f0       	breq	.+42     	; 0x9da <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9b0:	99 27       	eor	r25, r25
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	1f 92       	push	r1
     9b8:	2f 93       	push	r18
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	ff 92       	push	r15
     9c0:	ef 92       	push	r14
     9c2:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
			write_errors++;
     9c6:	0f 5f       	subi	r16, 0xFF	; 255
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	8d b7       	in	r24, 0x3d	; 61
     9cc:	9e b7       	in	r25, 0x3e	; 62
     9ce:	08 96       	adiw	r24, 0x08	; 8
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	9e bf       	out	0x3e, r25	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9da:	21 96       	adiw	r28, 0x01	; 1
     9dc:	c1 15       	cp	r28, r1
     9de:	98 e0       	ldi	r25, 0x08	; 8
     9e0:	d9 07       	cpc	r29, r25
     9e2:	f1 f6       	brne	.-68     	; 0x9a0 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     9e4:	c6 01       	movw	r24, r12
     9e6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9ea:	c0 e0       	ldi	r28, 0x00	; 0
     9ec:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     9ee:	e1 2c       	mov	r14, r1
     9f0:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     9f2:	0f 2e       	mov	r0, r31
     9f4:	f5 e0       	ldi	r31, 0x05	; 5
     9f6:	cf 2e       	mov	r12, r31
     9f8:	f2 e0       	ldi	r31, 0x02	; 2
     9fa:	df 2e       	mov	r13, r31
     9fc:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     9fe:	0e 94 ce 09 	call	0x139c	; 0x139c <rand>
     a02:	fe 01       	movw	r30, r28
     a04:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a06:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a08:	28 17       	cp	r18, r24
     a0a:	b1 f0       	breq	.+44     	; 0xa38 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a0c:	99 27       	eor	r25, r25
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	1f 92       	push	r1
     a14:	2f 93       	push	r18
     a16:	df 93       	push	r29
     a18:	cf 93       	push	r28
     a1a:	df 92       	push	r13
     a1c:	cf 92       	push	r12
     a1e:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
			retrieval_errors++;
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	e8 1a       	sub	r14, r24
     a26:	f8 0a       	sbc	r15, r24
     a28:	8d b7       	in	r24, 0x3d	; 61
     a2a:	9e b7       	in	r25, 0x3e	; 62
     a2c:	08 96       	adiw	r24, 0x08	; 8
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	9e bf       	out	0x3e, r25	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a38:	21 96       	adiw	r28, 0x01	; 1
     a3a:	c1 15       	cp	r28, r1
     a3c:	98 e0       	ldi	r25, 0x08	; 8
     a3e:	d9 07       	cpc	r29, r25
     a40:	f1 f6       	brne	.-68     	; 0x9fe <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     a42:	ff 92       	push	r15
     a44:	ef 92       	push	r14
     a46:	1f 93       	push	r17
     a48:	0f 93       	push	r16
     a4a:	82 e4       	ldi	r24, 0x42	; 66
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret

00000a74 <initalize>:



void initalize(void){
	
	init_UART(UBBR);
     a74:	8f e1       	ldi	r24, 0x1F	; 31
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 5e 07 	call	0xebc	; 0xebc <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     a7c:	89 e9       	ldi	r24, 0x99	; 153
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	82 ea       	ldi	r24, 0xA2	; 162
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	8e ea       	ldi	r24, 0xAE	; 174
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	83 eb       	ldi	r24, 0xB3	; 179
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     aa0:	85 b7       	in	r24, 0x35	; 53
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	85 bf       	out	0x35, r24	; 53
	
	
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     aa6:	80 b7       	in	r24, 0x30	; 48
     aa8:	80 62       	ori	r24, 0x20	; 32
     aaa:	80 bf       	out	0x30, r24	; 48
	
	//initialize_menu();
	
	initialize_control_input();
     aac:	0e 94 5e 04 	call	0x8bc	; 0x8bc <initialize_control_input>
	printf("control input successfully initialized\n\n");
     ab0:	89 ef       	ldi	r24, 0xF9	; 249
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
	SRAM_test();
     ab8:	0e 94 b5 04 	call	0x96a	; 0x96a <SRAM_test>
	printf("SRAM successfully initialized\n");
     abc:	81 e2       	ldi	r24, 0x21	; 33
     abe:	93 e0       	ldi	r25, 0x03	; 3
     ac0:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
	initalize_interrupts();
     ac4:	0e 94 1d 02 	call	0x43a	; 0x43a <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     ac8:	8f e3       	ldi	r24, 0x3F	; 63
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
	printf("Interrupts activated\n");
     ad0:	83 e6       	ldi	r24, 0x63	; 99
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     ad8:	88 e7       	ldi	r24, 0x78	; 120
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
     ae0:	8d b7       	in	r24, 0x3d	; 61
     ae2:	9e b7       	in	r25, 0x3e	; 62
     ae4:	08 96       	adiw	r24, 0x08	; 8
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	9e bf       	out	0x3e, r25	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	8d bf       	out	0x3d, r24	; 61
     af0:	08 95       	ret

00000af2 <main>:
#include "menu.h"

int main(void)
{
	
	initalize();	
     af2:	0e 94 3a 05 	call	0xa74	; 0xa74 <initalize>
	oled_ini();
     af6:	0e 94 2b 06 	call	0xc56	; 0xc56 <oled_ini>
	oled_reset();
     afa:	0e 94 16 07 	call	0xe2c	; 0xe2c <oled_reset>
	oled_print_char(129);
	//char * abc = "penis\0";
	//oled_print(abc);
	*/
	
	initialize_menu();
     afe:	0e 94 89 05 	call	0xb12	; 0xb12 <initialize_menu>
	//oled_print_effect(__TIME__,STREAKTROUGH);
	oled_reset();
     b02:	0e 94 16 07 	call	0xe2c	; 0xe2c <oled_reset>
	menu_update();
     b06:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <menu_update>
	oled_print_char(129);
     b0a:	81 e8       	ldi	r24, 0x81	; 129
     b0c:	0e 94 2a 07 	call	0xe54	; 0xe54 <oled_print_char>
     b10:	ff cf       	rjmp	.-2      	; 0xb10 <main+0x1e>

00000b12 <initialize_menu>:
//menu mainmenu_0;
//menu mainmenu_1;
//menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_sib_up, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	new_menu->ptr_self = new_menu;
     b16:	ac ec       	ldi	r26, 0xCC	; 204
     b18:	b4 e0       	ldi	r27, 0x04	; 4
     b1a:	b0 93 d1 04 	sts	0x04D1, r27
     b1e:	a0 93 d0 04 	sts	0x04D0, r26
	new_menu->ptr_sib_up = ptr_sib_up;
     b22:	ce eb       	ldi	r28, 0xBE	; 190
     b24:	d4 e0       	ldi	r29, 0x04	; 4
     b26:	d0 93 d3 04 	sts	0x04D3, r29
     b2a:	c0 93 d2 04 	sts	0x04D2, r28
	new_menu->ptr_sib_down = ptr_sib_down;
     b2e:	e2 ea       	ldi	r30, 0xA2	; 162
     b30:	f4 e0       	ldi	r31, 0x04	; 4
     b32:	f0 93 d5 04 	sts	0x04D5, r31
     b36:	e0 93 d4 04 	sts	0x04D4, r30
	new_menu->ptr_child = ptr_child;
     b3a:	10 92 d7 04 	sts	0x04D7, r1
     b3e:	10 92 d6 04 	sts	0x04D6, r1
	new_menu->ptr_parent = ptr_parent;
     b42:	10 92 d9 04 	sts	0x04D9, r1
     b46:	10 92 d8 04 	sts	0x04D8, r1
	
	new_menu->title = title;
     b4a:	80 e9       	ldi	r24, 0x90	; 144
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	11 96       	adiw	r26, 0x01	; 1
     b50:	9c 93       	st	X, r25
     b52:	8e 93       	st	-X, r24
	new_menu->n_sib = n_sib;
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	90 93 cf 04 	sts	0x04CF, r25
     b5c:	80 93 ce 04 	sts	0x04CE, r24

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_sib_up, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	new_menu->ptr_self = new_menu;
     b60:	f0 93 a7 04 	sts	0x04A7, r31
     b64:	e0 93 a6 04 	sts	0x04A6, r30
	new_menu->ptr_sib_up = ptr_sib_up;
     b68:	b0 93 a9 04 	sts	0x04A9, r27
     b6c:	a0 93 a8 04 	sts	0x04A8, r26
	new_menu->ptr_sib_down = ptr_sib_down;
     b70:	d0 93 ab 04 	sts	0x04AB, r29
     b74:	c0 93 aa 04 	sts	0x04AA, r28
	new_menu->ptr_child = ptr_child;
     b78:	10 92 ad 04 	sts	0x04AD, r1
     b7c:	10 92 ac 04 	sts	0x04AC, r1
	new_menu->ptr_parent = ptr_parent;
     b80:	10 92 af 04 	sts	0x04AF, r1
     b84:	10 92 ae 04 	sts	0x04AE, r1
	
	new_menu->title = title;
     b88:	20 e8       	ldi	r18, 0x80	; 128
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	31 83       	std	Z+1, r19	; 0x01
     b8e:	20 83       	st	Z, r18
	new_menu->n_sib = n_sib;
     b90:	90 93 a5 04 	sts	0x04A5, r25
     b94:	80 93 a4 04 	sts	0x04A4, r24

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu,menu * ptr_sib_up, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child,int n_sib,PGM_P title){
	new_menu->ptr_self = new_menu;
     b98:	d0 93 c3 04 	sts	0x04C3, r29
     b9c:	c0 93 c2 04 	sts	0x04C2, r28
	new_menu->ptr_sib_up = ptr_sib_up;
     ba0:	f0 93 c5 04 	sts	0x04C5, r31
     ba4:	e0 93 c4 04 	sts	0x04C4, r30
	new_menu->ptr_sib_down = ptr_sib_down;
     ba8:	b0 93 c7 04 	sts	0x04C7, r27
     bac:	a0 93 c6 04 	sts	0x04C6, r26
	new_menu->ptr_child = ptr_child;
     bb0:	10 92 c9 04 	sts	0x04C9, r1
     bb4:	10 92 c8 04 	sts	0x04C8, r1
	new_menu->ptr_parent = ptr_parent;
     bb8:	10 92 cb 04 	sts	0x04CB, r1
     bbc:	10 92 ca 04 	sts	0x04CA, r1
	
	new_menu->title = title;
     bc0:	20 e7       	ldi	r18, 0x70	; 112
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	39 83       	std	Y+1, r19	; 0x01
     bc6:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     bc8:	90 93 c1 04 	sts	0x04C1, r25
     bcc:	80 93 c0 04 	sts	0x04C0, r24

void initialize_menu(void){
	setup_menu(&highscore_0,&highscore_2,&highscore_1,NULL,NULL,3,highscore_entry_0);
	setup_menu(&highscore_1,&highscore_0,&highscore_2,NULL,NULL,3,highscore_entry_1);
	setup_menu(&highscore_2,&highscore_1,&highscore_0,NULL,NULL,3,highscore_entry_2);
	current_head = highscore_0.ptr_self;
     bd0:	b0 93 2d 04 	sts	0x042D, r27
     bd4:	a0 93 2c 04 	sts	0x042C, r26
	current_selected = highscore_1.ptr_self;
     bd8:	f0 93 2f 04 	sts	0x042F, r31
     bdc:	e0 93 2e 04 	sts	0x042E, r30
	strcpy_P(temp,current_head->title);
	printf("%s ",temp);
	current_selected = highscore_0;
	
	printf("%i",*current_selected);*/
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <menu_update>:
	

void menu_update(void){
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
	
	for(int counter = 0 ; counter < current_head->n_sib; counter++){
     bea:	e0 91 2c 04 	lds	r30, 0x042C
     bee:	f0 91 2d 04 	lds	r31, 0x042D
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	93 81       	ldd	r25, Z+3	; 0x03
     bf6:	18 16       	cp	r1, r24
     bf8:	19 06       	cpc	r1, r25
     bfa:	54 f5       	brge	.+84     	; 0xc50 <menu_update+0x6a>
     bfc:	c0 e0       	ldi	r28, 0x00	; 0
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
		//strcpy_P(temp,current_head->title);
		//printf("%s %i\n",temp,counter);
		//oled_goto_line(counter);
		//oled_print(temp);
		oled_goto_line(2);
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <oled_goto_line>
		oled_print("test");
     c08:	81 e9       	ldi	r24, 0x91	; 145
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	0e 94 4a 07 	call	0xe94	; 0xe94 <oled_print>
		if(current_selected == current_head){
     c10:	20 91 2e 04 	lds	r18, 0x042E
     c14:	30 91 2f 04 	lds	r19, 0x042F
     c18:	80 91 2c 04 	lds	r24, 0x042C
     c1c:	90 91 2d 04 	lds	r25, 0x042D
     c20:	28 17       	cp	r18, r24
     c22:	39 07       	cpc	r19, r25
     c24:	21 f4       	brne	.+8      	; 0xc2e <menu_update+0x48>
			oled_print(" <-");
     c26:	86 e9       	ldi	r24, 0x96	; 150
     c28:	93 e0       	ldi	r25, 0x03	; 3
     c2a:	0e 94 4a 07 	call	0xe94	; 0xe94 <oled_print>
		}
		current_head = current_head->ptr_sib_down;
     c2e:	e0 91 2c 04 	lds	r30, 0x042C
     c32:	f0 91 2d 04 	lds	r31, 0x042D
     c36:	00 84       	ldd	r0, Z+8	; 0x08
     c38:	f1 85       	ldd	r31, Z+9	; 0x09
     c3a:	e0 2d       	mov	r30, r0
     c3c:	f0 93 2d 04 	sts	0x042D, r31
     c40:	e0 93 2c 04 	sts	0x042C, r30
}
	

void menu_update(void){
	
	for(int counter = 0 ; counter < current_head->n_sib; counter++){
     c44:	21 96       	adiw	r28, 0x01	; 1
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	c8 17       	cp	r28, r24
     c4c:	d9 07       	cpc	r29, r25
     c4e:	c4 f2       	brlt	.-80     	; 0xc00 <menu_update+0x1a>
		if(current_selected == current_head){
			oled_print(" <-");
		}
		current_head = current_head->ptr_sib_down;
	}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <oled_ini>:
}

void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
     c56:	85 b7       	in	r24, 0x35	; 53
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     c5c:	80 b7       	in	r24, 0x30	; 48
     c5e:	80 62       	ori	r24, 0x20	; 32
     c60:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     c62:	e0 91 0c 01 	lds	r30, 0x010C
     c66:	f0 91 0d 01 	lds	r31, 0x010D
     c6a:	8e ea       	ldi	r24, 0xAE	; 174
     c6c:	80 83       	st	Z, r24
     c6e:	e0 91 0c 01 	lds	r30, 0x010C
     c72:	f0 91 0d 01 	lds	r31, 0x010D
     c76:	81 ea       	ldi	r24, 0xA1	; 161
     c78:	80 83       	st	Z, r24
     c7a:	e0 91 0c 01 	lds	r30, 0x010C
     c7e:	f0 91 0d 01 	lds	r31, 0x010D
     c82:	8a ed       	ldi	r24, 0xDA	; 218
     c84:	80 83       	st	Z, r24
     c86:	e0 91 0c 01 	lds	r30, 0x010C
     c8a:	f0 91 0d 01 	lds	r31, 0x010D
     c8e:	82 e1       	ldi	r24, 0x12	; 18
     c90:	80 83       	st	Z, r24
     c92:	e0 91 0c 01 	lds	r30, 0x010C
     c96:	f0 91 0d 01 	lds	r31, 0x010D
     c9a:	88 ec       	ldi	r24, 0xC8	; 200
     c9c:	80 83       	st	Z, r24
     c9e:	e0 91 0c 01 	lds	r30, 0x010C
     ca2:	f0 91 0d 01 	lds	r31, 0x010D
     ca6:	88 ea       	ldi	r24, 0xA8	; 168
     ca8:	80 83       	st	Z, r24
     caa:	e0 91 0c 01 	lds	r30, 0x010C
     cae:	f0 91 0d 01 	lds	r31, 0x010D
     cb2:	8f e3       	ldi	r24, 0x3F	; 63
     cb4:	80 83       	st	Z, r24
     cb6:	e0 91 0c 01 	lds	r30, 0x010C
     cba:	f0 91 0d 01 	lds	r31, 0x010D
     cbe:	85 ed       	ldi	r24, 0xD5	; 213
     cc0:	80 83       	st	Z, r24
     cc2:	e0 91 0c 01 	lds	r30, 0x010C
     cc6:	f0 91 0d 01 	lds	r31, 0x010D
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	80 83       	st	Z, r24
     cce:	e0 91 0c 01 	lds	r30, 0x010C
     cd2:	f0 91 0d 01 	lds	r31, 0x010D
     cd6:	81 e8       	ldi	r24, 0x81	; 129
     cd8:	80 83       	st	Z, r24
     cda:	e0 91 0c 01 	lds	r30, 0x010C
     cde:	f0 91 0d 01 	lds	r31, 0x010D
     ce2:	80 e5       	ldi	r24, 0x50	; 80
     ce4:	80 83       	st	Z, r24
     ce6:	e0 91 0c 01 	lds	r30, 0x010C
     cea:	f0 91 0d 01 	lds	r31, 0x010D
     cee:	89 ed       	ldi	r24, 0xD9	; 217
     cf0:	80 83       	st	Z, r24
     cf2:	e0 91 0c 01 	lds	r30, 0x010C
     cf6:	f0 91 0d 01 	lds	r31, 0x010D
     cfa:	81 e2       	ldi	r24, 0x21	; 33
     cfc:	80 83       	st	Z, r24
     cfe:	e0 91 0c 01 	lds	r30, 0x010C
     d02:	f0 91 0d 01 	lds	r31, 0x010D
     d06:	80 e2       	ldi	r24, 0x20	; 32
     d08:	80 83       	st	Z, r24
     d0a:	e0 91 0c 01 	lds	r30, 0x010C
     d0e:	f0 91 0d 01 	lds	r31, 0x010D
     d12:	10 82       	st	Z, r1
     d14:	e0 91 0c 01 	lds	r30, 0x010C
     d18:	f0 91 0d 01 	lds	r31, 0x010D
     d1c:	8b ed       	ldi	r24, 0xDB	; 219
     d1e:	80 83       	st	Z, r24
     d20:	e0 91 0c 01 	lds	r30, 0x010C
     d24:	f0 91 0d 01 	lds	r31, 0x010D
     d28:	80 e3       	ldi	r24, 0x30	; 48
     d2a:	80 83       	st	Z, r24
     d2c:	e0 91 0c 01 	lds	r30, 0x010C
     d30:	f0 91 0d 01 	lds	r31, 0x010D
     d34:	8d ea       	ldi	r24, 0xAD	; 173
     d36:	80 83       	st	Z, r24
     d38:	e0 91 0c 01 	lds	r30, 0x010C
     d3c:	f0 91 0d 01 	lds	r31, 0x010D
     d40:	10 82       	st	Z, r1
     d42:	e0 91 0c 01 	lds	r30, 0x010C
     d46:	f0 91 0d 01 	lds	r31, 0x010D
     d4a:	84 ea       	ldi	r24, 0xA4	; 164
     d4c:	80 83       	st	Z, r24
     d4e:	e0 91 0c 01 	lds	r30, 0x010C
     d52:	f0 91 0d 01 	lds	r31, 0x010D
     d56:	86 ea       	ldi	r24, 0xA6	; 166
     d58:	80 83       	st	Z, r24
     d5a:	e0 91 0c 01 	lds	r30, 0x010C
     d5e:	f0 91 0d 01 	lds	r31, 0x010D
     d62:	8f ea       	ldi	r24, 0xAF	; 175
     d64:	80 83       	st	Z, r24
     d66:	08 95       	ret

00000d68 <oled_home>:
	}
}

void oled_home(void)
{
	page = 0;
     d68:	10 92 dd 04 	sts	0x04DD, r1
     d6c:	10 92 dc 04 	sts	0x04DC, r1
	col = 0;
     d70:	10 92 db 04 	sts	0x04DB, r1
     d74:	10 92 da 04 	sts	0x04DA, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     d78:	e0 91 0c 01 	lds	r30, 0x010C
     d7c:	f0 91 0d 01 	lds	r31, 0x010D
     d80:	81 e2       	ldi	r24, 0x21	; 33
     d82:	80 83       	st	Z, r24
     d84:	e0 91 0c 01 	lds	r30, 0x010C
     d88:	f0 91 0d 01 	lds	r31, 0x010D
     d8c:	10 82       	st	Z, r1
     d8e:	e0 91 0c 01 	lds	r30, 0x010C
     d92:	f0 91 0d 01 	lds	r31, 0x010D
     d96:	8f e7       	ldi	r24, 0x7F	; 127
     d98:	80 83       	st	Z, r24
     d9a:	e0 91 0c 01 	lds	r30, 0x010C
     d9e:	f0 91 0d 01 	lds	r31, 0x010D
     da2:	82 e2       	ldi	r24, 0x22	; 34
     da4:	80 83       	st	Z, r24
     da6:	e0 91 0c 01 	lds	r30, 0x010C
     daa:	f0 91 0d 01 	lds	r31, 0x010D
     dae:	10 82       	st	Z, r1
     db0:	e0 91 0c 01 	lds	r30, 0x010C
     db4:	f0 91 0d 01 	lds	r31, 0x010D
     db8:	87 e0       	ldi	r24, 0x07	; 7
     dba:	80 83       	st	Z, r24
     dbc:	e0 91 0c 01 	lds	r30, 0x010C
     dc0:	f0 91 0d 01 	lds	r31, 0x010D
     dc4:	10 82       	st	Z, r1
     dc6:	e0 91 0c 01 	lds	r30, 0x010C
     dca:	f0 91 0d 01 	lds	r31, 0x010D
     dce:	80 e1       	ldi	r24, 0x10	; 16
     dd0:	80 83       	st	Z, r24
     dd2:	08 95       	ret

00000dd4 <oled_goto_line>:
	write_c(0x00);
	write_c(0x10);
}

void oled_goto_line(unsigned int line){
	if(line >= 8){
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	91 05       	cpc	r25, r1
     dd8:	28 f0       	brcs	.+10     	; 0xde4 <oled_goto_line+0x10>
		printf("parameter too big, oled_goto_line\n");
     dda:	8a e9       	ldi	r24, 0x9A	; 154
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
     de2:	08 95       	ret

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     de4:	e0 91 0c 01 	lds	r30, 0x010C
     de8:	f0 91 0d 01 	lds	r31, 0x010D
     dec:	10 82       	st	Z, r1
     dee:	e0 91 0c 01 	lds	r30, 0x010C
     df2:	f0 91 0d 01 	lds	r31, 0x010D
     df6:	90 e1       	ldi	r25, 0x10	; 16
     df8:	90 83       	st	Z, r25
	if(line >= 8){
		printf("parameter too big, oled_goto_line\n");
	}else{
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
     dfa:	80 6b       	ori	r24, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     dfc:	e0 91 0c 01 	lds	r30, 0x010C
     e00:	f0 91 0d 01 	lds	r31, 0x010D
     e04:	80 83       	st	Z, r24
     e06:	08 95       	ret

00000e08 <oled_clear_line>:
	
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
     e08:	08 97       	sbiw	r24, 0x08	; 8
     e0a:	58 f4       	brcc	.+22     	; 0xe22 <oled_clear_line+0x1a>
     e0c:	80 e8       	ldi	r24, 0x80	; 128
     e0e:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
     e10:	e0 91 0a 01 	lds	r30, 0x010A
     e14:	f0 91 0b 01 	lds	r31, 0x010B
     e18:	10 82       	st	Z, r1
     e1a:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_line(unsigned int line){
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	c1 f7       	brne	.-16     	; 0xe10 <oled_clear_line+0x8>
     e20:	08 95       	ret
			write_d(0b00000000);
		}
	}else{
		printf("parameter too big, oled_clear_line\n");
     e22:	80 ee       	ldi	r24, 0xE0	; 224
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 3d 0a 	call	0x147a	; 0x147a <puts>
     e2a:	08 95       	ret

00000e2c <oled_reset>:

}


void oled_reset(void)
{	
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
	oled_home();
     e30:	0e 94 b4 06 	call	0xd68	; 0xd68 <oled_home>
	oled_goto_line(0);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <oled_goto_line>
	
	for(int i = 0; i < 8;i++){
     e3c:	c0 e0       	ldi	r28, 0x00	; 0
     e3e:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
     e40:	ce 01       	movw	r24, r28
     e42:	0e 94 04 07 	call	0xe08	; 0xe08 <oled_clear_line>
void oled_reset(void)
{	
	oled_home();
	oled_goto_line(0);
	
	for(int i = 0; i < 8;i++){
     e46:	21 96       	adiw	r28, 0x01	; 1
     e48:	c8 30       	cpi	r28, 0x08	; 8
     e4a:	d1 05       	cpc	r29, r1
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <oled_reset+0x14>
		oled_clear_line(i);
	}
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <oled_print_char>:
	}else{
		
	}
}
int oled_print_char(char letter){
	if(letter != '\0'){
     e54:	88 23       	and	r24, r24
     e56:	c1 f0       	breq	.+48     	; 0xe88 <oled_print_char+0x34>
     e58:	e8 2f       	mov	r30, r24
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	e0 56       	subi	r30, 0x60	; 96
     e6a:	f0 40       	sbci	r31, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
     e70:	a0 91 0a 01 	lds	r26, 0x010A
     e74:	b0 91 0b 01 	lds	r27, 0x010B
     e78:	24 91       	lpm	r18, Z
     e7a:	2c 93       	st	X, r18
	}
}
int oled_print_char(char letter){
	if(letter != '\0'){
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	31 96       	adiw	r30, 0x01	; 1
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	91 05       	cpc	r25, r1
     e84:	a9 f7       	brne	.-22     	; 0xe70 <oled_print_char+0x1c>
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <oled_print_char+0x3a>
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
	}else{
		return 0;	
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	08 95       	ret
	if(letter != '\0'){
		//printf("%c",letter);
		for(unsigned int i = 0; i < 8; i++){
			 * oled_data = pgm_read_byte(&font[letter-' '][i]);
		}
		return 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 0;	
	}
}
     e92:	08 95       	ret

00000e94 <oled_print>:
		return 0;
	}
}


void oled_print(char* letters){
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (oled_print_char(letters[i++])){
     e9a:	89 91       	ld	r24, Y+
     e9c:	0e 94 2a 07 	call	0xe54	; 0xe54 <oled_print_char>
     ea0:	89 2b       	or	r24, r25
     ea2:	d9 f7       	brne	.-10     	; 0xe9a <oled_print+0x6>
	}
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <send_UART>:
     eaa:	5d 9b       	sbis	0x0b, 5	; 11
     eac:	fe cf       	rjmp	.-4      	; 0xeaa <send_UART>
     eae:	8c b9       	out	0x0c, r24	; 12
     eb0:	08 95       	ret

00000eb2 <recieve_UART>:
     eb2:	5f 9b       	sbis	0x0b, 7	; 11
     eb4:	fe cf       	rjmp	.-4      	; 0xeb2 <recieve_UART>
     eb6:	8c b1       	in	r24, 0x0c	; 12
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	08 95       	ret

00000ebc <init_UART>:
     ebc:	90 bd       	out	0x20, r25	; 32
     ebe:	89 b9       	out	0x09, r24	; 9
     ec0:	88 e1       	ldi	r24, 0x18	; 24
     ec2:	8a b9       	out	0x0a, r24	; 10
     ec4:	69 e5       	ldi	r22, 0x59	; 89
     ec6:	77 e0       	ldi	r23, 0x07	; 7
     ec8:	85 e5       	ldi	r24, 0x55	; 85
     eca:	97 e0       	ldi	r25, 0x07	; 7
     ecc:	0e 94 de 09 	call	0x13bc	; 0x13bc <fdevopen>
     ed0:	08 95       	ret

00000ed2 <__subsf3>:
     ed2:	50 58       	subi	r21, 0x80	; 128

00000ed4 <__addsf3>:
     ed4:	bb 27       	eor	r27, r27
     ed6:	aa 27       	eor	r26, r26
     ed8:	0e d0       	rcall	.+28     	; 0xef6 <__addsf3x>
     eda:	4d c1       	rjmp	.+666    	; 0x1176 <__fp_round>
     edc:	3e d1       	rcall	.+636    	; 0x115a <__fp_pscA>
     ede:	30 f0       	brcs	.+12     	; 0xeec <__addsf3+0x18>
     ee0:	43 d1       	rcall	.+646    	; 0x1168 <__fp_pscB>
     ee2:	20 f0       	brcs	.+8      	; 0xeec <__addsf3+0x18>
     ee4:	31 f4       	brne	.+12     	; 0xef2 <__addsf3+0x1e>
     ee6:	9f 3f       	cpi	r25, 0xFF	; 255
     ee8:	11 f4       	brne	.+4      	; 0xeee <__addsf3+0x1a>
     eea:	1e f4       	brtc	.+6      	; 0xef2 <__addsf3+0x1e>
     eec:	33 c1       	rjmp	.+614    	; 0x1154 <__fp_nan>
     eee:	0e f4       	brtc	.+2      	; 0xef2 <__addsf3+0x1e>
     ef0:	e0 95       	com	r30
     ef2:	e7 fb       	bst	r30, 7
     ef4:	29 c1       	rjmp	.+594    	; 0x1148 <__fp_inf>

00000ef6 <__addsf3x>:
     ef6:	e9 2f       	mov	r30, r25
     ef8:	4f d1       	rcall	.+670    	; 0x1198 <__fp_split3>
     efa:	80 f3       	brcs	.-32     	; 0xedc <__addsf3+0x8>
     efc:	ba 17       	cp	r27, r26
     efe:	62 07       	cpc	r22, r18
     f00:	73 07       	cpc	r23, r19
     f02:	84 07       	cpc	r24, r20
     f04:	95 07       	cpc	r25, r21
     f06:	18 f0       	brcs	.+6      	; 0xf0e <__addsf3x+0x18>
     f08:	71 f4       	brne	.+28     	; 0xf26 <__addsf3x+0x30>
     f0a:	9e f5       	brtc	.+102    	; 0xf72 <__addsf3x+0x7c>
     f0c:	67 c1       	rjmp	.+718    	; 0x11dc <__fp_zero>
     f0e:	0e f4       	brtc	.+2      	; 0xf12 <__addsf3x+0x1c>
     f10:	e0 95       	com	r30
     f12:	0b 2e       	mov	r0, r27
     f14:	ba 2f       	mov	r27, r26
     f16:	a0 2d       	mov	r26, r0
     f18:	0b 01       	movw	r0, r22
     f1a:	b9 01       	movw	r22, r18
     f1c:	90 01       	movw	r18, r0
     f1e:	0c 01       	movw	r0, r24
     f20:	ca 01       	movw	r24, r20
     f22:	a0 01       	movw	r20, r0
     f24:	11 24       	eor	r1, r1
     f26:	ff 27       	eor	r31, r31
     f28:	59 1b       	sub	r21, r25
     f2a:	99 f0       	breq	.+38     	; 0xf52 <__addsf3x+0x5c>
     f2c:	59 3f       	cpi	r21, 0xF9	; 249
     f2e:	50 f4       	brcc	.+20     	; 0xf44 <__addsf3x+0x4e>
     f30:	50 3e       	cpi	r21, 0xE0	; 224
     f32:	68 f1       	brcs	.+90     	; 0xf8e <__addsf3x+0x98>
     f34:	1a 16       	cp	r1, r26
     f36:	f0 40       	sbci	r31, 0x00	; 0
     f38:	a2 2f       	mov	r26, r18
     f3a:	23 2f       	mov	r18, r19
     f3c:	34 2f       	mov	r19, r20
     f3e:	44 27       	eor	r20, r20
     f40:	58 5f       	subi	r21, 0xF8	; 248
     f42:	f3 cf       	rjmp	.-26     	; 0xf2a <__addsf3x+0x34>
     f44:	46 95       	lsr	r20
     f46:	37 95       	ror	r19
     f48:	27 95       	ror	r18
     f4a:	a7 95       	ror	r26
     f4c:	f0 40       	sbci	r31, 0x00	; 0
     f4e:	53 95       	inc	r21
     f50:	c9 f7       	brne	.-14     	; 0xf44 <__addsf3x+0x4e>
     f52:	7e f4       	brtc	.+30     	; 0xf72 <__addsf3x+0x7c>
     f54:	1f 16       	cp	r1, r31
     f56:	ba 0b       	sbc	r27, r26
     f58:	62 0b       	sbc	r22, r18
     f5a:	73 0b       	sbc	r23, r19
     f5c:	84 0b       	sbc	r24, r20
     f5e:	ba f0       	brmi	.+46     	; 0xf8e <__addsf3x+0x98>
     f60:	91 50       	subi	r25, 0x01	; 1
     f62:	a1 f0       	breq	.+40     	; 0xf8c <__addsf3x+0x96>
     f64:	ff 0f       	add	r31, r31
     f66:	bb 1f       	adc	r27, r27
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	c2 f7       	brpl	.-16     	; 0xf60 <__addsf3x+0x6a>
     f70:	0e c0       	rjmp	.+28     	; 0xf8e <__addsf3x+0x98>
     f72:	ba 0f       	add	r27, r26
     f74:	62 1f       	adc	r22, r18
     f76:	73 1f       	adc	r23, r19
     f78:	84 1f       	adc	r24, r20
     f7a:	48 f4       	brcc	.+18     	; 0xf8e <__addsf3x+0x98>
     f7c:	87 95       	ror	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b7 95       	ror	r27
     f84:	f7 95       	ror	r31
     f86:	9e 3f       	cpi	r25, 0xFE	; 254
     f88:	08 f0       	brcs	.+2      	; 0xf8c <__addsf3x+0x96>
     f8a:	b3 cf       	rjmp	.-154    	; 0xef2 <__addsf3+0x1e>
     f8c:	93 95       	inc	r25
     f8e:	88 0f       	add	r24, r24
     f90:	08 f0       	brcs	.+2      	; 0xf94 <__addsf3x+0x9e>
     f92:	99 27       	eor	r25, r25
     f94:	ee 0f       	add	r30, r30
     f96:	97 95       	ror	r25
     f98:	87 95       	ror	r24
     f9a:	08 95       	ret

00000f9c <__divsf3>:
     f9c:	0c d0       	rcall	.+24     	; 0xfb6 <__divsf3x>
     f9e:	eb c0       	rjmp	.+470    	; 0x1176 <__fp_round>
     fa0:	e3 d0       	rcall	.+454    	; 0x1168 <__fp_pscB>
     fa2:	40 f0       	brcs	.+16     	; 0xfb4 <__divsf3+0x18>
     fa4:	da d0       	rcall	.+436    	; 0x115a <__fp_pscA>
     fa6:	30 f0       	brcs	.+12     	; 0xfb4 <__divsf3+0x18>
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <__divsf3+0x16>
     faa:	5f 3f       	cpi	r21, 0xFF	; 255
     fac:	19 f0       	breq	.+6      	; 0xfb4 <__divsf3+0x18>
     fae:	cc c0       	rjmp	.+408    	; 0x1148 <__fp_inf>
     fb0:	51 11       	cpse	r21, r1
     fb2:	15 c1       	rjmp	.+554    	; 0x11de <__fp_szero>
     fb4:	cf c0       	rjmp	.+414    	; 0x1154 <__fp_nan>

00000fb6 <__divsf3x>:
     fb6:	f0 d0       	rcall	.+480    	; 0x1198 <__fp_split3>
     fb8:	98 f3       	brcs	.-26     	; 0xfa0 <__divsf3+0x4>

00000fba <__divsf3_pse>:
     fba:	99 23       	and	r25, r25
     fbc:	c9 f3       	breq	.-14     	; 0xfb0 <__divsf3+0x14>
     fbe:	55 23       	and	r21, r21
     fc0:	b1 f3       	breq	.-20     	; 0xfae <__divsf3+0x12>
     fc2:	95 1b       	sub	r25, r21
     fc4:	55 0b       	sbc	r21, r21
     fc6:	bb 27       	eor	r27, r27
     fc8:	aa 27       	eor	r26, r26
     fca:	62 17       	cp	r22, r18
     fcc:	73 07       	cpc	r23, r19
     fce:	84 07       	cpc	r24, r20
     fd0:	38 f0       	brcs	.+14     	; 0xfe0 <__divsf3_pse+0x26>
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	22 0f       	add	r18, r18
     fd8:	33 1f       	adc	r19, r19
     fda:	44 1f       	adc	r20, r20
     fdc:	aa 1f       	adc	r26, r26
     fde:	a9 f3       	breq	.-22     	; 0xfca <__divsf3_pse+0x10>
     fe0:	33 d0       	rcall	.+102    	; 0x1048 <__divsf3_pse+0x8e>
     fe2:	0e 2e       	mov	r0, r30
     fe4:	3a f0       	brmi	.+14     	; 0xff4 <__divsf3_pse+0x3a>
     fe6:	e0 e8       	ldi	r30, 0x80	; 128
     fe8:	30 d0       	rcall	.+96     	; 0x104a <__divsf3_pse+0x90>
     fea:	91 50       	subi	r25, 0x01	; 1
     fec:	50 40       	sbci	r21, 0x00	; 0
     fee:	e6 95       	lsr	r30
     ff0:	00 1c       	adc	r0, r0
     ff2:	ca f7       	brpl	.-14     	; 0xfe6 <__divsf3_pse+0x2c>
     ff4:	29 d0       	rcall	.+82     	; 0x1048 <__divsf3_pse+0x8e>
     ff6:	fe 2f       	mov	r31, r30
     ff8:	27 d0       	rcall	.+78     	; 0x1048 <__divsf3_pse+0x8e>
     ffa:	66 0f       	add	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	bb 1f       	adc	r27, r27
    1002:	26 17       	cp	r18, r22
    1004:	37 07       	cpc	r19, r23
    1006:	48 07       	cpc	r20, r24
    1008:	ab 07       	cpc	r26, r27
    100a:	b0 e8       	ldi	r27, 0x80	; 128
    100c:	09 f0       	breq	.+2      	; 0x1010 <__divsf3_pse+0x56>
    100e:	bb 0b       	sbc	r27, r27
    1010:	80 2d       	mov	r24, r0
    1012:	bf 01       	movw	r22, r30
    1014:	ff 27       	eor	r31, r31
    1016:	93 58       	subi	r25, 0x83	; 131
    1018:	5f 4f       	sbci	r21, 0xFF	; 255
    101a:	2a f0       	brmi	.+10     	; 0x1026 <__divsf3_pse+0x6c>
    101c:	9e 3f       	cpi	r25, 0xFE	; 254
    101e:	51 05       	cpc	r21, r1
    1020:	68 f0       	brcs	.+26     	; 0x103c <__divsf3_pse+0x82>
    1022:	92 c0       	rjmp	.+292    	; 0x1148 <__fp_inf>
    1024:	dc c0       	rjmp	.+440    	; 0x11de <__fp_szero>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	ec f3       	brlt	.-6      	; 0x1024 <__divsf3_pse+0x6a>
    102a:	98 3e       	cpi	r25, 0xE8	; 232
    102c:	dc f3       	brlt	.-10     	; 0x1024 <__divsf3_pse+0x6a>
    102e:	86 95       	lsr	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b7 95       	ror	r27
    1036:	f7 95       	ror	r31
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	c9 f7       	brne	.-14     	; 0x102e <__divsf3_pse+0x74>
    103c:	88 0f       	add	r24, r24
    103e:	91 1d       	adc	r25, r1
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	97 f9       	bld	r25, 7
    1046:	08 95       	ret
    1048:	e1 e0       	ldi	r30, 0x01	; 1
    104a:	66 0f       	add	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	bb 1f       	adc	r27, r27
    1052:	62 17       	cp	r22, r18
    1054:	73 07       	cpc	r23, r19
    1056:	84 07       	cpc	r24, r20
    1058:	ba 07       	cpc	r27, r26
    105a:	20 f0       	brcs	.+8      	; 0x1064 <__divsf3_pse+0xaa>
    105c:	62 1b       	sub	r22, r18
    105e:	73 0b       	sbc	r23, r19
    1060:	84 0b       	sbc	r24, r20
    1062:	ba 0b       	sbc	r27, r26
    1064:	ee 1f       	adc	r30, r30
    1066:	88 f7       	brcc	.-30     	; 0x104a <__divsf3_pse+0x90>
    1068:	e0 95       	com	r30
    106a:	08 95       	ret

0000106c <__fixsfsi>:
    106c:	04 d0       	rcall	.+8      	; 0x1076 <__fixunssfsi>
    106e:	68 94       	set
    1070:	b1 11       	cpse	r27, r1
    1072:	b5 c0       	rjmp	.+362    	; 0x11de <__fp_szero>
    1074:	08 95       	ret

00001076 <__fixunssfsi>:
    1076:	98 d0       	rcall	.+304    	; 0x11a8 <__fp_splitA>
    1078:	88 f0       	brcs	.+34     	; 0x109c <__fixunssfsi+0x26>
    107a:	9f 57       	subi	r25, 0x7F	; 127
    107c:	90 f0       	brcs	.+36     	; 0x10a2 <__fixunssfsi+0x2c>
    107e:	b9 2f       	mov	r27, r25
    1080:	99 27       	eor	r25, r25
    1082:	b7 51       	subi	r27, 0x17	; 23
    1084:	a0 f0       	brcs	.+40     	; 0x10ae <__fixunssfsi+0x38>
    1086:	d1 f0       	breq	.+52     	; 0x10bc <__fixunssfsi+0x46>
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	1a f0       	brmi	.+6      	; 0x1098 <__fixunssfsi+0x22>
    1092:	ba 95       	dec	r27
    1094:	c9 f7       	brne	.-14     	; 0x1088 <__fixunssfsi+0x12>
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <__fixunssfsi+0x46>
    1098:	b1 30       	cpi	r27, 0x01	; 1
    109a:	81 f0       	breq	.+32     	; 0x10bc <__fixunssfsi+0x46>
    109c:	9f d0       	rcall	.+318    	; 0x11dc <__fp_zero>
    109e:	b1 e0       	ldi	r27, 0x01	; 1
    10a0:	08 95       	ret
    10a2:	9c c0       	rjmp	.+312    	; 0x11dc <__fp_zero>
    10a4:	67 2f       	mov	r22, r23
    10a6:	78 2f       	mov	r23, r24
    10a8:	88 27       	eor	r24, r24
    10aa:	b8 5f       	subi	r27, 0xF8	; 248
    10ac:	39 f0       	breq	.+14     	; 0x10bc <__fixunssfsi+0x46>
    10ae:	b9 3f       	cpi	r27, 0xF9	; 249
    10b0:	cc f3       	brlt	.-14     	; 0x10a4 <__fixunssfsi+0x2e>
    10b2:	86 95       	lsr	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	b3 95       	inc	r27
    10ba:	d9 f7       	brne	.-10     	; 0x10b2 <__fixunssfsi+0x3c>
    10bc:	3e f4       	brtc	.+14     	; 0x10cc <__fixunssfsi+0x56>
    10be:	90 95       	com	r25
    10c0:	80 95       	com	r24
    10c2:	70 95       	com	r23
    10c4:	61 95       	neg	r22
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	08 95       	ret

000010ce <__floatunsisf>:
    10ce:	e8 94       	clt
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <__floatsisf+0x12>

000010d2 <__floatsisf>:
    10d2:	97 fb       	bst	r25, 7
    10d4:	3e f4       	brtc	.+14     	; 0x10e4 <__floatsisf+0x12>
    10d6:	90 95       	com	r25
    10d8:	80 95       	com	r24
    10da:	70 95       	com	r23
    10dc:	61 95       	neg	r22
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	8f 4f       	sbci	r24, 0xFF	; 255
    10e2:	9f 4f       	sbci	r25, 0xFF	; 255
    10e4:	99 23       	and	r25, r25
    10e6:	a9 f0       	breq	.+42     	; 0x1112 <__floatsisf+0x40>
    10e8:	f9 2f       	mov	r31, r25
    10ea:	96 e9       	ldi	r25, 0x96	; 150
    10ec:	bb 27       	eor	r27, r27
    10ee:	93 95       	inc	r25
    10f0:	f6 95       	lsr	r31
    10f2:	87 95       	ror	r24
    10f4:	77 95       	ror	r23
    10f6:	67 95       	ror	r22
    10f8:	b7 95       	ror	r27
    10fa:	f1 11       	cpse	r31, r1
    10fc:	f8 cf       	rjmp	.-16     	; 0x10ee <__floatsisf+0x1c>
    10fe:	fa f4       	brpl	.+62     	; 0x113e <__floatsisf+0x6c>
    1100:	bb 0f       	add	r27, r27
    1102:	11 f4       	brne	.+4      	; 0x1108 <__floatsisf+0x36>
    1104:	60 ff       	sbrs	r22, 0
    1106:	1b c0       	rjmp	.+54     	; 0x113e <__floatsisf+0x6c>
    1108:	6f 5f       	subi	r22, 0xFF	; 255
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	16 c0       	rjmp	.+44     	; 0x113e <__floatsisf+0x6c>
    1112:	88 23       	and	r24, r24
    1114:	11 f0       	breq	.+4      	; 0x111a <__floatsisf+0x48>
    1116:	96 e9       	ldi	r25, 0x96	; 150
    1118:	11 c0       	rjmp	.+34     	; 0x113c <__floatsisf+0x6a>
    111a:	77 23       	and	r23, r23
    111c:	21 f0       	breq	.+8      	; 0x1126 <__floatsisf+0x54>
    111e:	9e e8       	ldi	r25, 0x8E	; 142
    1120:	87 2f       	mov	r24, r23
    1122:	76 2f       	mov	r23, r22
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <__floatsisf+0x5e>
    1126:	66 23       	and	r22, r22
    1128:	71 f0       	breq	.+28     	; 0x1146 <__floatsisf+0x74>
    112a:	96 e8       	ldi	r25, 0x86	; 134
    112c:	86 2f       	mov	r24, r22
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	2a f0       	brmi	.+10     	; 0x113e <__floatsisf+0x6c>
    1134:	9a 95       	dec	r25
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	da f7       	brpl	.-10     	; 0x1134 <__floatsisf+0x62>
    113e:	88 0f       	add	r24, r24
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	97 f9       	bld	r25, 7
    1146:	08 95       	ret

00001148 <__fp_inf>:
    1148:	97 f9       	bld	r25, 7
    114a:	9f 67       	ori	r25, 0x7F	; 127
    114c:	80 e8       	ldi	r24, 0x80	; 128
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	08 95       	ret

00001154 <__fp_nan>:
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	80 ec       	ldi	r24, 0xC0	; 192
    1158:	08 95       	ret

0000115a <__fp_pscA>:
    115a:	00 24       	eor	r0, r0
    115c:	0a 94       	dec	r0
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	18 06       	cpc	r1, r24
    1164:	09 06       	cpc	r0, r25
    1166:	08 95       	ret

00001168 <__fp_pscB>:
    1168:	00 24       	eor	r0, r0
    116a:	0a 94       	dec	r0
    116c:	12 16       	cp	r1, r18
    116e:	13 06       	cpc	r1, r19
    1170:	14 06       	cpc	r1, r20
    1172:	05 06       	cpc	r0, r21
    1174:	08 95       	ret

00001176 <__fp_round>:
    1176:	09 2e       	mov	r0, r25
    1178:	03 94       	inc	r0
    117a:	00 0c       	add	r0, r0
    117c:	11 f4       	brne	.+4      	; 0x1182 <__fp_round+0xc>
    117e:	88 23       	and	r24, r24
    1180:	52 f0       	brmi	.+20     	; 0x1196 <__fp_round+0x20>
    1182:	bb 0f       	add	r27, r27
    1184:	40 f4       	brcc	.+16     	; 0x1196 <__fp_round+0x20>
    1186:	bf 2b       	or	r27, r31
    1188:	11 f4       	brne	.+4      	; 0x118e <__fp_round+0x18>
    118a:	60 ff       	sbrs	r22, 0
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <__fp_round+0x20>
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	8f 4f       	sbci	r24, 0xFF	; 255
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	08 95       	ret

00001198 <__fp_split3>:
    1198:	57 fd       	sbrc	r21, 7
    119a:	90 58       	subi	r25, 0x80	; 128
    119c:	44 0f       	add	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	59 f0       	breq	.+22     	; 0x11b8 <__fp_splitA+0x10>
    11a2:	5f 3f       	cpi	r21, 0xFF	; 255
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <__fp_splitA+0x1a>
    11a6:	47 95       	ror	r20

000011a8 <__fp_splitA>:
    11a8:	88 0f       	add	r24, r24
    11aa:	97 fb       	bst	r25, 7
    11ac:	99 1f       	adc	r25, r25
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <__fp_splitA+0x20>
    11b0:	9f 3f       	cpi	r25, 0xFF	; 255
    11b2:	79 f0       	breq	.+30     	; 0x11d2 <__fp_splitA+0x2a>
    11b4:	87 95       	ror	r24
    11b6:	08 95       	ret
    11b8:	12 16       	cp	r1, r18
    11ba:	13 06       	cpc	r1, r19
    11bc:	14 06       	cpc	r1, r20
    11be:	55 1f       	adc	r21, r21
    11c0:	f2 cf       	rjmp	.-28     	; 0x11a6 <__fp_split3+0xe>
    11c2:	46 95       	lsr	r20
    11c4:	f1 df       	rcall	.-30     	; 0x11a8 <__fp_splitA>
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <__fp_splitA+0x30>
    11c8:	16 16       	cp	r1, r22
    11ca:	17 06       	cpc	r1, r23
    11cc:	18 06       	cpc	r1, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	f1 cf       	rjmp	.-30     	; 0x11b4 <__fp_splitA+0xc>
    11d2:	86 95       	lsr	r24
    11d4:	71 05       	cpc	r23, r1
    11d6:	61 05       	cpc	r22, r1
    11d8:	08 94       	sec
    11da:	08 95       	ret

000011dc <__fp_zero>:
    11dc:	e8 94       	clt

000011de <__fp_szero>:
    11de:	bb 27       	eor	r27, r27
    11e0:	66 27       	eor	r22, r22
    11e2:	77 27       	eor	r23, r23
    11e4:	cb 01       	movw	r24, r22
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret

000011ea <__mulsf3>:
    11ea:	0b d0       	rcall	.+22     	; 0x1202 <__mulsf3x>
    11ec:	c4 cf       	rjmp	.-120    	; 0x1176 <__fp_round>
    11ee:	b5 df       	rcall	.-150    	; 0x115a <__fp_pscA>
    11f0:	28 f0       	brcs	.+10     	; 0x11fc <__mulsf3+0x12>
    11f2:	ba df       	rcall	.-140    	; 0x1168 <__fp_pscB>
    11f4:	18 f0       	brcs	.+6      	; 0x11fc <__mulsf3+0x12>
    11f6:	95 23       	and	r25, r21
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__mulsf3+0x12>
    11fa:	a6 cf       	rjmp	.-180    	; 0x1148 <__fp_inf>
    11fc:	ab cf       	rjmp	.-170    	; 0x1154 <__fp_nan>
    11fe:	11 24       	eor	r1, r1
    1200:	ee cf       	rjmp	.-36     	; 0x11de <__fp_szero>

00001202 <__mulsf3x>:
    1202:	ca df       	rcall	.-108    	; 0x1198 <__fp_split3>
    1204:	a0 f3       	brcs	.-24     	; 0x11ee <__mulsf3+0x4>

00001206 <__mulsf3_pse>:
    1206:	95 9f       	mul	r25, r21
    1208:	d1 f3       	breq	.-12     	; 0x11fe <__mulsf3+0x14>
    120a:	95 0f       	add	r25, r21
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	55 1f       	adc	r21, r21
    1210:	62 9f       	mul	r22, r18
    1212:	f0 01       	movw	r30, r0
    1214:	72 9f       	mul	r23, r18
    1216:	bb 27       	eor	r27, r27
    1218:	f0 0d       	add	r31, r0
    121a:	b1 1d       	adc	r27, r1
    121c:	63 9f       	mul	r22, r19
    121e:	aa 27       	eor	r26, r26
    1220:	f0 0d       	add	r31, r0
    1222:	b1 1d       	adc	r27, r1
    1224:	aa 1f       	adc	r26, r26
    1226:	64 9f       	mul	r22, r20
    1228:	66 27       	eor	r22, r22
    122a:	b0 0d       	add	r27, r0
    122c:	a1 1d       	adc	r26, r1
    122e:	66 1f       	adc	r22, r22
    1230:	82 9f       	mul	r24, r18
    1232:	22 27       	eor	r18, r18
    1234:	b0 0d       	add	r27, r0
    1236:	a1 1d       	adc	r26, r1
    1238:	62 1f       	adc	r22, r18
    123a:	73 9f       	mul	r23, r19
    123c:	b0 0d       	add	r27, r0
    123e:	a1 1d       	adc	r26, r1
    1240:	62 1f       	adc	r22, r18
    1242:	83 9f       	mul	r24, r19
    1244:	a0 0d       	add	r26, r0
    1246:	61 1d       	adc	r22, r1
    1248:	22 1f       	adc	r18, r18
    124a:	74 9f       	mul	r23, r20
    124c:	33 27       	eor	r19, r19
    124e:	a0 0d       	add	r26, r0
    1250:	61 1d       	adc	r22, r1
    1252:	23 1f       	adc	r18, r19
    1254:	84 9f       	mul	r24, r20
    1256:	60 0d       	add	r22, r0
    1258:	21 1d       	adc	r18, r1
    125a:	82 2f       	mov	r24, r18
    125c:	76 2f       	mov	r23, r22
    125e:	6a 2f       	mov	r22, r26
    1260:	11 24       	eor	r1, r1
    1262:	9f 57       	subi	r25, 0x7F	; 127
    1264:	50 40       	sbci	r21, 0x00	; 0
    1266:	8a f0       	brmi	.+34     	; 0x128a <__mulsf3_pse+0x84>
    1268:	e1 f0       	breq	.+56     	; 0x12a2 <__mulsf3_pse+0x9c>
    126a:	88 23       	and	r24, r24
    126c:	4a f0       	brmi	.+18     	; 0x1280 <__mulsf3_pse+0x7a>
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	bb 1f       	adc	r27, r27
    1274:	66 1f       	adc	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	91 50       	subi	r25, 0x01	; 1
    127c:	50 40       	sbci	r21, 0x00	; 0
    127e:	a9 f7       	brne	.-22     	; 0x126a <__mulsf3_pse+0x64>
    1280:	9e 3f       	cpi	r25, 0xFE	; 254
    1282:	51 05       	cpc	r21, r1
    1284:	70 f0       	brcs	.+28     	; 0x12a2 <__mulsf3_pse+0x9c>
    1286:	60 cf       	rjmp	.-320    	; 0x1148 <__fp_inf>
    1288:	aa cf       	rjmp	.-172    	; 0x11de <__fp_szero>
    128a:	5f 3f       	cpi	r21, 0xFF	; 255
    128c:	ec f3       	brlt	.-6      	; 0x1288 <__mulsf3_pse+0x82>
    128e:	98 3e       	cpi	r25, 0xE8	; 232
    1290:	dc f3       	brlt	.-10     	; 0x1288 <__mulsf3_pse+0x82>
    1292:	86 95       	lsr	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	b7 95       	ror	r27
    129a:	f7 95       	ror	r31
    129c:	e7 95       	ror	r30
    129e:	9f 5f       	subi	r25, 0xFF	; 255
    12a0:	c1 f7       	brne	.-16     	; 0x1292 <__mulsf3_pse+0x8c>
    12a2:	fe 2b       	or	r31, r30
    12a4:	88 0f       	add	r24, r24
    12a6:	91 1d       	adc	r25, r1
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	97 f9       	bld	r25, 7
    12ae:	08 95       	ret

000012b0 <__divmodhi4>:
    12b0:	97 fb       	bst	r25, 7
    12b2:	07 2e       	mov	r0, r23
    12b4:	16 f4       	brtc	.+4      	; 0x12ba <__divmodhi4+0xa>
    12b6:	00 94       	com	r0
    12b8:	07 d0       	rcall	.+14     	; 0x12c8 <__divmodhi4_neg1>
    12ba:	77 fd       	sbrc	r23, 7
    12bc:	09 d0       	rcall	.+18     	; 0x12d0 <__divmodhi4_neg2>
    12be:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__udivmodhi4>
    12c2:	07 fc       	sbrc	r0, 7
    12c4:	05 d0       	rcall	.+10     	; 0x12d0 <__divmodhi4_neg2>
    12c6:	3e f4       	brtc	.+14     	; 0x12d6 <__divmodhi4_exit>

000012c8 <__divmodhi4_neg1>:
    12c8:	90 95       	com	r25
    12ca:	81 95       	neg	r24
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__divmodhi4_neg2>:
    12d0:	70 95       	com	r23
    12d2:	61 95       	neg	r22
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255

000012d6 <__divmodhi4_exit>:
    12d6:	08 95       	ret

000012d8 <__udivmodhi4>:
    12d8:	aa 1b       	sub	r26, r26
    12da:	bb 1b       	sub	r27, r27
    12dc:	51 e1       	ldi	r21, 0x11	; 17
    12de:	07 c0       	rjmp	.+14     	; 0x12ee <__udivmodhi4_ep>

000012e0 <__udivmodhi4_loop>:
    12e0:	aa 1f       	adc	r26, r26
    12e2:	bb 1f       	adc	r27, r27
    12e4:	a6 17       	cp	r26, r22
    12e6:	b7 07       	cpc	r27, r23
    12e8:	10 f0       	brcs	.+4      	; 0x12ee <__udivmodhi4_ep>
    12ea:	a6 1b       	sub	r26, r22
    12ec:	b7 0b       	sbc	r27, r23

000012ee <__udivmodhi4_ep>:
    12ee:	88 1f       	adc	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	5a 95       	dec	r21
    12f4:	a9 f7       	brne	.-22     	; 0x12e0 <__udivmodhi4_loop>
    12f6:	80 95       	com	r24
    12f8:	90 95       	com	r25
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	08 95       	ret

00001300 <do_rand>:
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	ec 01       	movw	r28, r24
    1316:	68 81       	ld	r22, Y
    1318:	79 81       	ldd	r23, Y+1	; 0x01
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	61 15       	cp	r22, r1
    1320:	71 05       	cpc	r23, r1
    1322:	81 05       	cpc	r24, r1
    1324:	91 05       	cpc	r25, r1
    1326:	21 f4       	brne	.+8      	; 0x1330 <do_rand+0x30>
    1328:	64 e2       	ldi	r22, 0x24	; 36
    132a:	79 ed       	ldi	r23, 0xD9	; 217
    132c:	8b e5       	ldi	r24, 0x5B	; 91
    132e:	97 e0       	ldi	r25, 0x07	; 7
    1330:	2d e1       	ldi	r18, 0x1D	; 29
    1332:	33 ef       	ldi	r19, 0xF3	; 243
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__divmodsi4>
    133c:	49 01       	movw	r8, r18
    133e:	5a 01       	movw	r10, r20
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	a7 ea       	ldi	r26, 0xA7	; 167
    1346:	b1 e4       	ldi	r27, 0x41	; 65
    1348:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__muluhisi3>
    134c:	6b 01       	movw	r12, r22
    134e:	7c 01       	movw	r14, r24
    1350:	ac ee       	ldi	r26, 0xEC	; 236
    1352:	b4 ef       	ldi	r27, 0xF4	; 244
    1354:	a5 01       	movw	r20, r10
    1356:	94 01       	movw	r18, r8
    1358:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__mulohisi3>
    135c:	c6 0e       	add	r12, r22
    135e:	d7 1e       	adc	r13, r23
    1360:	e8 1e       	adc	r14, r24
    1362:	f9 1e       	adc	r15, r25
    1364:	f7 fe       	sbrs	r15, 7
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <do_rand+0x74>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	c8 1a       	sub	r12, r24
    136c:	d1 08       	sbc	r13, r1
    136e:	e1 08       	sbc	r14, r1
    1370:	80 e8       	ldi	r24, 0x80	; 128
    1372:	f8 0a       	sbc	r15, r24
    1374:	c8 82       	st	Y, r12
    1376:	d9 82       	std	Y+1, r13	; 0x01
    1378:	ea 82       	std	Y+2, r14	; 0x02
    137a:	fb 82       	std	Y+3, r15	; 0x03
    137c:	c6 01       	movw	r24, r12
    137e:	9f 77       	andi	r25, 0x7F	; 127
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	9f 90       	pop	r9
    1392:	8f 90       	pop	r8
    1394:	08 95       	ret

00001396 <rand_r>:
    1396:	0e 94 80 09 	call	0x1300	; 0x1300 <do_rand>
    139a:	08 95       	ret

0000139c <rand>:
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0e 94 80 09 	call	0x1300	; 0x1300 <do_rand>
    13a4:	08 95       	ret

000013a6 <srand>:
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	80 93 00 01 	sts	0x0100, r24
    13ae:	90 93 01 01 	sts	0x0101, r25
    13b2:	a0 93 02 01 	sts	0x0102, r26
    13b6:	b0 93 03 01 	sts	0x0103, r27
    13ba:	08 95       	ret

000013bc <fdevopen>:
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	ec 01       	movw	r28, r24
    13c6:	8b 01       	movw	r16, r22
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	31 f4       	brne	.+12     	; 0x13d8 <fdevopen+0x1c>
    13cc:	61 15       	cp	r22, r1
    13ce:	71 05       	cpc	r23, r1
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <fdevopen+0x1c>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	38 c0       	rjmp	.+112    	; 0x1448 <fdevopen+0x8c>
    13d8:	6e e0       	ldi	r22, 0x0E	; 14
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <calloc>
    13e4:	fc 01       	movw	r30, r24
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	a1 f3       	breq	.-24     	; 0x13d2 <fdevopen+0x16>
    13ea:	80 e8       	ldi	r24, 0x80	; 128
    13ec:	83 83       	std	Z+3, r24	; 0x03
    13ee:	01 15       	cp	r16, r1
    13f0:	11 05       	cpc	r17, r1
    13f2:	71 f0       	breq	.+28     	; 0x1410 <fdevopen+0x54>
    13f4:	13 87       	std	Z+11, r17	; 0x0b
    13f6:	02 87       	std	Z+10, r16	; 0x0a
    13f8:	81 e8       	ldi	r24, 0x81	; 129
    13fa:	83 83       	std	Z+3, r24	; 0x03
    13fc:	80 91 de 04 	lds	r24, 0x04DE
    1400:	90 91 df 04 	lds	r25, 0x04DF
    1404:	89 2b       	or	r24, r25
    1406:	21 f4       	brne	.+8      	; 0x1410 <fdevopen+0x54>
    1408:	f0 93 df 04 	sts	0x04DF, r31
    140c:	e0 93 de 04 	sts	0x04DE, r30
    1410:	20 97       	sbiw	r28, 0x00	; 0
    1412:	c9 f0       	breq	.+50     	; 0x1446 <fdevopen+0x8a>
    1414:	d1 87       	std	Z+9, r29	; 0x09
    1416:	c0 87       	std	Z+8, r28	; 0x08
    1418:	83 81       	ldd	r24, Z+3	; 0x03
    141a:	82 60       	ori	r24, 0x02	; 2
    141c:	83 83       	std	Z+3, r24	; 0x03
    141e:	80 91 e0 04 	lds	r24, 0x04E0
    1422:	90 91 e1 04 	lds	r25, 0x04E1
    1426:	89 2b       	or	r24, r25
    1428:	71 f4       	brne	.+28     	; 0x1446 <fdevopen+0x8a>
    142a:	f0 93 e1 04 	sts	0x04E1, r31
    142e:	e0 93 e0 04 	sts	0x04E0, r30
    1432:	80 91 e2 04 	lds	r24, 0x04E2
    1436:	90 91 e3 04 	lds	r25, 0x04E3
    143a:	89 2b       	or	r24, r25
    143c:	21 f4       	brne	.+8      	; 0x1446 <fdevopen+0x8a>
    143e:	f0 93 e3 04 	sts	0x04E3, r31
    1442:	e0 93 e2 04 	sts	0x04E2, r30
    1446:	cf 01       	movw	r24, r30
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	08 95       	ret

00001452 <printf>:
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e2       	ldi	r30, 0x2F	; 47
    1458:	fa e0       	ldi	r31, 0x0A	; 10
    145a:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__prologue_saves__+0x20>
    145e:	fe 01       	movw	r30, r28
    1460:	35 96       	adiw	r30, 0x05	; 5
    1462:	61 91       	ld	r22, Z+
    1464:	71 91       	ld	r23, Z+
    1466:	af 01       	movw	r20, r30
    1468:	80 91 e0 04 	lds	r24, 0x04E0
    146c:	90 91 e1 04 	lds	r25, 0x04E1
    1470:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <vfprintf>
    1474:	e2 e0       	ldi	r30, 0x02	; 2
    1476:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__epilogue_restores__+0x20>

0000147a <puts>:
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	e0 91 e0 04 	lds	r30, 0x04E0
    1486:	f0 91 e1 04 	lds	r31, 0x04E1
    148a:	23 81       	ldd	r18, Z+3	; 0x03
    148c:	21 ff       	sbrs	r18, 1
    148e:	1b c0       	rjmp	.+54     	; 0x14c6 <puts+0x4c>
    1490:	ec 01       	movw	r28, r24
    1492:	00 e0       	ldi	r16, 0x00	; 0
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	89 91       	ld	r24, Y+
    1498:	60 91 e0 04 	lds	r22, 0x04E0
    149c:	70 91 e1 04 	lds	r23, 0x04E1
    14a0:	db 01       	movw	r26, r22
    14a2:	18 96       	adiw	r26, 0x08	; 8
    14a4:	ed 91       	ld	r30, X+
    14a6:	fc 91       	ld	r31, X
    14a8:	19 97       	sbiw	r26, 0x09	; 9
    14aa:	88 23       	and	r24, r24
    14ac:	31 f0       	breq	.+12     	; 0x14ba <puts+0x40>
    14ae:	09 95       	icall
    14b0:	89 2b       	or	r24, r25
    14b2:	89 f3       	breq	.-30     	; 0x1496 <puts+0x1c>
    14b4:	0f ef       	ldi	r16, 0xFF	; 255
    14b6:	1f ef       	ldi	r17, 0xFF	; 255
    14b8:	ee cf       	rjmp	.-36     	; 0x1496 <puts+0x1c>
    14ba:	8a e0       	ldi	r24, 0x0A	; 10
    14bc:	09 95       	icall
    14be:	89 2b       	or	r24, r25
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <puts+0x4c>
    14c2:	c8 01       	movw	r24, r16
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <puts+0x50>
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <vfprintf>:
    14d4:	ac e0       	ldi	r26, 0x0C	; 12
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e0 e7       	ldi	r30, 0x70	; 112
    14da:	fa e0       	ldi	r31, 0x0A	; 10
    14dc:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__prologue_saves__>
    14e0:	7c 01       	movw	r14, r24
    14e2:	6b 01       	movw	r12, r22
    14e4:	8a 01       	movw	r16, r20
    14e6:	fc 01       	movw	r30, r24
    14e8:	17 82       	std	Z+7, r1	; 0x07
    14ea:	16 82       	std	Z+6, r1	; 0x06
    14ec:	83 81       	ldd	r24, Z+3	; 0x03
    14ee:	81 ff       	sbrs	r24, 1
    14f0:	bd c1       	rjmp	.+890    	; 0x186c <vfprintf+0x398>
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	4c 01       	movw	r8, r24
    14f8:	f7 01       	movw	r30, r14
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	f6 01       	movw	r30, r12
    14fe:	93 fd       	sbrc	r25, 3
    1500:	85 91       	lpm	r24, Z+
    1502:	93 ff       	sbrs	r25, 3
    1504:	81 91       	ld	r24, Z+
    1506:	6f 01       	movw	r12, r30
    1508:	88 23       	and	r24, r24
    150a:	09 f4       	brne	.+2      	; 0x150e <vfprintf+0x3a>
    150c:	ab c1       	rjmp	.+854    	; 0x1864 <vfprintf+0x390>
    150e:	85 32       	cpi	r24, 0x25	; 37
    1510:	39 f4       	brne	.+14     	; 0x1520 <vfprintf+0x4c>
    1512:	93 fd       	sbrc	r25, 3
    1514:	85 91       	lpm	r24, Z+
    1516:	93 ff       	sbrs	r25, 3
    1518:	81 91       	ld	r24, Z+
    151a:	6f 01       	movw	r12, r30
    151c:	85 32       	cpi	r24, 0x25	; 37
    151e:	29 f4       	brne	.+10     	; 0x152a <vfprintf+0x56>
    1520:	b7 01       	movw	r22, r14
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    1528:	e7 cf       	rjmp	.-50     	; 0x14f8 <vfprintf+0x24>
    152a:	51 2c       	mov	r5, r1
    152c:	31 2c       	mov	r3, r1
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	20 32       	cpi	r18, 0x20	; 32
    1532:	a0 f4       	brcc	.+40     	; 0x155c <vfprintf+0x88>
    1534:	8b 32       	cpi	r24, 0x2B	; 43
    1536:	69 f0       	breq	.+26     	; 0x1552 <vfprintf+0x7e>
    1538:	30 f4       	brcc	.+12     	; 0x1546 <vfprintf+0x72>
    153a:	80 32       	cpi	r24, 0x20	; 32
    153c:	59 f0       	breq	.+22     	; 0x1554 <vfprintf+0x80>
    153e:	83 32       	cpi	r24, 0x23	; 35
    1540:	69 f4       	brne	.+26     	; 0x155c <vfprintf+0x88>
    1542:	20 61       	ori	r18, 0x10	; 16
    1544:	2c c0       	rjmp	.+88     	; 0x159e <vfprintf+0xca>
    1546:	8d 32       	cpi	r24, 0x2D	; 45
    1548:	39 f0       	breq	.+14     	; 0x1558 <vfprintf+0x84>
    154a:	80 33       	cpi	r24, 0x30	; 48
    154c:	39 f4       	brne	.+14     	; 0x155c <vfprintf+0x88>
    154e:	21 60       	ori	r18, 0x01	; 1
    1550:	26 c0       	rjmp	.+76     	; 0x159e <vfprintf+0xca>
    1552:	22 60       	ori	r18, 0x02	; 2
    1554:	24 60       	ori	r18, 0x04	; 4
    1556:	23 c0       	rjmp	.+70     	; 0x159e <vfprintf+0xca>
    1558:	28 60       	ori	r18, 0x08	; 8
    155a:	21 c0       	rjmp	.+66     	; 0x159e <vfprintf+0xca>
    155c:	27 fd       	sbrc	r18, 7
    155e:	27 c0       	rjmp	.+78     	; 0x15ae <vfprintf+0xda>
    1560:	30 ed       	ldi	r19, 0xD0	; 208
    1562:	38 0f       	add	r19, r24
    1564:	3a 30       	cpi	r19, 0x0A	; 10
    1566:	78 f4       	brcc	.+30     	; 0x1586 <vfprintf+0xb2>
    1568:	26 ff       	sbrs	r18, 6
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <vfprintf+0xa4>
    156c:	fa e0       	ldi	r31, 0x0A	; 10
    156e:	5f 9e       	mul	r5, r31
    1570:	30 0d       	add	r19, r0
    1572:	11 24       	eor	r1, r1
    1574:	53 2e       	mov	r5, r19
    1576:	13 c0       	rjmp	.+38     	; 0x159e <vfprintf+0xca>
    1578:	8a e0       	ldi	r24, 0x0A	; 10
    157a:	38 9e       	mul	r3, r24
    157c:	30 0d       	add	r19, r0
    157e:	11 24       	eor	r1, r1
    1580:	33 2e       	mov	r3, r19
    1582:	20 62       	ori	r18, 0x20	; 32
    1584:	0c c0       	rjmp	.+24     	; 0x159e <vfprintf+0xca>
    1586:	8e 32       	cpi	r24, 0x2E	; 46
    1588:	21 f4       	brne	.+8      	; 0x1592 <vfprintf+0xbe>
    158a:	26 fd       	sbrc	r18, 6
    158c:	6b c1       	rjmp	.+726    	; 0x1864 <vfprintf+0x390>
    158e:	20 64       	ori	r18, 0x40	; 64
    1590:	06 c0       	rjmp	.+12     	; 0x159e <vfprintf+0xca>
    1592:	8c 36       	cpi	r24, 0x6C	; 108
    1594:	11 f4       	brne	.+4      	; 0x159a <vfprintf+0xc6>
    1596:	20 68       	ori	r18, 0x80	; 128
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0xca>
    159a:	88 36       	cpi	r24, 0x68	; 104
    159c:	41 f4       	brne	.+16     	; 0x15ae <vfprintf+0xda>
    159e:	f6 01       	movw	r30, r12
    15a0:	93 fd       	sbrc	r25, 3
    15a2:	85 91       	lpm	r24, Z+
    15a4:	93 ff       	sbrs	r25, 3
    15a6:	81 91       	ld	r24, Z+
    15a8:	6f 01       	movw	r12, r30
    15aa:	81 11       	cpse	r24, r1
    15ac:	c1 cf       	rjmp	.-126    	; 0x1530 <vfprintf+0x5c>
    15ae:	98 2f       	mov	r25, r24
    15b0:	9f 7d       	andi	r25, 0xDF	; 223
    15b2:	95 54       	subi	r25, 0x45	; 69
    15b4:	93 30       	cpi	r25, 0x03	; 3
    15b6:	28 f4       	brcc	.+10     	; 0x15c2 <vfprintf+0xee>
    15b8:	0c 5f       	subi	r16, 0xFC	; 252
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	ff e3       	ldi	r31, 0x3F	; 63
    15be:	f9 83       	std	Y+1, r31	; 0x01
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <vfprintf+0x108>
    15c2:	83 36       	cpi	r24, 0x63	; 99
    15c4:	31 f0       	breq	.+12     	; 0x15d2 <vfprintf+0xfe>
    15c6:	83 37       	cpi	r24, 0x73	; 115
    15c8:	71 f0       	breq	.+28     	; 0x15e6 <vfprintf+0x112>
    15ca:	83 35       	cpi	r24, 0x53	; 83
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <vfprintf+0xfc>
    15ce:	5b c0       	rjmp	.+182    	; 0x1686 <vfprintf+0x1b2>
    15d0:	22 c0       	rjmp	.+68     	; 0x1616 <vfprintf+0x142>
    15d2:	f8 01       	movw	r30, r16
    15d4:	80 81       	ld	r24, Z
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0e 5f       	subi	r16, 0xFE	; 254
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	44 24       	eor	r4, r4
    15de:	43 94       	inc	r4
    15e0:	51 2c       	mov	r5, r1
    15e2:	54 01       	movw	r10, r8
    15e4:	15 c0       	rjmp	.+42     	; 0x1610 <vfprintf+0x13c>
    15e6:	38 01       	movw	r6, r16
    15e8:	f2 e0       	ldi	r31, 0x02	; 2
    15ea:	6f 0e       	add	r6, r31
    15ec:	71 1c       	adc	r7, r1
    15ee:	f8 01       	movw	r30, r16
    15f0:	a0 80       	ld	r10, Z
    15f2:	b1 80       	ldd	r11, Z+1	; 0x01
    15f4:	26 ff       	sbrs	r18, 6
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <vfprintf+0x12a>
    15f8:	65 2d       	mov	r22, r5
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x12e>
    15fe:	6f ef       	ldi	r22, 0xFF	; 255
    1600:	7f ef       	ldi	r23, 0xFF	; 255
    1602:	c5 01       	movw	r24, r10
    1604:	2c 87       	std	Y+12, r18	; 0x0c
    1606:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <strnlen>
    160a:	2c 01       	movw	r4, r24
    160c:	83 01       	movw	r16, r6
    160e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1610:	2f 77       	andi	r18, 0x7F	; 127
    1612:	22 2e       	mov	r2, r18
    1614:	17 c0       	rjmp	.+46     	; 0x1644 <vfprintf+0x170>
    1616:	38 01       	movw	r6, r16
    1618:	f2 e0       	ldi	r31, 0x02	; 2
    161a:	6f 0e       	add	r6, r31
    161c:	71 1c       	adc	r7, r1
    161e:	f8 01       	movw	r30, r16
    1620:	a0 80       	ld	r10, Z
    1622:	b1 80       	ldd	r11, Z+1	; 0x01
    1624:	26 ff       	sbrs	r18, 6
    1626:	03 c0       	rjmp	.+6      	; 0x162e <vfprintf+0x15a>
    1628:	65 2d       	mov	r22, r5
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x15e>
    162e:	6f ef       	ldi	r22, 0xFF	; 255
    1630:	7f ef       	ldi	r23, 0xFF	; 255
    1632:	c5 01       	movw	r24, r10
    1634:	2c 87       	std	Y+12, r18	; 0x0c
    1636:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <strnlen_P>
    163a:	2c 01       	movw	r4, r24
    163c:	2c 85       	ldd	r18, Y+12	; 0x0c
    163e:	20 68       	ori	r18, 0x80	; 128
    1640:	22 2e       	mov	r2, r18
    1642:	83 01       	movw	r16, r6
    1644:	23 fc       	sbrc	r2, 3
    1646:	1b c0       	rjmp	.+54     	; 0x167e <vfprintf+0x1aa>
    1648:	83 2d       	mov	r24, r3
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	48 16       	cp	r4, r24
    164e:	59 06       	cpc	r5, r25
    1650:	b0 f4       	brcc	.+44     	; 0x167e <vfprintf+0x1aa>
    1652:	b7 01       	movw	r22, r14
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    165c:	3a 94       	dec	r3
    165e:	f4 cf       	rjmp	.-24     	; 0x1648 <vfprintf+0x174>
    1660:	f5 01       	movw	r30, r10
    1662:	27 fc       	sbrc	r2, 7
    1664:	85 91       	lpm	r24, Z+
    1666:	27 fe       	sbrs	r2, 7
    1668:	81 91       	ld	r24, Z+
    166a:	5f 01       	movw	r10, r30
    166c:	b7 01       	movw	r22, r14
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    1674:	31 10       	cpse	r3, r1
    1676:	3a 94       	dec	r3
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	4f 1a       	sub	r4, r31
    167c:	51 08       	sbc	r5, r1
    167e:	41 14       	cp	r4, r1
    1680:	51 04       	cpc	r5, r1
    1682:	71 f7       	brne	.-36     	; 0x1660 <vfprintf+0x18c>
    1684:	e5 c0       	rjmp	.+458    	; 0x1850 <vfprintf+0x37c>
    1686:	84 36       	cpi	r24, 0x64	; 100
    1688:	11 f0       	breq	.+4      	; 0x168e <vfprintf+0x1ba>
    168a:	89 36       	cpi	r24, 0x69	; 105
    168c:	39 f5       	brne	.+78     	; 0x16dc <vfprintf+0x208>
    168e:	f8 01       	movw	r30, r16
    1690:	27 ff       	sbrs	r18, 7
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <vfprintf+0x1ce>
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	0c 5f       	subi	r16, 0xFC	; 252
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <vfprintf+0x1de>
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	88 27       	eor	r24, r24
    16a8:	77 fd       	sbrc	r23, 7
    16aa:	80 95       	com	r24
    16ac:	98 2f       	mov	r25, r24
    16ae:	0e 5f       	subi	r16, 0xFE	; 254
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	2f 76       	andi	r18, 0x6F	; 111
    16b4:	b2 2e       	mov	r11, r18
    16b6:	97 ff       	sbrs	r25, 7
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <vfprintf+0x1f8>
    16ba:	90 95       	com	r25
    16bc:	80 95       	com	r24
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	8f 4f       	sbci	r24, 0xFF	; 255
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	20 68       	ori	r18, 0x80	; 128
    16ca:	b2 2e       	mov	r11, r18
    16cc:	2a e0       	ldi	r18, 0x0A	; 10
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	a4 01       	movw	r20, r8
    16d2:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__ultoa_invert>
    16d6:	a8 2e       	mov	r10, r24
    16d8:	a8 18       	sub	r10, r8
    16da:	44 c0       	rjmp	.+136    	; 0x1764 <vfprintf+0x290>
    16dc:	85 37       	cpi	r24, 0x75	; 117
    16de:	29 f4       	brne	.+10     	; 0x16ea <vfprintf+0x216>
    16e0:	2f 7e       	andi	r18, 0xEF	; 239
    16e2:	b2 2e       	mov	r11, r18
    16e4:	2a e0       	ldi	r18, 0x0A	; 10
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	25 c0       	rjmp	.+74     	; 0x1734 <vfprintf+0x260>
    16ea:	f2 2f       	mov	r31, r18
    16ec:	f9 7f       	andi	r31, 0xF9	; 249
    16ee:	bf 2e       	mov	r11, r31
    16f0:	8f 36       	cpi	r24, 0x6F	; 111
    16f2:	c1 f0       	breq	.+48     	; 0x1724 <vfprintf+0x250>
    16f4:	18 f4       	brcc	.+6      	; 0x16fc <vfprintf+0x228>
    16f6:	88 35       	cpi	r24, 0x58	; 88
    16f8:	79 f0       	breq	.+30     	; 0x1718 <vfprintf+0x244>
    16fa:	b4 c0       	rjmp	.+360    	; 0x1864 <vfprintf+0x390>
    16fc:	80 37       	cpi	r24, 0x70	; 112
    16fe:	19 f0       	breq	.+6      	; 0x1706 <vfprintf+0x232>
    1700:	88 37       	cpi	r24, 0x78	; 120
    1702:	21 f0       	breq	.+8      	; 0x170c <vfprintf+0x238>
    1704:	af c0       	rjmp	.+350    	; 0x1864 <vfprintf+0x390>
    1706:	2f 2f       	mov	r18, r31
    1708:	20 61       	ori	r18, 0x10	; 16
    170a:	b2 2e       	mov	r11, r18
    170c:	b4 fe       	sbrs	r11, 4
    170e:	0d c0       	rjmp	.+26     	; 0x172a <vfprintf+0x256>
    1710:	8b 2d       	mov	r24, r11
    1712:	84 60       	ori	r24, 0x04	; 4
    1714:	b8 2e       	mov	r11, r24
    1716:	09 c0       	rjmp	.+18     	; 0x172a <vfprintf+0x256>
    1718:	24 ff       	sbrs	r18, 4
    171a:	0a c0       	rjmp	.+20     	; 0x1730 <vfprintf+0x25c>
    171c:	9f 2f       	mov	r25, r31
    171e:	96 60       	ori	r25, 0x06	; 6
    1720:	b9 2e       	mov	r11, r25
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <vfprintf+0x25c>
    1724:	28 e0       	ldi	r18, 0x08	; 8
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <vfprintf+0x260>
    172a:	20 e1       	ldi	r18, 0x10	; 16
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <vfprintf+0x260>
    1730:	20 e1       	ldi	r18, 0x10	; 16
    1732:	32 e0       	ldi	r19, 0x02	; 2
    1734:	f8 01       	movw	r30, r16
    1736:	b7 fe       	sbrs	r11, 7
    1738:	07 c0       	rjmp	.+14     	; 0x1748 <vfprintf+0x274>
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	93 81       	ldd	r25, Z+3	; 0x03
    1742:	0c 5f       	subi	r16, 0xFC	; 252
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <vfprintf+0x280>
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 5f       	subi	r16, 0xFE	; 254
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	a4 01       	movw	r20, r8
    1756:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__ultoa_invert>
    175a:	a8 2e       	mov	r10, r24
    175c:	a8 18       	sub	r10, r8
    175e:	fb 2d       	mov	r31, r11
    1760:	ff 77       	andi	r31, 0x7F	; 127
    1762:	bf 2e       	mov	r11, r31
    1764:	b6 fe       	sbrs	r11, 6
    1766:	0b c0       	rjmp	.+22     	; 0x177e <vfprintf+0x2aa>
    1768:	2b 2d       	mov	r18, r11
    176a:	2e 7f       	andi	r18, 0xFE	; 254
    176c:	a5 14       	cp	r10, r5
    176e:	50 f4       	brcc	.+20     	; 0x1784 <vfprintf+0x2b0>
    1770:	b4 fe       	sbrs	r11, 4
    1772:	0a c0       	rjmp	.+20     	; 0x1788 <vfprintf+0x2b4>
    1774:	b2 fc       	sbrc	r11, 2
    1776:	08 c0       	rjmp	.+16     	; 0x1788 <vfprintf+0x2b4>
    1778:	2b 2d       	mov	r18, r11
    177a:	2e 7e       	andi	r18, 0xEE	; 238
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <vfprintf+0x2b4>
    177e:	7a 2c       	mov	r7, r10
    1780:	2b 2d       	mov	r18, r11
    1782:	03 c0       	rjmp	.+6      	; 0x178a <vfprintf+0x2b6>
    1784:	7a 2c       	mov	r7, r10
    1786:	01 c0       	rjmp	.+2      	; 0x178a <vfprintf+0x2b6>
    1788:	75 2c       	mov	r7, r5
    178a:	24 ff       	sbrs	r18, 4
    178c:	0d c0       	rjmp	.+26     	; 0x17a8 <vfprintf+0x2d4>
    178e:	fe 01       	movw	r30, r28
    1790:	ea 0d       	add	r30, r10
    1792:	f1 1d       	adc	r31, r1
    1794:	80 81       	ld	r24, Z
    1796:	80 33       	cpi	r24, 0x30	; 48
    1798:	11 f4       	brne	.+4      	; 0x179e <vfprintf+0x2ca>
    179a:	29 7e       	andi	r18, 0xE9	; 233
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <vfprintf+0x2dc>
    179e:	22 ff       	sbrs	r18, 2
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <vfprintf+0x2da>
    17a2:	73 94       	inc	r7
    17a4:	73 94       	inc	r7
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <vfprintf+0x2dc>
    17a8:	82 2f       	mov	r24, r18
    17aa:	86 78       	andi	r24, 0x86	; 134
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <vfprintf+0x2dc>
    17ae:	73 94       	inc	r7
    17b0:	23 fd       	sbrc	r18, 3
    17b2:	13 c0       	rjmp	.+38     	; 0x17da <vfprintf+0x306>
    17b4:	20 ff       	sbrs	r18, 0
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0x2f0>
    17b8:	5a 2c       	mov	r5, r10
    17ba:	73 14       	cp	r7, r3
    17bc:	18 f4       	brcc	.+6      	; 0x17c4 <vfprintf+0x2f0>
    17be:	53 0c       	add	r5, r3
    17c0:	57 18       	sub	r5, r7
    17c2:	73 2c       	mov	r7, r3
    17c4:	73 14       	cp	r7, r3
    17c6:	68 f4       	brcc	.+26     	; 0x17e2 <vfprintf+0x30e>
    17c8:	b7 01       	movw	r22, r14
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	2c 87       	std	Y+12, r18	; 0x0c
    17d0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    17d4:	73 94       	inc	r7
    17d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    17d8:	f5 cf       	rjmp	.-22     	; 0x17c4 <vfprintf+0x2f0>
    17da:	73 14       	cp	r7, r3
    17dc:	10 f4       	brcc	.+4      	; 0x17e2 <vfprintf+0x30e>
    17de:	37 18       	sub	r3, r7
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <vfprintf+0x310>
    17e2:	31 2c       	mov	r3, r1
    17e4:	24 ff       	sbrs	r18, 4
    17e6:	12 c0       	rjmp	.+36     	; 0x180c <vfprintf+0x338>
    17e8:	b7 01       	movw	r22, r14
    17ea:	80 e3       	ldi	r24, 0x30	; 48
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	2c 87       	std	Y+12, r18	; 0x0c
    17f0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    17f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    17f6:	22 ff       	sbrs	r18, 2
    17f8:	17 c0       	rjmp	.+46     	; 0x1828 <vfprintf+0x354>
    17fa:	21 ff       	sbrs	r18, 1
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <vfprintf+0x330>
    17fe:	88 e5       	ldi	r24, 0x58	; 88
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <vfprintf+0x334>
    1804:	88 e7       	ldi	r24, 0x78	; 120
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	b7 01       	movw	r22, r14
    180a:	0c c0       	rjmp	.+24     	; 0x1824 <vfprintf+0x350>
    180c:	82 2f       	mov	r24, r18
    180e:	86 78       	andi	r24, 0x86	; 134
    1810:	59 f0       	breq	.+22     	; 0x1828 <vfprintf+0x354>
    1812:	21 fd       	sbrc	r18, 1
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0x346>
    1816:	80 e2       	ldi	r24, 0x20	; 32
    1818:	01 c0       	rjmp	.+2      	; 0x181c <vfprintf+0x348>
    181a:	8b e2       	ldi	r24, 0x2B	; 43
    181c:	27 fd       	sbrc	r18, 7
    181e:	8d e2       	ldi	r24, 0x2D	; 45
    1820:	b7 01       	movw	r22, r14
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    1828:	a5 14       	cp	r10, r5
    182a:	38 f4       	brcc	.+14     	; 0x183a <vfprintf+0x366>
    182c:	b7 01       	movw	r22, r14
    182e:	80 e3       	ldi	r24, 0x30	; 48
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    1836:	5a 94       	dec	r5
    1838:	f7 cf       	rjmp	.-18     	; 0x1828 <vfprintf+0x354>
    183a:	aa 94       	dec	r10
    183c:	f4 01       	movw	r30, r8
    183e:	ea 0d       	add	r30, r10
    1840:	f1 1d       	adc	r31, r1
    1842:	80 81       	ld	r24, Z
    1844:	b7 01       	movw	r22, r14
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    184c:	a1 10       	cpse	r10, r1
    184e:	f5 cf       	rjmp	.-22     	; 0x183a <vfprintf+0x366>
    1850:	33 20       	and	r3, r3
    1852:	09 f4       	brne	.+2      	; 0x1856 <vfprintf+0x382>
    1854:	51 ce       	rjmp	.-862    	; 0x14f8 <vfprintf+0x24>
    1856:	b7 01       	movw	r22, r14
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <fputc>
    1860:	3a 94       	dec	r3
    1862:	f6 cf       	rjmp	.-20     	; 0x1850 <vfprintf+0x37c>
    1864:	f7 01       	movw	r30, r14
    1866:	86 81       	ldd	r24, Z+6	; 0x06
    1868:	97 81       	ldd	r25, Z+7	; 0x07
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <vfprintf+0x39c>
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f ef       	ldi	r25, 0xFF	; 255
    1870:	2c 96       	adiw	r28, 0x0c	; 12
    1872:	e2 e1       	ldi	r30, 0x12	; 18
    1874:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__epilogue_restores__>

00001878 <calloc>:
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	86 9f       	mul	r24, r22
    1882:	80 01       	movw	r16, r0
    1884:	87 9f       	mul	r24, r23
    1886:	10 0d       	add	r17, r0
    1888:	96 9f       	mul	r25, r22
    188a:	10 0d       	add	r17, r0
    188c:	11 24       	eor	r1, r1
    188e:	c8 01       	movw	r24, r16
    1890:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <malloc>
    1894:	ec 01       	movw	r28, r24
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	29 f0       	breq	.+10     	; 0x18a4 <calloc+0x2c>
    189a:	a8 01       	movw	r20, r16
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <memset>
    18a4:	ce 01       	movw	r24, r28
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <malloc>:
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	91 05       	cpc	r25, r1
    18b8:	10 f4       	brcc	.+4      	; 0x18be <malloc+0xe>
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	e0 91 e6 04 	lds	r30, 0x04E6
    18c2:	f0 91 e7 04 	lds	r31, 0x04E7
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	a0 e0       	ldi	r26, 0x00	; 0
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	30 97       	sbiw	r30, 0x00	; 0
    18d0:	39 f1       	breq	.+78     	; 0x1920 <malloc+0x70>
    18d2:	40 81       	ld	r20, Z
    18d4:	51 81       	ldd	r21, Z+1	; 0x01
    18d6:	48 17       	cp	r20, r24
    18d8:	59 07       	cpc	r21, r25
    18da:	b8 f0       	brcs	.+46     	; 0x190a <malloc+0x5a>
    18dc:	48 17       	cp	r20, r24
    18de:	59 07       	cpc	r21, r25
    18e0:	71 f4       	brne	.+28     	; 0x18fe <malloc+0x4e>
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	10 97       	sbiw	r26, 0x00	; 0
    18e8:	29 f0       	breq	.+10     	; 0x18f4 <malloc+0x44>
    18ea:	13 96       	adiw	r26, 0x03	; 3
    18ec:	9c 93       	st	X, r25
    18ee:	8e 93       	st	-X, r24
    18f0:	12 97       	sbiw	r26, 0x02	; 2
    18f2:	2c c0       	rjmp	.+88     	; 0x194c <malloc+0x9c>
    18f4:	90 93 e7 04 	sts	0x04E7, r25
    18f8:	80 93 e6 04 	sts	0x04E6, r24
    18fc:	27 c0       	rjmp	.+78     	; 0x194c <malloc+0x9c>
    18fe:	21 15       	cp	r18, r1
    1900:	31 05       	cpc	r19, r1
    1902:	31 f0       	breq	.+12     	; 0x1910 <malloc+0x60>
    1904:	42 17       	cp	r20, r18
    1906:	53 07       	cpc	r21, r19
    1908:	18 f0       	brcs	.+6      	; 0x1910 <malloc+0x60>
    190a:	a9 01       	movw	r20, r18
    190c:	db 01       	movw	r26, r22
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <malloc+0x62>
    1910:	ef 01       	movw	r28, r30
    1912:	9a 01       	movw	r18, r20
    1914:	bd 01       	movw	r22, r26
    1916:	df 01       	movw	r26, r30
    1918:	02 80       	ldd	r0, Z+2	; 0x02
    191a:	f3 81       	ldd	r31, Z+3	; 0x03
    191c:	e0 2d       	mov	r30, r0
    191e:	d7 cf       	rjmp	.-82     	; 0x18ce <malloc+0x1e>
    1920:	21 15       	cp	r18, r1
    1922:	31 05       	cpc	r19, r1
    1924:	f9 f0       	breq	.+62     	; 0x1964 <malloc+0xb4>
    1926:	28 1b       	sub	r18, r24
    1928:	39 0b       	sbc	r19, r25
    192a:	24 30       	cpi	r18, 0x04	; 4
    192c:	31 05       	cpc	r19, r1
    192e:	80 f4       	brcc	.+32     	; 0x1950 <malloc+0xa0>
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	61 15       	cp	r22, r1
    1936:	71 05       	cpc	r23, r1
    1938:	21 f0       	breq	.+8      	; 0x1942 <malloc+0x92>
    193a:	fb 01       	movw	r30, r22
    193c:	93 83       	std	Z+3, r25	; 0x03
    193e:	82 83       	std	Z+2, r24	; 0x02
    1940:	04 c0       	rjmp	.+8      	; 0x194a <malloc+0x9a>
    1942:	90 93 e7 04 	sts	0x04E7, r25
    1946:	80 93 e6 04 	sts	0x04E6, r24
    194a:	fe 01       	movw	r30, r28
    194c:	32 96       	adiw	r30, 0x02	; 2
    194e:	44 c0       	rjmp	.+136    	; 0x19d8 <malloc+0x128>
    1950:	fe 01       	movw	r30, r28
    1952:	e2 0f       	add	r30, r18
    1954:	f3 1f       	adc	r31, r19
    1956:	81 93       	st	Z+, r24
    1958:	91 93       	st	Z+, r25
    195a:	22 50       	subi	r18, 0x02	; 2
    195c:	31 09       	sbc	r19, r1
    195e:	39 83       	std	Y+1, r19	; 0x01
    1960:	28 83       	st	Y, r18
    1962:	3a c0       	rjmp	.+116    	; 0x19d8 <malloc+0x128>
    1964:	20 91 e4 04 	lds	r18, 0x04E4
    1968:	30 91 e5 04 	lds	r19, 0x04E5
    196c:	23 2b       	or	r18, r19
    196e:	41 f4       	brne	.+16     	; 0x1980 <malloc+0xd0>
    1970:	20 91 06 01 	lds	r18, 0x0106
    1974:	30 91 07 01 	lds	r19, 0x0107
    1978:	30 93 e5 04 	sts	0x04E5, r19
    197c:	20 93 e4 04 	sts	0x04E4, r18
    1980:	20 91 04 01 	lds	r18, 0x0104
    1984:	30 91 05 01 	lds	r19, 0x0105
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	41 f4       	brne	.+16     	; 0x199e <malloc+0xee>
    198e:	2d b7       	in	r18, 0x3d	; 61
    1990:	3e b7       	in	r19, 0x3e	; 62
    1992:	40 91 08 01 	lds	r20, 0x0108
    1996:	50 91 09 01 	lds	r21, 0x0109
    199a:	24 1b       	sub	r18, r20
    199c:	35 0b       	sbc	r19, r21
    199e:	e0 91 e4 04 	lds	r30, 0x04E4
    19a2:	f0 91 e5 04 	lds	r31, 0x04E5
    19a6:	e2 17       	cp	r30, r18
    19a8:	f3 07       	cpc	r31, r19
    19aa:	a0 f4       	brcc	.+40     	; 0x19d4 <malloc+0x124>
    19ac:	2e 1b       	sub	r18, r30
    19ae:	3f 0b       	sbc	r19, r31
    19b0:	28 17       	cp	r18, r24
    19b2:	39 07       	cpc	r19, r25
    19b4:	78 f0       	brcs	.+30     	; 0x19d4 <malloc+0x124>
    19b6:	ac 01       	movw	r20, r24
    19b8:	4e 5f       	subi	r20, 0xFE	; 254
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
    19bc:	24 17       	cp	r18, r20
    19be:	35 07       	cpc	r19, r21
    19c0:	48 f0       	brcs	.+18     	; 0x19d4 <malloc+0x124>
    19c2:	4e 0f       	add	r20, r30
    19c4:	5f 1f       	adc	r21, r31
    19c6:	50 93 e5 04 	sts	0x04E5, r21
    19ca:	40 93 e4 04 	sts	0x04E4, r20
    19ce:	81 93       	st	Z+, r24
    19d0:	91 93       	st	Z+, r25
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <malloc+0x128>
    19d4:	e0 e0       	ldi	r30, 0x00	; 0
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	cf 01       	movw	r24, r30
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <free>:
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	09 f4       	brne	.+2      	; 0x19ea <free+0xa>
    19e8:	87 c0       	rjmp	.+270    	; 0x1af8 <free+0x118>
    19ea:	fc 01       	movw	r30, r24
    19ec:	32 97       	sbiw	r30, 0x02	; 2
    19ee:	13 82       	std	Z+3, r1	; 0x03
    19f0:	12 82       	std	Z+2, r1	; 0x02
    19f2:	c0 91 e6 04 	lds	r28, 0x04E6
    19f6:	d0 91 e7 04 	lds	r29, 0x04E7
    19fa:	20 97       	sbiw	r28, 0x00	; 0
    19fc:	81 f4       	brne	.+32     	; 0x1a1e <free+0x3e>
    19fe:	20 81       	ld	r18, Z
    1a00:	31 81       	ldd	r19, Z+1	; 0x01
    1a02:	28 0f       	add	r18, r24
    1a04:	39 1f       	adc	r19, r25
    1a06:	80 91 e4 04 	lds	r24, 0x04E4
    1a0a:	90 91 e5 04 	lds	r25, 0x04E5
    1a0e:	82 17       	cp	r24, r18
    1a10:	93 07       	cpc	r25, r19
    1a12:	79 f5       	brne	.+94     	; 0x1a72 <free+0x92>
    1a14:	f0 93 e5 04 	sts	0x04E5, r31
    1a18:	e0 93 e4 04 	sts	0x04E4, r30
    1a1c:	6d c0       	rjmp	.+218    	; 0x1af8 <free+0x118>
    1a1e:	de 01       	movw	r26, r28
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	ae 17       	cp	r26, r30
    1a26:	bf 07       	cpc	r27, r31
    1a28:	50 f4       	brcc	.+20     	; 0x1a3e <free+0x5e>
    1a2a:	12 96       	adiw	r26, 0x02	; 2
    1a2c:	4d 91       	ld	r20, X+
    1a2e:	5c 91       	ld	r21, X
    1a30:	13 97       	sbiw	r26, 0x03	; 3
    1a32:	9d 01       	movw	r18, r26
    1a34:	41 15       	cp	r20, r1
    1a36:	51 05       	cpc	r21, r1
    1a38:	09 f1       	breq	.+66     	; 0x1a7c <free+0x9c>
    1a3a:	da 01       	movw	r26, r20
    1a3c:	f3 cf       	rjmp	.-26     	; 0x1a24 <free+0x44>
    1a3e:	b3 83       	std	Z+3, r27	; 0x03
    1a40:	a2 83       	std	Z+2, r26	; 0x02
    1a42:	40 81       	ld	r20, Z
    1a44:	51 81       	ldd	r21, Z+1	; 0x01
    1a46:	84 0f       	add	r24, r20
    1a48:	95 1f       	adc	r25, r21
    1a4a:	8a 17       	cp	r24, r26
    1a4c:	9b 07       	cpc	r25, r27
    1a4e:	71 f4       	brne	.+28     	; 0x1a6c <free+0x8c>
    1a50:	8d 91       	ld	r24, X+
    1a52:	9c 91       	ld	r25, X
    1a54:	11 97       	sbiw	r26, 0x01	; 1
    1a56:	84 0f       	add	r24, r20
    1a58:	95 1f       	adc	r25, r21
    1a5a:	02 96       	adiw	r24, 0x02	; 2
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	12 96       	adiw	r26, 0x02	; 2
    1a62:	8d 91       	ld	r24, X+
    1a64:	9c 91       	ld	r25, X
    1a66:	13 97       	sbiw	r26, 0x03	; 3
    1a68:	93 83       	std	Z+3, r25	; 0x03
    1a6a:	82 83       	std	Z+2, r24	; 0x02
    1a6c:	21 15       	cp	r18, r1
    1a6e:	31 05       	cpc	r19, r1
    1a70:	29 f4       	brne	.+10     	; 0x1a7c <free+0x9c>
    1a72:	f0 93 e7 04 	sts	0x04E7, r31
    1a76:	e0 93 e6 04 	sts	0x04E6, r30
    1a7a:	3e c0       	rjmp	.+124    	; 0x1af8 <free+0x118>
    1a7c:	d9 01       	movw	r26, r18
    1a7e:	13 96       	adiw	r26, 0x03	; 3
    1a80:	fc 93       	st	X, r31
    1a82:	ee 93       	st	-X, r30
    1a84:	12 97       	sbiw	r26, 0x02	; 2
    1a86:	4d 91       	ld	r20, X+
    1a88:	5d 91       	ld	r21, X+
    1a8a:	a4 0f       	add	r26, r20
    1a8c:	b5 1f       	adc	r27, r21
    1a8e:	ea 17       	cp	r30, r26
    1a90:	fb 07       	cpc	r31, r27
    1a92:	79 f4       	brne	.+30     	; 0x1ab2 <free+0xd2>
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	84 0f       	add	r24, r20
    1a9a:	95 1f       	adc	r25, r21
    1a9c:	02 96       	adiw	r24, 0x02	; 2
    1a9e:	d9 01       	movw	r26, r18
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	9c 93       	st	X, r25
    1aa4:	8e 93       	st	-X, r24
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	13 96       	adiw	r26, 0x03	; 3
    1aac:	9c 93       	st	X, r25
    1aae:	8e 93       	st	-X, r24
    1ab0:	12 97       	sbiw	r26, 0x02	; 2
    1ab2:	e0 e0       	ldi	r30, 0x00	; 0
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <free+0xe4>
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ec 01       	movw	r28, r24
    1ac2:	f9 cf       	rjmp	.-14     	; 0x1ab6 <free+0xd6>
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	02 96       	adiw	r24, 0x02	; 2
    1ac8:	28 81       	ld	r18, Y
    1aca:	39 81       	ldd	r19, Y+1	; 0x01
    1acc:	82 0f       	add	r24, r18
    1ace:	93 1f       	adc	r25, r19
    1ad0:	20 91 e4 04 	lds	r18, 0x04E4
    1ad4:	30 91 e5 04 	lds	r19, 0x04E5
    1ad8:	28 17       	cp	r18, r24
    1ada:	39 07       	cpc	r19, r25
    1adc:	69 f4       	brne	.+26     	; 0x1af8 <free+0x118>
    1ade:	30 97       	sbiw	r30, 0x00	; 0
    1ae0:	29 f4       	brne	.+10     	; 0x1aec <free+0x10c>
    1ae2:	10 92 e7 04 	sts	0x04E7, r1
    1ae6:	10 92 e6 04 	sts	0x04E6, r1
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <free+0x110>
    1aec:	13 82       	std	Z+3, r1	; 0x03
    1aee:	12 82       	std	Z+2, r1	; 0x02
    1af0:	d0 93 e5 04 	sts	0x04E5, r29
    1af4:	c0 93 e4 04 	sts	0x04E4, r28
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <strnlen_P>:
    1afe:	fc 01       	movw	r30, r24
    1b00:	05 90       	lpm	r0, Z+
    1b02:	61 50       	subi	r22, 0x01	; 1
    1b04:	70 40       	sbci	r23, 0x00	; 0
    1b06:	01 10       	cpse	r0, r1
    1b08:	d8 f7       	brcc	.-10     	; 0x1b00 <strnlen_P+0x2>
    1b0a:	80 95       	com	r24
    1b0c:	90 95       	com	r25
    1b0e:	8e 0f       	add	r24, r30
    1b10:	9f 1f       	adc	r25, r31
    1b12:	08 95       	ret

00001b14 <memset>:
    1b14:	dc 01       	movw	r26, r24
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <memset+0x6>
    1b18:	6d 93       	st	X+, r22
    1b1a:	41 50       	subi	r20, 0x01	; 1
    1b1c:	50 40       	sbci	r21, 0x00	; 0
    1b1e:	e0 f7       	brcc	.-8      	; 0x1b18 <memset+0x4>
    1b20:	08 95       	ret

00001b22 <strnlen>:
    1b22:	fc 01       	movw	r30, r24
    1b24:	61 50       	subi	r22, 0x01	; 1
    1b26:	70 40       	sbci	r23, 0x00	; 0
    1b28:	01 90       	ld	r0, Z+
    1b2a:	01 10       	cpse	r0, r1
    1b2c:	d8 f7       	brcc	.-10     	; 0x1b24 <strnlen+0x2>
    1b2e:	80 95       	com	r24
    1b30:	90 95       	com	r25
    1b32:	8e 0f       	add	r24, r30
    1b34:	9f 1f       	adc	r25, r31
    1b36:	08 95       	ret

00001b38 <fputc>:
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	18 2f       	mov	r17, r24
    1b42:	09 2f       	mov	r16, r25
    1b44:	eb 01       	movw	r28, r22
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	81 fd       	sbrc	r24, 1
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <fputc+0x1a>
    1b4c:	8f ef       	ldi	r24, 0xFF	; 255
    1b4e:	9f ef       	ldi	r25, 0xFF	; 255
    1b50:	20 c0       	rjmp	.+64     	; 0x1b92 <fputc+0x5a>
    1b52:	82 ff       	sbrs	r24, 2
    1b54:	10 c0       	rjmp	.+32     	; 0x1b76 <fputc+0x3e>
    1b56:	4e 81       	ldd	r20, Y+6	; 0x06
    1b58:	5f 81       	ldd	r21, Y+7	; 0x07
    1b5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5e:	42 17       	cp	r20, r18
    1b60:	53 07       	cpc	r21, r19
    1b62:	7c f4       	brge	.+30     	; 0x1b82 <fputc+0x4a>
    1b64:	e8 81       	ld	r30, Y
    1b66:	f9 81       	ldd	r31, Y+1	; 0x01
    1b68:	9f 01       	movw	r18, r30
    1b6a:	2f 5f       	subi	r18, 0xFF	; 255
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	39 83       	std	Y+1, r19	; 0x01
    1b70:	28 83       	st	Y, r18
    1b72:	10 83       	st	Z, r17
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <fputc+0x4a>
    1b76:	e8 85       	ldd	r30, Y+8	; 0x08
    1b78:	f9 85       	ldd	r31, Y+9	; 0x09
    1b7a:	81 2f       	mov	r24, r17
    1b7c:	09 95       	icall
    1b7e:	89 2b       	or	r24, r25
    1b80:	29 f7       	brne	.-54     	; 0x1b4c <fputc+0x14>
    1b82:	2e 81       	ldd	r18, Y+6	; 0x06
    1b84:	3f 81       	ldd	r19, Y+7	; 0x07
    1b86:	2f 5f       	subi	r18, 0xFF	; 255
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	3f 83       	std	Y+7, r19	; 0x07
    1b8c:	2e 83       	std	Y+6, r18	; 0x06
    1b8e:	81 2f       	mov	r24, r17
    1b90:	90 2f       	mov	r25, r16
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	08 95       	ret

00001b9c <__ultoa_invert>:
    1b9c:	fa 01       	movw	r30, r20
    1b9e:	aa 27       	eor	r26, r26
    1ba0:	28 30       	cpi	r18, 0x08	; 8
    1ba2:	51 f1       	breq	.+84     	; 0x1bf8 <__ultoa_invert+0x5c>
    1ba4:	20 31       	cpi	r18, 0x10	; 16
    1ba6:	81 f1       	breq	.+96     	; 0x1c08 <__ultoa_invert+0x6c>
    1ba8:	e8 94       	clt
    1baa:	6f 93       	push	r22
    1bac:	6e 7f       	andi	r22, 0xFE	; 254
    1bae:	6e 5f       	subi	r22, 0xFE	; 254
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	af 4f       	sbci	r26, 0xFF	; 255
    1bb8:	b1 e0       	ldi	r27, 0x01	; 1
    1bba:	3e d0       	rcall	.+124    	; 0x1c38 <__ultoa_invert+0x9c>
    1bbc:	b4 e0       	ldi	r27, 0x04	; 4
    1bbe:	3c d0       	rcall	.+120    	; 0x1c38 <__ultoa_invert+0x9c>
    1bc0:	67 0f       	add	r22, r23
    1bc2:	78 1f       	adc	r23, r24
    1bc4:	89 1f       	adc	r24, r25
    1bc6:	9a 1f       	adc	r25, r26
    1bc8:	a1 1d       	adc	r26, r1
    1bca:	68 0f       	add	r22, r24
    1bcc:	79 1f       	adc	r23, r25
    1bce:	8a 1f       	adc	r24, r26
    1bd0:	91 1d       	adc	r25, r1
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	6a 0f       	add	r22, r26
    1bd6:	71 1d       	adc	r23, r1
    1bd8:	81 1d       	adc	r24, r1
    1bda:	91 1d       	adc	r25, r1
    1bdc:	a1 1d       	adc	r26, r1
    1bde:	20 d0       	rcall	.+64     	; 0x1c20 <__ultoa_invert+0x84>
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <__ultoa_invert+0x48>
    1be2:	68 94       	set
    1be4:	3f 91       	pop	r19
    1be6:	2a e0       	ldi	r18, 0x0A	; 10
    1be8:	26 9f       	mul	r18, r22
    1bea:	11 24       	eor	r1, r1
    1bec:	30 19       	sub	r19, r0
    1bee:	30 5d       	subi	r19, 0xD0	; 208
    1bf0:	31 93       	st	Z+, r19
    1bf2:	de f6       	brtc	.-74     	; 0x1baa <__ultoa_invert+0xe>
    1bf4:	cf 01       	movw	r24, r30
    1bf6:	08 95       	ret
    1bf8:	46 2f       	mov	r20, r22
    1bfa:	47 70       	andi	r20, 0x07	; 7
    1bfc:	40 5d       	subi	r20, 0xD0	; 208
    1bfe:	41 93       	st	Z+, r20
    1c00:	b3 e0       	ldi	r27, 0x03	; 3
    1c02:	0f d0       	rcall	.+30     	; 0x1c22 <__ultoa_invert+0x86>
    1c04:	c9 f7       	brne	.-14     	; 0x1bf8 <__ultoa_invert+0x5c>
    1c06:	f6 cf       	rjmp	.-20     	; 0x1bf4 <__ultoa_invert+0x58>
    1c08:	46 2f       	mov	r20, r22
    1c0a:	4f 70       	andi	r20, 0x0F	; 15
    1c0c:	40 5d       	subi	r20, 0xD0	; 208
    1c0e:	4a 33       	cpi	r20, 0x3A	; 58
    1c10:	18 f0       	brcs	.+6      	; 0x1c18 <__ultoa_invert+0x7c>
    1c12:	49 5d       	subi	r20, 0xD9	; 217
    1c14:	31 fd       	sbrc	r19, 1
    1c16:	40 52       	subi	r20, 0x20	; 32
    1c18:	41 93       	st	Z+, r20
    1c1a:	02 d0       	rcall	.+4      	; 0x1c20 <__ultoa_invert+0x84>
    1c1c:	a9 f7       	brne	.-22     	; 0x1c08 <__ultoa_invert+0x6c>
    1c1e:	ea cf       	rjmp	.-44     	; 0x1bf4 <__ultoa_invert+0x58>
    1c20:	b4 e0       	ldi	r27, 0x04	; 4
    1c22:	a6 95       	lsr	r26
    1c24:	97 95       	ror	r25
    1c26:	87 95       	ror	r24
    1c28:	77 95       	ror	r23
    1c2a:	67 95       	ror	r22
    1c2c:	ba 95       	dec	r27
    1c2e:	c9 f7       	brne	.-14     	; 0x1c22 <__ultoa_invert+0x86>
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	61 05       	cpc	r22, r1
    1c34:	71 05       	cpc	r23, r1
    1c36:	08 95       	ret
    1c38:	9b 01       	movw	r18, r22
    1c3a:	ac 01       	movw	r20, r24
    1c3c:	0a 2e       	mov	r0, r26
    1c3e:	06 94       	lsr	r0
    1c40:	57 95       	ror	r21
    1c42:	47 95       	ror	r20
    1c44:	37 95       	ror	r19
    1c46:	27 95       	ror	r18
    1c48:	ba 95       	dec	r27
    1c4a:	c9 f7       	brne	.-14     	; 0x1c3e <__ultoa_invert+0xa2>
    1c4c:	62 0f       	add	r22, r18
    1c4e:	73 1f       	adc	r23, r19
    1c50:	84 1f       	adc	r24, r20
    1c52:	95 1f       	adc	r25, r21
    1c54:	a0 1d       	adc	r26, r0
    1c56:	08 95       	ret

00001c58 <__divmodsi4>:
    1c58:	05 2e       	mov	r0, r21
    1c5a:	97 fb       	bst	r25, 7
    1c5c:	1e f4       	brtc	.+6      	; 0x1c64 <__divmodsi4+0xc>
    1c5e:	00 94       	com	r0
    1c60:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__negsi2>
    1c64:	57 fd       	sbrc	r21, 7
    1c66:	07 d0       	rcall	.+14     	; 0x1c76 <__divmodsi4_neg2>
    1c68:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__udivmodsi4>
    1c6c:	07 fc       	sbrc	r0, 7
    1c6e:	03 d0       	rcall	.+6      	; 0x1c76 <__divmodsi4_neg2>
    1c70:	4e f4       	brtc	.+18     	; 0x1c84 <__divmodsi4_exit>
    1c72:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__negsi2>

00001c76 <__divmodsi4_neg2>:
    1c76:	50 95       	com	r21
    1c78:	40 95       	com	r20
    1c7a:	30 95       	com	r19
    1c7c:	21 95       	neg	r18
    1c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c80:	4f 4f       	sbci	r20, 0xFF	; 255
    1c82:	5f 4f       	sbci	r21, 0xFF	; 255

00001c84 <__divmodsi4_exit>:
    1c84:	08 95       	ret

00001c86 <__negsi2>:
    1c86:	90 95       	com	r25
    1c88:	80 95       	com	r24
    1c8a:	70 95       	com	r23
    1c8c:	61 95       	neg	r22
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	08 95       	ret

00001c96 <__muluhisi3>:
    1c96:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__umulhisi3>
    1c9a:	a5 9f       	mul	r26, r21
    1c9c:	90 0d       	add	r25, r0
    1c9e:	b4 9f       	mul	r27, r20
    1ca0:	90 0d       	add	r25, r0
    1ca2:	a4 9f       	mul	r26, r20
    1ca4:	80 0d       	add	r24, r0
    1ca6:	91 1d       	adc	r25, r1
    1ca8:	11 24       	eor	r1, r1
    1caa:	08 95       	ret

00001cac <__mulshisi3>:
    1cac:	b7 ff       	sbrs	r27, 7
    1cae:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__muluhisi3>

00001cb2 <__mulohisi3>:
    1cb2:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__muluhisi3>
    1cb6:	82 1b       	sub	r24, r18
    1cb8:	93 0b       	sbc	r25, r19
    1cba:	08 95       	ret

00001cbc <__prologue_saves__>:
    1cbc:	2f 92       	push	r2
    1cbe:	3f 92       	push	r3
    1cc0:	4f 92       	push	r4
    1cc2:	5f 92       	push	r5
    1cc4:	6f 92       	push	r6
    1cc6:	7f 92       	push	r7
    1cc8:	8f 92       	push	r8
    1cca:	9f 92       	push	r9
    1ccc:	af 92       	push	r10
    1cce:	bf 92       	push	r11
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	ca 1b       	sub	r28, r26
    1ce6:	db 0b       	sbc	r29, r27
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	09 94       	ijmp

00001cf4 <__epilogue_restores__>:
    1cf4:	2a 88       	ldd	r2, Y+18	; 0x12
    1cf6:	39 88       	ldd	r3, Y+17	; 0x11
    1cf8:	48 88       	ldd	r4, Y+16	; 0x10
    1cfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d00:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d02:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d04:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d06:	b9 84       	ldd	r11, Y+9	; 0x09
    1d08:	c8 84       	ldd	r12, Y+8	; 0x08
    1d0a:	df 80       	ldd	r13, Y+7	; 0x07
    1d0c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d0e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d10:	0c 81       	ldd	r16, Y+4	; 0x04
    1d12:	1b 81       	ldd	r17, Y+3	; 0x03
    1d14:	aa 81       	ldd	r26, Y+2	; 0x02
    1d16:	b9 81       	ldd	r27, Y+1	; 0x01
    1d18:	ce 0f       	add	r28, r30
    1d1a:	d1 1d       	adc	r29, r1
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	ed 01       	movw	r28, r26
    1d28:	08 95       	ret

00001d2a <__udivmodsi4>:
    1d2a:	a1 e2       	ldi	r26, 0x21	; 33
    1d2c:	1a 2e       	mov	r1, r26
    1d2e:	aa 1b       	sub	r26, r26
    1d30:	bb 1b       	sub	r27, r27
    1d32:	fd 01       	movw	r30, r26
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <__udivmodsi4_ep>

00001d36 <__udivmodsi4_loop>:
    1d36:	aa 1f       	adc	r26, r26
    1d38:	bb 1f       	adc	r27, r27
    1d3a:	ee 1f       	adc	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	a2 17       	cp	r26, r18
    1d40:	b3 07       	cpc	r27, r19
    1d42:	e4 07       	cpc	r30, r20
    1d44:	f5 07       	cpc	r31, r21
    1d46:	20 f0       	brcs	.+8      	; 0x1d50 <__udivmodsi4_ep>
    1d48:	a2 1b       	sub	r26, r18
    1d4a:	b3 0b       	sbc	r27, r19
    1d4c:	e4 0b       	sbc	r30, r20
    1d4e:	f5 0b       	sbc	r31, r21

00001d50 <__udivmodsi4_ep>:
    1d50:	66 1f       	adc	r22, r22
    1d52:	77 1f       	adc	r23, r23
    1d54:	88 1f       	adc	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	1a 94       	dec	r1
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <__udivmodsi4_loop>
    1d5c:	60 95       	com	r22
    1d5e:	70 95       	com	r23
    1d60:	80 95       	com	r24
    1d62:	90 95       	com	r25
    1d64:	9b 01       	movw	r18, r22
    1d66:	ac 01       	movw	r20, r24
    1d68:	bd 01       	movw	r22, r26
    1d6a:	cf 01       	movw	r24, r30
    1d6c:	08 95       	ret

00001d6e <__umulhisi3>:
    1d6e:	a2 9f       	mul	r26, r18
    1d70:	b0 01       	movw	r22, r0
    1d72:	b3 9f       	mul	r27, r19
    1d74:	c0 01       	movw	r24, r0
    1d76:	a3 9f       	mul	r26, r19
    1d78:	70 0d       	add	r23, r0
    1d7a:	81 1d       	adc	r24, r1
    1d7c:	11 24       	eor	r1, r1
    1d7e:	91 1d       	adc	r25, r1
    1d80:	b2 9f       	mul	r27, r18
    1d82:	70 0d       	add	r23, r0
    1d84:	81 1d       	adc	r24, r1
    1d86:	11 24       	eor	r1, r1
    1d88:	91 1d       	adc	r25, r1
    1d8a:	08 95       	ret

00001d8c <_exit>:
    1d8c:	f8 94       	cli

00001d8e <__stop_program>:
    1d8e:	ff cf       	rjmp	.-2      	; 0x1d8e <__stop_program>
